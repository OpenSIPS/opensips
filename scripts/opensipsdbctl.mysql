# $Id$
#
# Script for adding and dropping OpenSIPS MySQL tables
#
# History:
# 2006-04-07  removed gen_ha1 dependency - use md5sum;
#             separated the serweb from opensips tables;
#             fixed the reinstall functionality (bogdan)
# 2006-05-16  added ability to specify MD5 from a configuration file
#             FreeBSD does not have the md5sum function (norm)
# 2006-09-02  Added address table (juhe)
# 2006-10-27  subscriber table cleanup; some columns are created only if
#             serweb is installed (bogdan)
# 2007-02-28  DB migration added (bogdan)
# 2007-05-21  Move SQL database definitions out of this script (henning)
# 2007-05-31  Move common definitions to opensipsdbctl.base file (henningw)
# 2007-06-11  Use a common control tool for database tasks, like the opensipsctl

# path to the database schemas
DATA_DIR="/usr/local/share/opensips"
if [ -d "$DATA_DIR/mysql" ]; then
	DB_SCHEMA="$DATA_DIR/mysql"
elif [ -d "scripts/mysql" ]; then
	DB_SCHEMA="scripts/mysql"
else
	DB_SCHEMA="./mysql"
fi

#################################################################
# config vars
#################################################################

# full privileges MySQL user
if [ -z "$DBROOTUSER" ]; then
	DBROOTUSER="root"
fi

# Uncomment this to set the database root password if you want to run this 
# script without any user prompt. This is unsafe, but useful e.g. for 
# automatic testing.
#PW=""

if ! [ -z "$DBPORT" ]; then
	PORT_OPT="-P$DBPORT"
else
	PORT_OPT=
fi

CMD="mysql -h $DBHOST $PORT_OPT -u$DBROOTUSER "
DUMP_CMD="mysqldump -h $DBHOST $PORT_OPT -u$DBROOTUSER -c -t "
#################################################################


# read password
prompt_pw()
{
	savetty=`stty -g`
	echo -n "MySQL password for $DBROOTUSER: "
	stty -echo
	read PW
	stty $savetty
	echo
	export PW
}

# execute sql command with optional db name 
# and password parameters given
sql_query()
{
	if [ $# -gt 1 ] ; then
		if [ -n "$1" ]; then
			DB="$1" # no quoting, mysql client don't like this
		else
			DB=""
		fi
		shift
		if [ -n "$PW" ]; then
			$CMD "-p$PW" $DB -Bse "$@"
		else
			$CMD $DB -Bse "$@"
		fi
	else
		if [ -n "$PW" ]; then
			$CMD "-p$PW" -Bs "$@"
		else
			$CMD -Bs "$@"
		fi
	fi
}


opensips_drop()  # pars: <database name>
{
if [ $# -ne 1 ] ; then
	merr "opensips_drop function takes two params"
	exit 1
fi

sql_query "" "drop database $1;"

if [ $? -ne 0 ] ; then
	merr "Dropping database $1 failed!"
	exit 1
fi
minfo "Database $1 deleted"
}


db_charset_test()
{
	if [ -n "$PW" ]; then
		CURRCHARSET=`echo "show variables like '%character_set_server%'" | $CMD "-p$PW" | $AWK '{print $2}' | $SED -e 1d`
		ALLCHARSETS=`echo "show character set" | $CMD "-p$PW" | $AWK '{print $1}' | $SED -e 1d | $GREP -iv "utf8" | $GREP -iv "ucs2"`
	else
		CURRCHARSET=`echo "show variables like '%character_set_server%'" | $CMD | $AWK '{print $2}' | $SED -e 1d`
		ALLCHARSETS=`echo "show character set" | $CMD | $AWK '{print $1}' | $SED -e 1d | $GREP -iv  "utf8" | $GREP -iv "ucs2"`
	fi

	if [ -z "$ALLCHARSETS" -o -z "$CURRCHARSET" ]; then
		mwarn "Failed to get the available and used character sets"
		exit 1;
	fi

	tries=0;

	while [ `echo "$ALLCHARSETS" | $GREP -icw $CURRCHARSET`  = "0" ]
	do
		mwarn "Your current default mysql characters set cannot be used to create DB. Please choice another one from the following list:"
		mecho "$ALLCHARSETS"

		let tries=tries+1;
		mecho "Enter character set name: "
		read CURRCHARSET

		if [ $tries -ge 3 ]
		then
			merr "Check your current charset"
			merr "Exiting..."
			exit 1;
		fi
	done
	CHARSET=$CURRCHARSET
}


opensips_create () # pars: <database name>
{
if [ $# -ne 1 ] ; then
	merr "opensips_create function takes one param"
	exit 1
fi

minfo "test server charset"

db_charset_test

minfo "creating database $1 ..."

# Users: opensips is the regular user, opensipsro only for reading
sql_query "" "create database $1 character set $CHARSET;"
if [ $? -ne 0 ] ; then
	merr "Creating database $1 failed!"
	exit 1
fi

if [ "$DBROOTUSER" != "$DBRWUSER" ] ; then
sql_query "" "
	GRANT ALL PRIVILEGES ON $1.* TO '$DBRWUSER' IDENTIFIED  BY '$DBRWPW';
	GRANT ALL PRIVILEGES ON $1.* TO '${DBRWUSER}'@'$DBHOST' IDENTIFIED BY '$DBRWPW';
"
fi

if [ $? -ne 0 ] ; then
	merr "Creating core database and grant privileges failed!"
	exit 1
fi

if [ "$MYSQL_ENGINE" == "" ] ; then
	MYSQL_ENGINE="InnoDB"
fi
minfo "Using table engine $MYSQL_ENGINE."

for TABLE in $STANDARD_MODULES; do
	mdbg "Creating core table: $TABLE"
	$SED "s/ENGINE=[A-Za-z]\+/ENGINE=$MYSQL_ENGINE/g" $DB_SCHEMA/$TABLE-create.sql | sql_query $1
	if [ $? -ne 0 ] ; then
		merr "Creating core tables failed!"
		exit 1
	fi
done

minfo "Core OpenSIPS tables successfully created."

if [ -e $DB_SCHEMA/extensions-create.sql ]
then
	minfo "Creating custom extensions tables"
	sql_query $1 < $DB_SCHEMA/extensions-create.sql
	if [ $? -ne 0 ] ; then
		merr "Creating custom extensions tables failed!"
		exit 1
	fi
fi

get_answer $INSTALL_PRESENCE_TABLES "Install presence related tables? (y/n): "
if [ "$ANSWER" = "y" ]; then
	presence_create $1
fi

get_answer $INSTALL_EXTRA_TABLES "Install tables for $EXTRA_MODULES? (y/n): "
if [ "$ANSWER" = "y" ]; then
	HAS_EXTRA="yes"
	extra_create $1
fi
} # opensips_create


presence_create () # pars: <database name>
{
if [ $# -ne 1 ] ; then
	merr "presence_create function takes one param"
	exit 1
fi

minfo "creating presence tables into $1 ..."

sql_query $1 < $DB_SCHEMA/presence-create.sql

if [ $? -ne 0 ] ; then
	merr "Failed to create presence tables!"
	exit 1
fi

sql_query $1 < $DB_SCHEMA/rls-create.sql

if [ $? -ne 0 ] ; then
	merr "Failed to create rls-presence tables!"
	exit 1
fi

minfo "Presence tables successfully created."
}  # end presence_create


extra_create () # pars: <database name>
{
if [ $# -ne 1 ] ; then
	merr "extra_create function takes one param"
	exit 1
fi

minfo "creating extra tables into $1 ..."

for TABLE in $EXTRA_MODULES; do
	mdbg "Creating extra table: $TABLE"
	sql_query $1 < $DB_SCHEMA/$TABLE-create.sql
	if [ $? -ne 0 ] ; then
		merr "Creating extra tables failed!"
		exit 1
		fi
	done
minfo "Extra tables successfully created."
}  # end extra_create


migrate_table () # 4 paremeters (dst_table, dst_cols, src_table, src_cols)
{
if [ $# -ne 4 ] ; then
	echo "param1=$1 param2=$2 param3=$3 param4=$4" 
	merr "migrate_table function takes 4 params $@"
	exit 1
fi

src_cols=`echo $4 | sed s/?/$3./g `

X=`sql_query "" "INSERT into $1 ($2) SELECT $src_cols from $3;" 2>&1`

if [ $? -ne 0 ] ; then
	echo $X | $GREP "ERROR 1146" > /dev/null
	if [ $? -eq 0 ] ; then 
		echo " -- Migrating $3 to $1.....SKIPPED (no source)"
		return 0
	fi
	echo "ERROR: failed to migrate $3 to $1 ($X)!!!"
	echo -n "Skip it and continue (y/n)? "
	read INPUT
	if [ "$INPUT" = "y" ] || [ "$INPUT" = "Y" ]
	then
		return 0
	fi

	exit 1;
fi

minfo " -- Migrating $3 to $1.....OK"

}

migrate_db () # 2 parameters (src_db, dst_db)
{
if [ $# -ne 2 ] ; then
	merr "migrate_db function takes 2 params"
	exit 1
fi

dst_db=$2
src_db=$1

## ACC module
migrate_table ${dst_db}.acc \
	"id,method,from_tag,to_tag,callid,sip_code,sip_reason,time,duration,setuptime,created" \
	${src_db}.acc \
	"?id,?method,?from_tag,?to_tag,?callid,?sip_code,?sip_reason,?time,?duration,?setuptime,?created"

migrate_table ${dst_db}.missed_calls \
	 "id,method,from_tag,to_tag,callid,sip_code,sip_reason,time" \
 	 ${src_db}.missed_calls \
	 "?id,?method,?from_tag,?to_tag,?callid,?sip_code,?sip_reason,?time"

## ALIAS_DB module
migrate_table ${dst_db}.dbaliases \
	"id,alias_username,alias_domain,username,domain" \
	${src_db}.dbaliases \
	"?id,?alias_username,?alias_domain,?username,?domain"

## AUTH_DB module
migrate_table ${dst_db}.subscriber \
	"id,username,domain,password,email_address,ha1,ha1b,rpid" \
	${src_db}.subscriber \
	"?id,?username,?domain,?password,?email_address,?ha1,?ha1b,?rpid"

## AVPOPS module
migrate_table ${dst_db}.usr_preferences \
	"id,uuid,username,domain,attribute,type,value,last_modified" \
	${src_db}.usr_preferences \
	"?id,?uuid,?username,?domain,?attribute,?type,?value,?last_modified"

## B2B modules
#  runtime data, nothing to migrate

## CACHEDB_SQL module
migrate_table ${dst_db}.cachedb \
	"keyname,value,counter,expires" \
	${src_db}.cachedb \
	"?keyname,?value,?counter,?expires" 

## DIALOG modules
#  runtime data, nothing to migrate

## DIALPLAN module
migrate_table ${dst_db}.dialplan \
	"id,dpid,pr,match_op,match_exp,match_flags,subst_exp,repl_exp,disabled,attrs" \
	${src_db}.dialplan \
	"?id,?dpid,?pr,?match_op,?match_exp,?match_flags,?subst_exp,?repl_exp,?disabled,?attrs"

## DISPATCHER module (changes here, the flags and state columns)
migrate_table ${dst_db}.dispatcher \
	"id,setid,destination,weight,attrs,description" \
	${src_db}.dispatcher \
	"?id,?setid,?destination,?weight,?attrs,?description"

## DOMAIN module
migrate_table ${dst_db}.domain \
	"id,domain,last_modified" \
	${src_db}.domain \
	"?id,?domain,?last_modified"

## DROUTING module
migrate_table ${dst_db}.dr_gateways \
	"id,gwid,type,address,strip,pri_prefix,attrs,probe_mode,state,socket,description" \
	${src_db}.dr_gateways \
	"?id,?gwid,?type,?address,?strip,?pri_prefix,?attrs,?probe_mode,?state,?socket,?description"

migrate_table ${dst_db}.dr_rules \
	"ruleid,groupid,prefix,timerec,priority,routeid,gwlist,attrs,description" \
	${src_db}.dr_rules \
	"?ruleid,?groupid,?prefix,?timerec,?priority,?routeid,?gwlist,?attrs,?description"

migrate_table ${dst_db}.dr_groups \
	"id,username,domain,groupid,description" \
	${src_db}.dr_groups \
	"?id,?username,?domain,?groupid,?description"

migrate_table ${dst_db}.dr_carriers \
	"id,carrierid,gwlist,flags,attrs,description" \
	${src_db}.dr_carriers \
	"?id,?carrierid,?gwlist,?flags,?attrs,?description"

## GROUP module
migrate_table ${dst_db}.grp \
	"id,username,domain,grp,last_modified" \
	${src_db}.grp \
	"?id,?username,?domain,?grp,?last_modified" 

migrate_table ${dst_db}.re_grp \
	"id,reg_exp,group_id" \
	${src_db}.re_grp \
	"?id,?reg_exp,?group_id" 

## LOAD_BALANCER module
migrate_table ${dst_db}.load_balancer \
	"id,group_id,dst_uri,resources,probe_mode,description" \
	${src_db}.load_balancer \
	"?id,?group_id,?dst_uri,?resources,?probe_mode,?description" \

## MSILO module
migrate_table ${dst_db}.silo \
	"id,src_addr,dst_addr,username,domain,inc_time,exp_time,snd_time,ctype,body" \
	${src_db}.silo \
	"?id,?src_addr,?dst_addr,?username,?domain,?inc_time,?exp_time,?snd_time,?ctype,?body"

## PERMISSION module
migrate_table ${dst_db}.address \
	"id,grp,ip,mask,port,proto,pattern,context_info" \
	${src_db}.address \
	"?id,?grp,?ip,?mask,?port,?proto,?pattern,?context_info"

## REGISTRAR module
migrate_table ${dst_db}.aliases \
	 "id,username,domain,contact,received,path,expires,q,callid,cseq,last_modified,flags,cflags,user_agent,socket,methods,sip_instance,attr" \
 	 ${src_db}.aliases \
	 "?id,?username,?domain,?contact,?received,?path,?expires,?q,?callid,?cseq,?last_modified,?flags,?cflags,?user_agent,?socket,?methods,?sip_instance,?attr"

## RTPPROXY module
migrate_table ${dst_db}.rtpproxy_sockets \
	"id,rtpproxy_sock,set_id" \
	${src_db}.rtpproxy_sockets \
	"?id,?rtpproxy_sock,?set_id"

## SPEEDDIAL module
migrate_table ${dst_db}.speed_dial \
	"id,username,domain,sd_username,sd_domain,new_uri,fname,lname,description" \
	${src_db}.speed_dial \
	"?id,?username,?domain,?sd_username,?sd_domain,?new_uri,?fname,?lname,?description"

## URI_DB module
migrate_table ${dst_db}.uri \
	 "id,username,domain,uri_user,last_modified" \
	 ${src_db}.uri \
	 "?id,?username,?domain,?uri_user,?last_modified"


if [ "$HAS_EXTRA" = "yes" ] ; then

## CARRIERROUTE module
migrate_table ${dst_db}.carrierroute \
	"id,carrier,domain,scan_prefix,flags,mask,prob,strip,rewrite_host,rewrite_prefix,rewrite_suffix,description" \
	${src_db}.carrierroute \
	"?id,?carrier,?domain,?scan_prefix,?flags,?mask,?prob,?strip,?rewrite_host,?rewrite_prefix,?rewrite_suffix,?description"

migrate_table ${dst_db}.carrierfailureroute \
	"id,carrier,domain,scan_prefix,host_name,reply_code,flags,mask,next_domain,description" \
	${src_db}.carrierfailureroute \
	"?id,?carrier,?domain,?scan_prefix,?host_name,?reply_code,?flags,?mask,?next_domain,?description"

migrate_table ${dst_db}.route_tree \
	"id,carrier" \
	${src_db}.route_tree \
	"?id,?carrier"

## CALL_CENTER module
migrate_table ${dst_db}.cc_flows \
	"flowid,priority,skill,prependcid,message_welcome,message_queue" \
	${src_db}.cc_flows \
	"?flowid,?priority,?skill,?prependcid,?message_welcome,?message_queue" 

migrate_table ${dst_db}.cc_agents \
	"agentid,location,logstate,skills,last_call_end" \
	${src_db}.cc_agents \
	"?agentid,?location,?logstate,?skills,?last_call_end" 

migrate_table ${dst_db}.cc_cdrs \
	"caller,received_timestamp,wait_time,pickup_time,talk_time,flow_id,agent_id,call_type,rejected,fstats,cid" \
	${src_db}.cc_cdrs \
	"?caller,?received_timestamp,?wait_time,?pickup_time,?talk_time,?flow_id,?agent_id,?call_type,?rejected,?fstats,?cid" 

## CPL module
migrate_table ${dst_db}.cpl \
	"id,username,domain,cpl_xml,cpl_bin" \
	${src_db}.cpl \
	"?id,?username,?domain,?cpl_xml,?cpl_bin"

## DOMAINPOLICY module
migrate_table ${dst_db}.domainpolicy \
	"id,rule,type,att,val,description" \
	${src_db}.domainpolicy \
	"?id,?rule,?type,?att,?val,?description"

## IMC module
migrate_table ${dst_db}.imc_rooms \
	"id,name,domain,flag" \
	${src_db}.imc_rooms \
	"?id,?name,?domain,?flag"

migrate_table ${dst_db}.imc_members \
	"id,username,domain,room,flag" \
	${src_db}.imc_members \
	"?id,?username,?domain,?room,?flag"

## PRESENCE modules
# runtime data only, nothing to migrate

## REGISTRANT module
migrate_table ${dst_db}.registrant \
	"id,registrar,proxy,aor,third_party_registrant,username,password,binding_URI,binding_params,expiry,forced_socket" \
	${src_db}.registrant \
	"?id,?registrar,?proxy,?aor,?third_party_registrant,?username,?password,?binding_URI,?binding_params,?expiry,?forced_socket"

## SIPTRACE module
migrate_table ${dst_db}.sip_trace \
	"id,time_stamp,callid,trace_attrs,msg,method,status,from_proto,from_ip,from_port,to_proto,to_ip,to_port,fromtag,direction" \
	${src_db}.sip_trace \
	"?id,?time_stamp,?callid,?traced_user,?msg,?method,?status,?from_proto,?from_ip,?from_port,?to_proto,?to_ip,?to_port,?fromtag,?direction"

## USERBLACKLIST module
migrate_table ${dst_db}.userblacklist \
	"id,username,domain,prefix,whitelist" \
	${src_db}.userblacklist \
	"?id,?username,?domain,?prefix,?whitelist"

migrate_table ${dst_db}.globalblacklist \
	"id,prefix,whitelist,description" \
	${src_db}.globalblacklist \
	"?id,?prefix,?whitelist,?description"

fi


}  #end migrate_db()


export PW
if [ "$#" -ne 0 ] && [ "$PW" = "" ]; then
	prompt_pw
fi
