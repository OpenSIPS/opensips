#
# $Id$
#
# sc: opensips control; tool for maintaining opensips
#
#===================================================================

##### ----------------------------------------------- #####
### path to useful tools
locate_tool() {
	TOOLPATH=""
	while [ -n "$1" ]
	do
		if [ -x /usr/bin/which ] ; then
			TOOLPATH=`/usr/bin/which $1`
			if [ -n "$TOOLPATH" ]; then
				return
			fi
		fi
		# look in common locations
		if [ -x "/usr/bin/$1" ] ; then
			TOOLPATH="/usr/bin/$1"
			return
		fi
		if [ -x "/bin/$1" ] ; then
			TOOLPATH="/bin/$1"
			return
		fi
		if [ -x "/usr/local/bin/$1" ] ; then
			TOOLPATH="/usr/local/bin/$1"
			return
		fi
		# Additional locations of GNU tools in Solaris
		if [ -x "/usr/sfw/bin/$1" ] ; then
			TOOLPATH="/usr/sfw/bin/$1"
			return
		fi
		if [ -x "/opt/csw/bin/$1" ] ; then
			TOOLPATH="/opt/csw/bin/$1"
			return
		fi
		shift
	done
	return
}

if [ -z "$EGREP" ] ; then
	locate_tool egrep
	if [ -z "$TOOLPATH" ] ; then
		# now error, but we can look for alternative names if it is the case
		echo "error: 'egrep' tool not found: set EGREP variable to correct tool path"
		exit
	fi
	EGREP="$TOOLPATH"
fi
if [ -z "$AWK" ] ; then
	locate_tool awk
	if [ -z "$TOOLPATH" ] ; then
		# now error, but we can look for alternative names if it is the case
		echo "error: 'awk' tool not found: set AWK variable to correct tool path"
		exit
	fi
	AWK="$TOOLPATH"
fi
if [ -z "$GDB" ] ; then
	locate_tool gdb
	if [ -z "$TOOLPATH" ] ; then
		# no gdb
		GDB=""
	else
		GDB="$TOOLPATH"
	fi
fi
if [ -z "$MD5" ]; then
	locate_tool md5sum md5
	if [ -z "$TOOLPATH" ] ; then
		# now error, but we can look for alternative names if it is the case
		echo "error: 'md5sum' or 'md5' tool not found: set MD5 variable to correct tool path"
		exit
	fi
	MD5="$TOOLPATH"
fi
if [ -z "$LAST_LINE" ] ; then
	locate_tool tail
	if [ -z "$TOOLPATH" ] ; then
		# now error, but we can look for alternative names if it is the case
		echo "error: 'TAIL' tool not found: set TAIL variable to correct tool path"
		exit
	fi
	LAST_LINE="$TOOLPATH -1"
fi
if [ -z "$EXPR" ] ; then
	locate_tool expr
	if [ -z "$TOOLPATH" ] ; then
		# now error, but we can look for alternative names if it is the case
		echo "error: 'expr' tool not found: set EXPR variable to correct tool path"
		exit
	fi
	EXPR="$TOOLPATH"
fi

##### ------------------------------------------------ #####
### configuration for starting/stopping opensips
if [ -z "$PID_FILE" ] ; then
	PID_FILE=/var/run/opensips.pid
fi
if [ -z "$SYSLOG" ] ; then
	SYSLOG=1 # 0=output to console, 1=output to syslog
fi
if [ -z "$STARTOPTIONS" ] ; then
	STARTOPTIONS= # for example -dddd
fi
if [ -z "$DIR" ] ; then
	DIR=`dirname $0`
fi
if [ -z "$OSIPSBIN" ] ; then
	OSIPSBIN=$DIR/opensips
fi

##### ------------------------------------------------ #####
### aliases configuration
#
ENABLE_ALIASES=0
if [ "$ALIASES_TYPE" = "UL" ] ; then
	ENABLE_ALIASES=1
else
	if [ "$ALIASES_TYPE" = "DB" ] ; then
		ENABLE_ALIASES=2
	fi
fi

##### ------------------------------------------------ #####
### ACL name verification
if [ -z "$VERIFY_ACL" ] ; then
	VERIFY_ACL=1
fi
if [ -z "$ACL_GROUPS" ] ; then
	ACL_GROUPS="local ld int voicemail free-pstn"
fi

##### ----------------------------------------------- #####
#### Defined values
ALL_METHODS=4294967295
USERNAME_RE="[-a-zA-Z0-9&=\+\$,;\?/_\.\!~\*'\(\)]+"

##### ----------------------------------------------- #####
#### database tables for SQL databases and DBTEXT

# UsrLoc Table
if [ -z "$UL_TABLE" ] ; then
	UL_TABLE=location
fi
USER_COLUMN=username
DOMAIN_COLUMN=domain
CALLID_COLUMN=callid

# subscriber table
if [ -z "$SUB_TABLE" ] ; then
	SUB_TABLE=subscriber
fi
REALM_COLUMN=domain
HA1_COLUMN=ha1
HA1B_COLUMN=ha1b
PASSWORD_COLUMN=password
RPID_COLUMN=rpid
SUBSCRIBER_COLUMN='username'
PHP_LIB_COLUMN=phplib_id

if [ -z "$STORE_PLAINTEXT_PW" ] ; then
	STORE_PLAINTEXT_PW=1
fi

# acl table
if [ -z "$ACL_TABLE" ] ; then
	ACL_TABLE=grp
fi
ACL_USER_COLUMN=username
ACL_DOMAIN_COLUMN=domain
ACL_GROUP_COLUMN=grp
ACL_MODIFIED_COLUMN=last_modified

# aliases table
if [ -z "$ALS_TABLE" ] ; then
	ALS_TABLE=aliases
fi
A_USER_COLUMN=username
A_CONTACT_COLUMN=contact
A_EXPIRES_COLUMN=expires
A_Q_COLUMN=q
A_CALLID_COLUMN=callid
A_CSEQ_COLUMN=cseq
A_LAST_MODIFIED_COLUMN=last_modified

# domain table
if [ -z "$DOMAIN_TABLE" ] ; then
	DOMAIN_TABLE=domain
fi
DO_DOMAIN_COLUMN=domain
DO_LAST_MODIFIED_COLUMN=last_modified

# route_tree table
if [ -z "$ROUTE_TREE_TABLE" ] ; then
	ROUTE_TREE_TABLE=route_tree
fi
CARRIERROUTE_ROUTE_TREE_PREFIX_COLUMN=id
CARRIERROUTE_ROUTE_TREE_CARRIER_COLUMN=carrier

# carrierroute table
if [ -z "$CARRIERROUTE_TABLE" ] ; then
	CARRIERROUTE_TABLE=carrierroute
fi
CARRIERROUTE_CARRIERROUTE_PREFIX_COLUMN=id
CARRIERROUTE_CARRIERROUTE_CARRIER_COLUMN=carrier
CARRIERROUTE_CARRIERROUTE_SCAN_PREFIX_COLUMN=scan_prefix
CARRIERROUTE_CARRIERROUTE_DOMAIN_COLUMN=domain
CARRIERROUTE_CARRIERROUTE_PROB_COLUMN=prob
CARRIERROUTE_CARRIERROUTE_STRIP_COLUMN=strip
CARRIERROUTE_CARRIERROUTE_REWRITE_HOST_COLUMN=rewrite_host
CARRIERROUTE_CARRIERROUTE_REWRITE_PREFIX_COLUMN=rewrite_prefix
CARRIERROUTE_CARRIERROUTE_REWRITE_SUFFIX_COLUMN=rewrite_suffix
CARRIERROUTE_CARRIERROUTE_COMMENT_COLUMN=description
CARRIERROUTE_CARRIERROUTE_FLAGS_COLUMN=flags
CARRIERROUTE_CARRIERROUTE_MASK_COLUMN=mask

# URI table
if [ -z "$URI_TABLE" ] ; then
	URI_TABLE=uri
fi
URIUSER_COLUMN=uri_user
MODIFIED_COLUMN=last_modified

# dbaliases table
if [ -z "$DA_TABLE" ] ; then
	DA_TABLE=dbaliases
fi
DA_USER_COLUMN=username
DA_DOMAIN_COLUMN=domain
DA_ALIAS_USER_COLUMN=alias_username
DA_ALIAS_DOMAIN_COLUMN=alias_domain

# speeddial table
if [ -z "$SD_TABLE" ] ; then
	SD_TABLE=speed_dial
fi
SD_USER_COLUMN=username
SD_DOMAIN_COLUMN=domain
SD_SD_USER_COLUMN=sd_username
SD_SD_DOMAIN_COLUMN=sd_domain
SD_NEW_URI_COLUMN=new_uri
SD_DESC_COLUMN=description

# avp table
if [ -z "$AVP_TABLE" ] ; then
	AVP_TABLE=usr_preferences
fi

AVP_UUID_COLUMN=uuid
AVP_USER_COLUMN=username
AVP_DOMAIN_COLUMN=domain
AVP_ATTRIBUTE_COLUMN=attribute
AVP_VALUE_COLUMN=value
AVP_TYPE_COLUMN=type
AVP_MODIFIED_COLUMN=last_modified

# address table
if [ -z "$ADDRESS_TABLE" ] ; then
	ADDRESS_TABLE=address
fi

ADDRESS_GRP_COLUMN=grp
ADDRESS_IP_COLUMN=ip
ADDRESS_MASK_COLUMN=mask
ADDRESS_PORT_COLUMN=port
ADDRESS_PROTO_COLUMN=proto
ADDRESS_PATTERN_COLUMN=pattern
ADDRESS_CONTEXT_INFO_COLUMN=context_info

# dispatcher tables  
if [ -z "$DISPATCHER_TABLE" ] ; then
	DISPATCHER_TABLE=dispatcher
fi
DISPATCHER_ID_COLUMN=id
DISPATCHER_SETID_COLUMN=setid
DISPATCHER_DESTINATION_COLUMN=destination
DISPATCHER_SOCKET_COLUMN=socket
DISPATCHER_STATE_COLUMN=state
DISPATCHER_WEIGHT_COLUMN=weight
DISPATCHER_ATTRS_COLUMN=attrs
DISPATCHER_DESCRIPTION_COLUMN=description

# drouting tables
if [ -z "$DR_GATEWAYS_TABLE" ] ; then
	DR_GATEWAYS_TABLE=dr_gateways
fi
DR_GATEWAYS_ID_COLUMN=id
DR_GATEWAYS_GWID_COLUMN=gwid
DR_GATEWAYS_TYPE_COLUMN=type
DR_GATEWAYS_ADDRESS_COLUMN=address
DR_GATEWAYS_STRIP_COLUMN=strip
DR_GATEWAYS_PRI_PREFIX_COLUMN=pri_prefix
DR_GATEWAYS_ATTRS_COLUMN=attrs
DR_GATEWAYS_PROBE_MODE_COLUMN=probe_mode
DR_GATEWAYS_DESCRIPTION_COLUMN=description
if [ -z "$DR_GROUPS_TABLE" ] ; then
	DR_GROUPS_TABLE=dr_groups
fi
DR_GROUPS_ID_COLUMN=id
DR_GROUPS_USERNAME_COLUMN=username
DR_GROUPS_DOMAIN_COLUMN=domain
DR_GROUPS_GROUPID_COLUMN=groupid
DR_GROUPS_DESCRIPTION_COLUMN=description
if [ -z "$DR_CARRIERS_TABLE" ] ; then
	DR_CARRIERS_TABLE=dr_carriers
fi
DR_CARRIERS_ID_COLUMN=id
DR_CARRIERS_CARRIERID_COLUMN=carrierid
DR_CARRIERS_GWLIST_COLUMN=gwlist
DR_CARRIERS_FLAGS_COLUMN=flags
DR_CARRIERS_ATTRS_COLUMN=attrs
DR_CARRIERS_DESCRIPTION_COLUMN=description
if [ -z "$DR_RULES_TABLE" ] ; then
	DR_RULES_TABLE=dr_rules
fi
DR_RULES_RULEID_COLUMN=ruleid
DR_RULES_GROUPID_COLUMN=groupid
DR_RULES_PREFIX_COLUMN=prefix
DR_RULES_TIMEREC_COLUMN=timerec
DR_RULES_PRIORITY_COLUMN=priority
DR_RULES_ROUTEID_COLUMN=routeid
DR_RULES_GWLIST_COLUMN=gwlist
DR_RULES_ATTRS_COLUMN=attrs
DR_RULES_DESCRIPTION_COLUMN=description

# dialplan tables
if [ -z "$DIALPLAN_TABLE" ] ; then
	DIALPLAN_TABLE=dialplan
fi
DIALPLAN_ID_COLUMN=id
DIALPLAN_DPID_COLUMN=dpid
DIALPLAN_PR_COLUMN=pr
DIALPLAN_MATCH_OP_COLUMN=match_op
DIALPLAN_MATCH_EXP_COLUMN=match_exp
DIALPLAN_MATCH_FLAGS_COLUMN=match_flags
DIALPLAN_SUBST_EXP_COLUMN=subst_exp
DIALPLAN_REPL_EXP_COLUMN=repl_exp
DIALPLAN_ATTRS_COLUMN=attrs

#registrant tables
if [ -z "$REGISTRANT_TABLE" ] ; then
	REGISTRANT_TABLE=registrant
fi
REGISTRANT_ID_COLUMN=id
REGISTRANT_REGISTRAR_COLUMN=registrar
REGISTRANT_PROXY_COLUMN=proxy
REGISTRANT_AOR_COLUMN=aor
REGISTRANT_THIRD_PARTY_REGISTRANT_COLUMN=third_party_registrant
REGISTRANT_USERNAME_COLUMN=username
REGISTRANT_PASSWORD_COLUMN=password
REGISTRANT_BINDING_URI_COLUMN=binding_URI
REGISTRANT_BINDING_PARAMS_COLUMN=binding_params
REGISTRANT_EXPIRY_COLUMN=expiry
REGISTRANT_FORCED_SOCKET_COLUMN=forced_socket

#
##### ------------------------------------------------ #####
### usage functions
#

usage_base() {
	echo
	mecho " -- command 'start|stop|restart|trap'"
	echo
cat <<EOF
 trap ............................... trap with gdb OpenSIPS processes
 restart ............................ restart OpenSIPS
 start .............................. start OpenSIPS
 stop ............................... stop OpenSIPS
EOF
}

usage_tls() {
	echo
	mecho " -- command 'tls'"
	echo
cat <<EOF
 tls rootCA [<etcdir>] .......... creates new rootCA
 tls userCERT <user> [<etcdir>] ... creates user certificate
 default <etcdir> is $ETCDIR/tls
EOF
}

USAGE_FUNCTIONS="$USAGE_FUNCTIONS usage_base"

usage_acl() {
	echo
	mecho " -- command 'acl' - manage access control lists (acl)"
	echo
cat <<EOF
 acl show [<username>] .............. show user membership
 acl grant <username> <group> ....... grant user membership (*)
 acl revoke <username> [<group>] .... grant user membership(s) (*)
EOF
}
USAGE_FUNCTIONS="$USAGE_FUNCTIONS usage_acl"

usage_cr() {
	echo
	mecho " -- command 'cr' - manage carrierroute tables"
	echo
cat <<EOF
 cr show ....................................................... show tables
 cr reload ..................................................... reload tables
 cr dump ....................................................... show in memory tables
 cr addrt <routing_tree_id> <routing_tree> ..................... add a tree
 cr rmrt  <routing_tree> ....................................... rm a tree
 cr addcarrier <carrier> <scan_prefix> <domain> <rewrite_host> ................
               <prob> <strip> <rewrite_prefix> <rewrite_suffix> ...............
               <flags> <mask> <comment> .........................add a carrier
               (prob, strip, rewrite_prefix, rewrite_suffix,...................
                flags, mask and comment are optional arguments) ...............
 cr rmcarrier  <carrier> <scan_prefix> <domain> ................ rm a carrier
EOF
}
USAGE_FUNCTIONS="$USAGE_FUNCTIONS usage_cr"

usage_rpid() {
	echo
	mecho " -- command 'rpid' - manage Remote-Party-ID (RPID)"
	echo
cat <<EOF
 rpid add <username> <rpid> ......... add rpid for a user (*)
 rpid rm <username> ................. set rpid to NULL for a user (*)
 rpid show <username> ............... show rpid of a user
EOF
}
USAGE_FUNCTIONS="$USAGE_FUNCTIONS usage_rpid"

usage_subscriber() {
	echo
	mecho " -- command 'add|passwd|rm' - manage subscribers"
	echo
cat <<EOF
 add <username> <password> .......... add a new subscriber (*)
 passwd <username> <passwd> ......... change user's password (*)
 rm <username> ...................... delete a user (*)
EOF
}
USAGE_FUNCTIONS="$USAGE_FUNCTIONS usage_subscriber"

usage_address() {
	echo
	mecho " -- command 'add|dump|reload|rm|show' - manage address"
	echo
cat <<EOF
 address show ...................... show db content
 address dump ...................... show cache content
 address reload .................... reload db table into cache
 address add <grp> <ip> <mask> <port> <proto> [<context_info>] [<pattern>]
             ....................... add a new entry
	     ....................... (from_pattern and tag are optional arguments)
 address rm <grp> <ip> <mask> <port> ............... remove all entries 
	     ....................... for the given grp ip mask port
EOF
}
USAGE_FUNCTIONS="$USAGE_FUNCTIONS usage_address"

usage_dr() {
	echo
	mecho " -- command 'dr' - manage dynamic routing"
	echo
cat <<EOF
   * Examples: dr addgw '1' 10 '192.168.2.2' 0 '' 'GW001' 0 'first_gw'
   *           dr addgw '2' 20 '192.168.2.3' 0 '' 'GW002' 0 'second_gw'
   *           dr rmgw 2
   *           dr addgrp 'alice' 'example.com' 10 'first group'
   *           dr rmgrp 1
   *           dr addcr 'cr_1' '10' 0 'CARRIER_1' 'first_carrier'
   *           dr rmcr 1
   *           dr addrule '10,20' '+1' '20040101T083000' 0 0 '1,2' 'NA_RULE' 'NA routing'
   *           dr rmgrule 1
 dr show ............................ show dr tables
 dr addgw <gwid> <type> <address> <strip> <pri_prefix>
          <attrs> <probe_mode> <description>
    ................................. add gateway
 dr rmgw <id> ....................... delete gateway
 dr addgrp <username> <domain> <groupid> <description>
    ................................. add gateway group
 dr rmgrp <id> ...................... delete gateway group
 dr addcr <carrierid> <gwlist> <flags> <attrs> <description>
          ........................... add carrier
 dr rmcr <id> ....................... delete carrier
 dr addrule <groupid> <prefix> <timerec> <priority> <routeid>
            <gwlist> <attrs> <description>
    ................................. add rule
 dr rmrule <ruleid> ................. delete rule
 dr reload .......................... reload dr tables
 dr gw_status ....................... show gateway status
 dr carrier_status .................. show carrier status
EOF
}
USAGE_FUNCTIONS="$USAGE_FUNCTIONS usage_dr"

usage_dispatcher() {
	echo
	mecho " -- command 'dispatcher' - manage dispatcher"
	echo
cat <<EOF
   * Examples:  dispatcher addgw 1 sip:1.2.3.1:5050 '' 0 50 'og1' 'Outbound Gateway1'
   *            dispatcher addgw 2 sip:1.2.3.4:5050 '' 0 50 'og2' 'Outbound Gateway2'
   *            dispatcher rmgw 4
 dispatcher show ..................... show dispatcher gateways
 dispatcher reload ................... reload dispatcher gateways
 dispatcher dump ..................... show in memory dispatcher gateways
 dispatcher addgw <setid> <destination> <socket> <state> <weight> <attrs> [description]
            .......................... add gateway
 dispatcher rmgw <id> ................ delete gateway
EOF
}
USAGE_FUNCTIONS="$USAGE_FUNCTIONS usage_dispatcher"

usage_dialplan() {
	echo
	mecho " -- command 'dialplan' - manage dialplans"
	echo
cat <<EOF
 dialplan show <dpid> .............. show dialplan tables
 dialplan reload ................... reload dialplan tables
 dialplan addrule <dpid> <prio> <match_op> <match_exp>
 		<match_flags> <subst_exp> <repl_exp> <attrs>
		.................... add a rule
 dialplan rm ....................... removes the entire dialplan table
 dialplan rmdpid <dpid> ............ removes all the gived dpid entries
 dialplan rmrule <dpid> <prio> ..... removes all the gived dpid/prio entries
EOF
}

usage_registrant() {
	echo
	mecho " -- command 'registrant' - manage registrants"
	echo
cat <<EOF
   * Examples:  registrant add sip:opensips.org '' sip:user@opensips.org '' user password sip:user@localhost '' 3600 ''
 registrant show ......................... show registrant table
 registrant dump ......................... show registrant status
 registrant add <registrar> <proxy> <aor> <third_party_registrant>
                <username> <password> <binding_URI> <binding_params>
                <expiry> <forced_socket> . add a registrant
 registrant rm ........................... removes the entire registrant table
 registrant rmaor <id> ................... removes the gived aor id
EOF
}
USAGE_FUNCTIONS="$USAGE_FUNCTIONS usage_registrant"

##### ----------------------------------------------- #####
#### Common functions


mdbg() {
	if [ "0$VERBOSE" -ne 0 ] ; then
		if [ -t 1 -a -z "$NOHLPRINT" ] ; then
			echo -e "\033[1m$1\033[0m"
		else
			echo "$1"
		fi
	fi
}

mwarn() {
	if [ -t 1 -a -z "$NOHLPRINT" ] ; then
		echo -e '\E[37;32m'"\033[1mWARNING: $1\033[0m"
	else
		echo "** WARNING: $1"
	fi
}

minfo() {
	if [ -t 1 -a -z "$NOHLPRINT" ] ; then
		echo -e '\E[37;33m'"\033[1mINFO: $1\033[0m"
	else
		echo "** INFO: $1"
	fi
}

mecho() {
	if [ -t 1 -a -z "$NOHLPRINT" ] ; then
		echo -e "\033[1m$1\033[0m"
	else
		echo "$1"
	fi
}

merr() {
	if [ -t 1 -a -z "$NOHLPRINT" ] ; then
		echo -e '\E[37;31m'"\033[1mERROR: $1\033[0m"
	else
		echo "** ERROR: $1"
	fi
}


# determine host name, typically for use in printing UAC
# messages; we use today a simplistic but portable uname -n way --
# no domain name is displayed ; fifo_uac expands !! to host
# address only for optional header fields; uname output without
# domain is sufficient for informational header fields such as
# From
#
get_my_host() {
	if [ -z "$SIP_DOMAIN" ]; then
		uname -n
	else
		echo "$SIP_DOMAIN"
	fi
}

# calculate name and domain of current user
set_user() {

	OSIPSUSER=`echo $1|$AWK -F@ '{print $1}'`
	OSIPSDOMAIN=`echo $1|$AWK -F@ '{print $2}'`

	if [ -z "$OSIPSDOMAIN" ] ; then
		OSIPSDOMAIN="$SIP_DOMAIN"
	fi

	if [ -z "$OSIPSDOMAIN" ] ; then
		merr "domain unknown: use usernames with domain or set default domain \
in SIP_DOMAIN"
		exit 1
	fi
}

# check the parameter if it is a valid address of record (user@domain)
check_aor() {
	echo "$1" | $EGREP "^$USERNAME_RE@.*\..*" >/dev/null
	if [ $? -ne 0 ] ; then 
		echo "error: invalid AoR: $1" > /dev/stderr
		exit 1
	fi
}

# check the parameter if it is a valid address of record (user@domain)
is_aor() {
	echo "$1" | $EGREP "^$USERNAME_RE@.*\..*" >/dev/null
	if [ $? -ne 0 ] ; then 
		false
	else
		true
	fi
}

# check the parameter if it is a valid SIP address of record (sip:user@domain)
check_sipaor() {
	echo "$1" | $EGREP "^sip(s)?:$USERNAME_RE@.*\..*" >/dev/null
	if [ $? -ne 0 ] ; then 
		echo "error: invalid SIP AoR: $1" > /dev/stderr
		exit 1
	fi
}

# check the parameter if it is a valid SIP URI
# quite simplified now -- it captures just very basic
# errors
check_uri() {
	echo "$1" | $EGREP "^sip(s)?:($USERNAME_RE@)?.*\..*"  > /dev/null
	if [ $? -ne 0 ] ; then 
		echo "error: invalid SIP URI: $1" > /dev/stderr
		exit 1
	fi
}

print_status() {
	echo $1 | $EGREP "^[1-6][0-9][0-9]" > /dev/null
	if [ "$?" -eq 0 ] ; then 
		echo $1
	else
		echo "200 OK"
	fi
}

# process output from FIFO/Unixsock server; if everything is ok
# skip the first "ok" line and proceed to returned 
# parameters
filter_fl()
{
#	tail +2
	
	$AWK 'BEGIN {line=0;IGNORECASE=1;}
		{line++}
		NR == 1 && /^200 OK/ { next }
		/^$/ { next }
		{ print }'
}

# params: user, realm, password
# output: HA1
_gen_ha1()
{
	HA1=`echo -n "$1:$2:$3" | $MD5 | $AWK '{ print $1 }'`
	if [ $? -ne 0 ] ; then
		echo "HA1 calculation failed"
		exit 1
	fi
}

# params: user, realm, password
# output: HA1B
_gen_ha1b()
{
	HA1B=`echo -n "$1@$2:$2:$3" | $MD5 | $AWK '{ print $1 }'`
	if [ $? -ne 0 ] ; then
		echo "HA1B calculation failed"
		exit 1
	fi
}

# params: user, realm, password
# output: PHPLIB_ID
_gen_phplib_id()
{
	NOW=`date`;
	PHPLIB_ID=`echo -n "$1$2:$3:$NOW" | $MD5 | $AWK '{ print $1 }'`
}

# params: user, password
# output: HA1, HA1B
credentials()
{
	set_user $1
	_gen_ha1 "$OSIPSUSER" "$OSIPSDOMAIN" "$2"
	_gen_ha1b "$OSIPSUSER" "$OSIPSDOMAIN" "$2"
}
