listen = udp:lo

log_level = 4
memdump = 2

log_stderror = yes
enable_asserts = true

####### Modules Section ########

mpath = "modules/"

loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

loadmodule "proto_udp.so"
loadmodule "json.so"

loadmodule "cfgutils.so"
modparam("cfgutils", "shvset", "shv_int_zero=i:0")
modparam("cfgutils", "shvset", "shv_int_pos=i:42")
modparam("cfgutils", "shvset", "shv_int_neg=i:-1")
modparam("cfgutils", "shvset", "shv_str_empty=s:")
modparam("cfgutils", "shvset", "shv_str=s:test")

loadmodule "sipmsgops.so"

route [SDP_TEST_1] {
	xlog(">>>>>>>> T1 <<<<<<<<<\n");

	$var(sdp) =
"v=0\r
o=Sonus_UAC 14892 145022 IN IP4 1.2.3.4\r
s=SIP Media Capabilities\r
c=IN IP4 1.2.3.4\r
t=0 0\r
m=audio 46938 RTP/AVP 0 8 18 101\r
a=rtpmap:0 PCMU/8000\r
a=rtpmap:8 PCMA/8000\r
a=rtpmap:18 G729/8000\r
a=fmtp:18 annexb=no\r
a=rtpmap:101 telephone-event/8000\r
a=fmtp:101 0-15\r
a=sendrecv\r
a=maxptime:20\r
"
;
	assert($rb(application/sdp) == NULL, "sdp-test-1.1.0");

	xlog("------ 1.1 before set -------\n");
	$sdp = $var(sdp);
	xlog("------ 1.1 after set ------\n");
	assert($rb(application/sdp) == $var(sdp), "sdp-test-1.1.1");
	assert($rb(application/sdp) == $sdp, "sdp-test-1.1.2");

	xlog("------ 1.2 before NULL -------\n");
	$sdp = NULL;
	xlog("------ 1.2 after NULL -------\n");
	assert($rb(application/sdp) == NULL, "sdp-test-1.2.1");
	assert($rb(application/sdp) == $sdp, "sdp-test-1.2.2");

	xlog("------ 1.3 before set -------\n");
	$sdp = $var(sdp);
	xlog("------ 1.3 before set -------\n");
	assert($rb(application/sdp) == $var(sdp), "sdp-test-1.3.1");
	assert($rb(application/sdp) == $sdp, "sdp-test-1.3.2");

	xlog("------ 1.4 before set -------\n");
	$sdp = NULL;
	xlog("------ 1.4 after set -------\n");
	assert($rb(application/sdp) == NULL, "sdp-test-1.4.1");
	assert($rb(application/sdp) == $sdp, "sdp-test-1.4.2");

	xlog("------ 1.5 before set -------\n");
	$sdp = $var(sdp);
	xlog("------ 1.5 before set -------\n");
	assert($rb(application/sdp) == $var(sdp), "sdp-test-1.5.1");
	assert($rb(application/sdp) == $sdp, "sdp-test-1.5.2");

	xlog("------ 1.6 before set -------\n");
	$sdp = NULL;
	xlog("------ 1.6 before set -------\n");
	assert($rb(application/sdp) == NULL, "sdp-test-1.6.1");
	assert($rb(application/sdp) == $sdp, "sdp-test-1.6.2");

	#assert($sdp(@rpl) == NULL, "sdp-test-1.4");
	#$sdp(@rpl) = $var(sdp);
	#assert($sdp(@rpl) == $var(sdp), "sdp-test-1.5");
}

route [SDP_TEST_2] {
	xlog(">>>>>>>> T2 <<<<<<<<<\n");

	$var(sdp) =
"v=0\r
o=Sonus_UAC 14892 145022 IN IP4 1.2.3.4\r
s=SIP Media Capabilities\r
c=IN IP4 1.2.3.4\r
t=0 0\r
m=audio 46938 RTP/AVP 0 8 18 101\r
a=rtpmap:0 PCMU/8000 bitrate=7000 bitrate=4000\r
a=rtpmap:8 PCMA/8000\r
a=rtpmap:18 G729/8000\r
a=fmtp:18 annexb=no\r
a=rtpmap:101 telephone-event/8000\r
a=fmtp:101 0-15\r
a=sendrecv\r
a=maxptime:20\r
"
;
	#assert($rb(application/bitrate[1]) == NULL, "sdp-test-1.0");
	assert($rb(application/sdp) == $sdp, "sdp-test-1.2.0");

	xlog("------ 2.0 before set -------\n");
	$sdp = $var(sdp);
	xlog("------ 2.0 after set -------\n");

	xlog("------ 2.1 before read -------\n");
	assert($sdp.line([0])  == "v=0", "sdp-test-2.1.0");
	assert($sdp.line([1])  == "o=Sonus_UAC 14892 145022 IN IP4 1.2.3.4", "sdp-test-2.1.1");
	assert($sdp.line([2])  == "s=SIP Media Capabilities", "sdp-test-2.1.2");
	assert($sdp.line([3])  == "c=IN IP4 1.2.3.4", "sdp-test-2.1.3");
	assert($sdp.line([4])  == "t=0 0", "sdp-test-2.1.4");
	assert($sdp.line([5])  == "m=audio 46938 RTP/AVP 0 8 18 101", "sdp-test-2.1.5");
	assert($sdp.line([6])  == "a=rtpmap:0 PCMU/8000 bitrate=7000 bitrate=4000", "sdp-test-2.1.6");
	assert($sdp.line([7])  == "a=rtpmap:8 PCMA/8000", "sdp-test-2.1.7");
	assert($sdp.line([8])  == "a=rtpmap:18 G729/8000", "sdp-test-2.1.8");
	assert($sdp.line([9])  == "a=fmtp:18 annexb=no", "sdp-test-2.1.9");
	assert($sdp.line([10]) == "a=rtpmap:101 telephone-event/8000", "sdp-test-2.1.10");
	assert($sdp.line([11]) == "a=fmtp:101 0-15", "sdp-test-2.1.11");
	assert($sdp.line([12]) == "a=sendrecv", "sdp-test-2.1.12");
	assert($sdp.line([13]) == "a=maxptime:20", "sdp-test-2.1.13");
	assert($sdp.line([14]) == NULL, "sdp-test-2.1.14");
	xlog("------ 2.1 after read -------\n");

	xlog("------ 2.2.0 before read -------\n");
	assert($sdp.line(a=rtpmap/PCMU)  == "PCMU/8000", "sdp-test-2.2.0");
	xlog("------ 2.2.0 after read -------\n");

	xlog("------ 2.2.1 before reads -------\n");
	assert($sdp.line(a=rtpmap[0])  == "a=rtpmap:0 PCMU/8000 bitrate=7000 bitrate=4000", "sdp-test-2.2.1");
	assert($sdp.line(a=rtpmap[1])  == "a=rtpmap:8 PCMA/8000", "sdp-test-2.2.2");
	assert($sdp.line(a=rtpmap[2])  == "a=rtpmap:18 G729/8000", "sdp-test-2.2.3");
	assert($sdp.line(a=rtpmap[3])  == "a=rtpmap:101 telephone-event/8000", "sdp-test-2.2.4");
	assert($sdp.line(a=rtpmap[4])  == NULL, "sdp-test-2.2.5");
	xlog("------ 2.2.1 after reads -------\n");

	xlog("------ 2.2.6 before reads -------\n");
	assert($sdp.line(a=[3])  == "a=fmtp:18 annexb=no", "sdp-test-2.2.6");
	assert($sdp.line(a=[30])  == NULL, "sdp-test-2.2.7");
	xlog("------ 2.2.6 after reads -------\n");

	xlog("------ 2.2.8 before reads -------\n");
    assert($sdp.line(a=[3]/annexb)  == "annexb=no", "sdp-test-2.2.8");
    assert($sdp.line(a=[3]/annexb[0])  == "annexb=no", "sdp-test-2.2.9");
    assert($sdp.line(a=[3]/annexb )  == NULL, "sdp-test-2.2.10");
    assert($sdp.line(a=[3]/annexb [0])  == NULL, "sdp-test-2.2.11");
    assert($sdp.line(a=[3]/annexb[1])  == NULL, "sdp-test-2.2.12");
    assert($sdp.line(a=[3]/annexb[2])  == NULL, "sdp-test-2.2.13");
	xlog("------ 2.2.8 after reads -------\n");

	# WRITE tests !!!
	xlog("------ 2.3.0 before write -------\n");
	$sdp.line([3]) = "c=IN IP4 1.2.3.10";
	assert($sdp.line([3])  == "c=IN IP4 1.2.3.10", "sdp-test-2.3.0");
	xlog("------ 2.3.0 after read -------\n");


	xlog("------ 2.3.1 before write -------\n");
	$sdp.line([12]) = "a=nortpproxy:yes";
	assert($sdp.line([10])  == "a=rtpmap:101 telephone-event/8000", "sdp-test-2.3.1");
	assert($sdp.line([11])  == "a=fmtp:101 0-15", "sdp-test-2.3.2");
	assert($sdp.line([12])  == "a=nortpproxy:yes", "sdp-test-2.3.3");
	assert($sdp.line([13])  == "a=maxptime:20", "sdp-test-2.3.4");
	xlog("------ 2.3.1 after reads -------\n");

	xlog("------ 2.3.5 before write -------\n");
	$(sdp.line([12])[insert]) = "a=sendrecv";
	xlog("------ 2.3.5.1 -------\n");
	assert($sdp.line([10])  == "a=rtpmap:101 telephone-event/8000", "sdp-test-2.3.5");
	assert($sdp.line([11])  == "a=fmtp:101 0-15", "sdp-test-2.3.6");
	assert($sdp.line([12])  == "a=sendrecv", "sdp-test-2.3.7");
	assert($sdp.line([13])  == "a=nortpproxy:yes", "sdp-test-2.3.8");
	assert($sdp.line([14])  == "a=maxptime:20", "sdp-test-2.3.9");
	xlog("------ 2.3.5 after reads -------\n");


	xlog("------ 2.4.0 before write -------\n");
	$(sdp.line([12])[insertAfter]) = "a=ptime:80";
	xlog("------ 2.4.0.1 -------\n");
	assert($sdp.line([10])  == "a=rtpmap:101 telephone-event/8000", "sdp-test-2.4.0");
	assert($sdp.line([11])  == "a=fmtp:101 0-15", "sdp-test-2.4.1");
	assert($sdp.line([12])  == "a=sendrecv", "sdp-test-2.4.2");
	assert($sdp.line([13])  == "a=ptime:80", "sdp-test-2.4.3");
	assert($sdp.line([14])  == "a=nortpproxy:yes", "sdp-test-2.4.4");
	assert($sdp.line([15])  == "a=maxptime:20", "sdp-test-2.4.5");
	xlog("------ 2.4.0 after reads -------\n");


	xlog("------ 2.5.0 before write -------\n");
	$sdp.line([13]) = NULL;
	xlog("------ 2.5.0.1 -------\n");
	assert($sdp.line([12])  == "a=sendrecv", "sdp-test-2.5.0");
	assert($sdp.line([13])  == "a=nortpproxy:yes", "sdp-test-2.5.1");
	assert($sdp.line([14])  == "a=maxptime:20", "sdp-test-2.5.2");
	assert($sdp.line([15])  == NULL, "sdp-test-2.5.3");
	xlog("------ 2.5.0 after reads -------\n");

	$sdp.line([15]) = NULL;

	# SDP re-assemble test !

	$var(sdp_verify) =
"v=0\r
o=Sonus_UAC 14892 145022 IN IP4 1.2.3.4\r
s=SIP Media Capabilities\r
c=IN IP4 1.2.3.10\r
t=0 0\r
m=audio 46938 RTP/AVP 0 8 18 101\r
a=rtpmap:0 PCMU/8000 bitrate=7000 bitrate=4000\r
a=rtpmap:8 PCMA/8000\r
a=rtpmap:18 G729/8000\r
a=fmtp:18 annexb=no\r
a=rtpmap:101 telephone-event/8000\r
a=fmtp:101 0-15\r
a=sendrecv\r
a=nortpproxy:yes\r
a=maxptime:20\r
"
;

	xlog("------ 2.6.0 before rebuild -------\n");
	xlog("$sdp\n");
	xlog("------ 2.6.0.1 before rebuild -------\n");
	assert($sdp == $var(sdp_verify), "sdp-test-2.6.0");
	xlog("------ 2.6.0 after verify -------\n");
}

startup_route {
	route(SDP_TEST_1);
	route(SDP_TEST_2);

	xlog("XXX ================================================ XXX\n");
	xlog("XXX ========   Passed All Tests! ᕦ(ò_óˇ)ᕤ   ======== XXX\n");
	xlog("XXX ================================================ XXX\n");
}


route {
	exit;
}
