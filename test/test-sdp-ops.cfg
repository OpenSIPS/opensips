listen = udp:lo

log_level = 4
memdump = 2

log_stderror = yes
enable_asserts = true

####### Modules Section ########

mpath = "modules/"

loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

loadmodule "proto_udp.so"
loadmodule "json.so"

loadmodule "cfgutils.so"
modparam("cfgutils", "shvset", "shv_int_zero=i:0")
modparam("cfgutils", "shvset", "shv_int_pos=i:42")
modparam("cfgutils", "shvset", "shv_int_neg=i:-1")
modparam("cfgutils", "shvset", "shv_str_empty=s:")
modparam("cfgutils", "shvset", "shv_str=s:test")

loadmodule "sipmsgops.so"

route [SDP_TEST_SDP] {
	xlog(">>>>>>>> T1 <<<<<<<<<\n");

	$var(sdp) =
"v=0\r
o=Sonus_UAC 14892 145022 IN IP4 1.2.3.4\r
s=SIP Media Capabilities\r
c=IN IP4 1.2.3.4\r
t=0 0\r
m=audio 46938 RTP/AVP 0 8 18 101\r
a=rtpmap:0 PCMU/8000\r
a=rtpmap:8 PCMA/8000\r
a=rtpmap:18 G729/8000\r
a=fmtp:18 annexb=no\r
a=rtpmap:101 telephone-event/8000\r
a=fmtp:101 0-15\r
a=sendrecv\r
a=maxptime:20\r
"
;
	assert($rb(application/sdp) == NULL);

	xlog("------ 1.1 before set -------\n");
	$sdp = $var(sdp);
	xlog("------ 1.1 after set ------\n");
	assert($rb(application/sdp) == $var(sdp));
	assert($rb(application/sdp) == $sdp);

	xlog("------ 1.2 before NULL -------\n");
	$sdp = NULL;
	xlog("------ 1.2 after NULL -------\n");
	assert($rb(application/sdp) == NULL);
	assert($rb(application/sdp) == $sdp);

	xlog("------ 1.3 before set -------\n");
	$sdp = $var(sdp);
	xlog("------ 1.3 before set -------\n");
	assert($rb(application/sdp) == $var(sdp));
	assert($rb(application/sdp) == $sdp);

	xlog("------ 1.4 before set -------\n");
	$sdp = NULL;
	xlog("------ 1.4 after set -------\n");
	assert($rb(application/sdp) == NULL);
	assert($rb(application/sdp) == $sdp);

	xlog("------ 1.5 before set -------\n");
	$sdp = $var(sdp);
	xlog("------ 1.5 before set -------\n");
	assert($rb(application/sdp) == $var(sdp));
	assert($rb(application/sdp) == $sdp);

	xlog("------ 1.6 before set -------\n");
	$sdp = NULL;
	xlog("------ 1.6 before set -------\n");
	assert($rb(application/sdp) == NULL);
	assert($rb(application/sdp) == $sdp);

	#assert($sdp(@rpl) == NULL);
	#$sdp(@rpl) = $var(sdp);
	#assert($sdp(@rpl) == $var(sdp));
}

route [SDP_TEST_LINE] {
	xlog(">>>>>>>> T2 <<<<<<<<<\n");

	$var(sdp) =
"v=0\r
o=Sonus_UAC 14892 145022 IN IP4 1.2.3.4\r
s=SIP Media Capabilities\r
c=IN IP4 1.2.3.4\r
t=0 0\r
m=audio 46938 RTP/AVP 0 8 18 101\r
a=rtpmap:0 PCMU/8000 bitrate=7000 bitrate=4000\r
a=rtpmap:8 PCMA/8000\r
a=rtpmap:18 G729/8000\r
a=fmtp:18 annexb=no\r
a=rtpmap:101 telephone-event/8000\r
a=fmtp:101 0-15\r
a=sendrecv\r
a=maxptime:20\r
"
;
	#assert($rb(application/bitrate[1]) == NULL);
	assert($rb(application/sdp) == $sdp);

	xlog("------ 2.0 before set -------\n");
	$sdp = $var(sdp);
	xlog("------ 2.0 after set -------\n");

	$var(i) = 0;
	xlog("------ 2.1 before read -------\n");
	assert($sdp.line([0])  == "v=0");
	assert($sdp.line([1])  == "o=Sonus_UAC 14892 145022 IN IP4 1.2.3.4");
	assert($sdp.line([2])  == "s=SIP Media Capabilities");
	assert($sdp.line([3])  == "c=IN IP4 1.2.3.4");
	assert($sdp.line([4])  == "t=0 0");
	assert($sdp.line([5])  == "m=audio 46938 RTP/AVP 0 8 18 101");
	assert($sdp.line([6])  == "a=rtpmap:0 PCMU/8000 bitrate=7000 bitrate=4000");
	assert($sdp.line([7])  == "a=rtpmap:8 PCMA/8000");
	assert($sdp.line([8])  == "a=rtpmap:18 G729/8000");
	assert($sdp.line([9])  == "a=fmtp:18 annexb=no");
	assert($sdp.line([10]) == "a=rtpmap:101 telephone-event/8000");
	assert($sdp.line([11]) == "a=fmtp:101 0-15");
	assert($sdp.line([12]) == "a=sendrecv");
	assert($sdp.line([13]) == "a=maxptime:20");
	assert($sdp.line([14]) == NULL);
	xlog("------ 2.1 after read -------\n");
	assert($sdp.line([0])  == $sdp.line([$var(i)])); $var(i) += 1;
	assert($sdp.line([1])  == $sdp.line([$var(i)])); $var(i) += 1;
	assert($sdp.line([2])  == $sdp.line([$var(i)])); $var(i) += 1;
	assert($sdp.line([3])  == $sdp.line([$var(i)])); $var(i) += 1;
	assert($sdp.line([4])  == $sdp.line([$var(i)])); $var(i) += 1;
	assert($sdp.line([5])  == $sdp.line([$var(i)])); $var(i) += 1;
	assert($sdp.line([6])  == $sdp.line([$var(i)])); $var(i) += 1;
	assert($sdp.line([7])  == $sdp.line([$var(i)])); $var(i) += 1;
	assert($sdp.line([8])  == $sdp.line([$var(i)])); $var(i) += 1;
	assert($sdp.line([9])  == $sdp.line([$var(i)])); $var(i) += 1;
	assert($sdp.line([10]) == $sdp.line([$var(i)])); $var(i) += 1;
	assert($sdp.line([11]) == $sdp.line([$var(i)])); $var(i) += 1;
	assert($sdp.line([12]) == $sdp.line([$var(i)])); $var(i) += 1;
	assert($sdp.line([13]) == $sdp.line([$var(i)])); $var(i) += 1;
	assert($sdp.line([14]) == $sdp.line([$var(i)]));
	xlog("------ 2.1 after PV index tests -------\n");

	xlog("------ 2.2.0 before read -------\n");
	assert($sdp.line(a=rtpmap/PCMU)  == "PCMU/8000");
	xlog("------ 2.2.0 after read -------\n");

	xlog("------ 2.2.1 before reads -------\n");
	$var(i) = 2;
	assert($sdp.line(a=rtpmap[0])  == "a=rtpmap:0 PCMU/8000 bitrate=7000 bitrate=4000");
	assert($sdp.line(a=rtpmap[1])  == "a=rtpmap:8 PCMA/8000");
	assert($sdp.line(a=rtpmap[2])  == "a=rtpmap:18 G729/8000");
	assert($sdp.line(a=rtpmap[$var(i)])
	                               == "a=rtpmap:18 G729/8000", "sdp-test-2.2.4");
	assert($sdp.line(a=rtpmap[3])  == "a=rtpmap:101 telephone-event/8000");
	assert($sdp.line(a=rtpmap[4])  == NULL);
	xlog("------ 2.2.1 after reads -------\n");

	xlog("------ 2.2.6 before reads -------\n");
	assert($sdp.line(a=[3]) == "a=fmtp:18 annexb=no");
	assert($sdp.line(a=[30]) == NULL);
	xlog("------ 2.2.6 after reads -------\n");

	xlog("------ 2.2.8 before reads -------\n");
	$var(i) = 0;
    assert($sdp.line(a=[3]/annexb)  == "annexb=no");
    assert($sdp.line(a=[3]/annexb[0])  == "annexb=no");
    assert($sdp.line(a=[3]/annexb[$var(i)])  == "annexb=no"); $var(i) += 1;
    assert($sdp.line(a=[3]/annexb )  == NULL);
    assert($sdp.line(a=[3]/annexb [0])  == NULL);
    assert($sdp.line(a=[3]/annexb[1])  == NULL);
    assert($sdp.line(a=[3]/annexb[$var(i)])  == NULL);
    assert($sdp.line(a=[3]/annexb[2])  == NULL);
	xlog("------ 2.2.8 after reads -------\n");

	# WRITE tests !!!
	xlog("------ 2.3.0 before write -------\n");
	$sdp.line([3]) = "c=IN IP4 1.2.3.10";
	assert($sdp.line([3])  == "c=IN IP4 1.2.3.10");
	xlog("------ 2.3.0 after read -------\n");


	xlog("------ 2.3.1 before write -------\n");
	$sdp.line([12]) = "a=nortpproxy:yes";
	assert($sdp.line([10])  == "a=rtpmap:101 telephone-event/8000");
	assert($sdp.line([11])  == "a=fmtp:101 0-15");
	assert($sdp.line([12])  == "a=nortpproxy:yes");
	assert($sdp.line([13])  == "a=maxptime:20");
	xlog("------ 2.3.1 after reads -------\n");

	xlog("------ 2.3.5 before write -------\n");
	$(sdp.line([12])[insert]) = "a=sendrecv";
	xlog("------ 2.3.5.1 -------\n");
	assert($sdp.line([10])  == "a=rtpmap:101 telephone-event/8000");
	assert($sdp.line([11])  == "a=fmtp:101 0-15");
	assert($sdp.line([12])  == "a=sendrecv");
	assert($sdp.line([13])  == "a=nortpproxy:yes");
	assert($sdp.line([14])  == "a=maxptime:20");
	xlog("------ 2.3.5 after reads -------\n");


	xlog("------ 2.4.0 before write -------\n");
	$(sdp.line([12])[insertAfter]) = "a=ptime:80";
	xlog("------ 2.4.0.1 -------\n");
	assert($sdp.line([10])  == "a=rtpmap:101 telephone-event/8000");
	assert($sdp.line([11])  == "a=fmtp:101 0-15");
	assert($sdp.line([12])  == "a=sendrecv");
	assert($sdp.line([13])  == "a=ptime:80");
	assert($sdp.line([14])  == "a=nortpproxy:yes");
	assert($sdp.line([15])  == "a=maxptime:20");
	xlog("------ 2.4.0 after reads -------\n");


	xlog("------ 2.5.0 before write -------\n");
	$sdp.line([13]) = NULL;
	xlog("------ 2.5.0.1 -------\n");
	assert($sdp.line([12])  == "a=sendrecv");
	assert($sdp.line([13])  == "a=nortpproxy:yes");
	assert($sdp.line([14])  == "a=maxptime:20");
	assert($sdp.line([15])  == NULL);
	xlog("------ 2.5.0 after reads -------\n");

	$sdp.line([15]) = NULL;

	# SDP re-assemble test !

	$var(sdp_verify) =
"v=0\r
o=Sonus_UAC 14892 145022 IN IP4 1.2.3.4\r
s=SIP Media Capabilities\r
c=IN IP4 1.2.3.10\r
t=0 0\r
m=audio 46938 RTP/AVP 0 8 18 101\r
a=rtpmap:0 PCMU/8000 bitrate=7000 bitrate=4000\r
a=rtpmap:8 PCMA/8000\r
a=rtpmap:18 G729/8000\r
a=fmtp:18 annexb=no\r
a=rtpmap:101 telephone-event/8000\r
a=fmtp:101 0-15\r
a=sendrecv\r
a=nortpproxy:yes\r
a=maxptime:20\r
"
;

	xlog("------ 2.6.0 before rebuild -------\n");
	xlog("$sdp\n");
	xlog("------ 2.6.0.1 before rebuild -------\n");
	assert($sdp == $var(sdp_verify));
	xlog("------ 2.6.0 after verify -------\n");
}


route [SDP_TEST_STREAM] {
	xlog(">>>>>>>> T3 <<<<<<<<<\n");

	$var(sdp) =
"v=0\r
o=Sonus_UAC 14892 145022 IN IP4 1.2.3.4\r
s=SIP Media Capabilities\r
c=IN IP4 1.2.3.4\r
t=0 0\r
m=audio 46938 RTP/AVP 0 8 18 101\r
a=rtpmap:0 PCMU/8000 bitrate=7000 bitrate=4000\r
a=rtpmap:8 PCMA/8000\r
a=rtpmap:18 G729/8000\r
a=fmtp:18 annexb=no\r
a=rtpmap:101 telephone-event/8000\r
a=fmtp:101 0-15\r
a=sendrecv\r
a=maxptime:20\r
m=video 8000/2 RTP/AVP 96 97\r
a=rtpmap:96 H264/90000\r
a=fmtp:96 packetization-mode=0; profile-level-id=4D4033; sprop-parameter-sets=Z01AM5ZkBQHtCAAAAwAIAAADAYR4wZU=,aO48gJ==\r
a=rtpmap:97 H264/90000\r
a=fmtp:97 packetization-mode=0; profile-level-id=4D4033; sprop-parameter-sets=J01AM5WwPA9sBAIA,KO4G8gA=\r
a=control:trackID=1\r
m=audio 27292 RTP/AVP 9 8 0 2 102 100 99 101\r
a=rtpmap:2 G726-32/8000\r
a=rtpmap:102 G726-32/8000\r
a=rtpmap:100 G726-40/8000\r
a=rtpmap:99 G726-24/8000\r
a=rtpmap:101 telephone-event/8000\r
a=fmtp:101 0-15\r
a=sendrecv\r
a=ptime:20\r
"
;
	assert($rb(application/sdp) == $sdp);

	xlog("------ 3.0 before set -------\n");
	$sdp = $var(sdp);
	xlog("------ 3.0 after set -------\n");

	xlog("------ 3.1 before -------\n");
	assert ($sdp.stream(/) == "m=audio 46938 RTP/AVP 0 8 18 101");
	assert ($sdp.stream(/[0]) == "m=audio 46938 RTP/AVP 0 8 18 101");
	assert ($sdp.stream([0]/[0]) == "m=audio 46938 RTP/AVP 0 8 18 101");
	assert ($sdp.stream([1]/) == "m=video 8000/2 RTP/AVP 96 97");
	assert ($sdp.stream([1]/[0]) == "m=video 8000/2 RTP/AVP 96 97");
	assert ($sdp.stream([2]/) == "m=audio 27292 RTP/AVP 9 8 0 2 102 100 99 101");
	assert ($sdp.stream([2]/[0]) == "m=audio 27292 RTP/AVP 9 8 0 2 102 100 99 101");
	xlog("------ 3.1 after -------\n");

	xlog("------ 3.2 before -------\n");
	assert ($sdp.stream(a) == "m=audio 46938 RTP/AVP 0 8 18 101");
	assert ($sdp.stream(audio) == "m=audio 46938 RTP/AVP 0 8 18 101");
	assert ($sdp.stream(audio[0]) == "m=audio 46938 RTP/AVP 0 8 18 101");
	assert ($sdp.stream(audio[0]/) == "m=audio 46938 RTP/AVP 0 8 18 101");
	assert ($sdp.stream(audio[0]/a=rtpmap) == "a=rtpmap:0 PCMU/8000 bitrate=7000 bitrate=4000");

	assert ($sdp.stream(audio/a=rtpmap) == "a=rtpmap:0 PCMU/8000 bitrate=7000 bitrate=4000");
	assert ($sdp.stream(audio/a=rtpmap[0]) == "a=rtpmap:0 PCMU/8000 bitrate=7000 bitrate=4000");
	assert ($sdp.stream(audio/a=rtpmap[1]) == "a=rtpmap:8 PCMA/8000");
	assert ($sdp.stream(audio/a=rtpmap[2]) == "a=rtpmap:18 G729/8000");
	assert ($sdp.stream(audio/a=rtpmap[3]) == "a=rtpmap:101 telephone-event/8000");
	assert ($sdp.stream(audio/a=rtpmap[4]) == NULL);

	assert ($sdp.stream(audio[0]/a=rtpmap) == "a=rtpmap:0 PCMU/8000 bitrate=7000 bitrate=4000");
	assert ($sdp.stream(audio[0]/a=rtpmap[0]) == "a=rtpmap:0 PCMU/8000 bitrate=7000 bitrate=4000");
	assert ($sdp.stream(audio[0]/a=rtpmap[1]) == "a=rtpmap:8 PCMA/8000");
	assert ($sdp.stream(audio[0]/a=rtpmap[2]) == "a=rtpmap:18 G729/8000");
	assert ($sdp.stream(audio[0]/a=rtpmap[3]) == "a=rtpmap:101 telephone-event/8000");
	assert ($sdp.stream(audio[0]/a=rtpmap[4]) == NULL);

	$var(i) = 1; $var(j) = 2;
	assert ($sdp.stream(audio[1]/a=rtpmap) == "a=rtpmap:2 G726-32/8000");
	assert ($sdp.stream(audio[1]/a=rtpmap[0]) == "a=rtpmap:2 G726-32/8000");
	assert ($sdp.stream(audio[1]/a=rtpmap[1]) == "a=rtpmap:102 G726-32/8000");
	assert ($sdp.stream(audio[1]/a=rtpmap[2]) == "a=rtpmap:100 G726-40/8000");
	assert ($sdp.stream(audio[$var(i)]/a=rtpmap[$var(j)]) == "a=rtpmap:100 G726-40/8000");
	assert ($sdp.stream(audio[1]/a=rtpmap[3]) == "a=rtpmap:99 G726-24/8000");
	assert ($sdp.stream(audio[1]/a=rtpmap[4]) == "a=rtpmap:101 telephone-event/8000");
	assert ($sdp.stream(audio[1]/a=rtpmap[5]) == NULL);

	assert ($sdp.stream(audio[2]/a=rtpmap) == NULL);
	assert ($sdp.stream(audio[2]/a=rtpmap[0]) == NULL);
	assert ($sdp.stream(audio[2]/a=rtpmap[1]) == NULL);
	assert ($sdp.stream(audio[2]/a=rtpmap[2]) == NULL);
	assert ($sdp.stream(audio[2]/a=rtpmap[3]) == NULL);
	assert ($sdp.stream(audio[2]/a=rtpmap[4]) == NULL);
	assert ($sdp.stream(audio[2]/a=rtpmap[5]) == NULL);
	xlog("------ 3.2 after -------\n");

	#assert ($sdp.stream([0]/a=rtpmap[3]) == "a=rtpmap:99 G726-24/8000");
	#assert ($sdp.stream([1]/a=rtpmap[3]) == "a=rtpmap:99 G726-24/8000");
	#assert ($sdp.stream([1]/a=rtpmap[4]) == "a=rtpmap:101 telephone-event/8000");
	#assert ($sdp.stream([1]/a=rtpmap[5]) == NULL);

	xlog("------ 3.3 before -------\n");
	assert ($sdp.stream(video/) == "m=video 8000/2 RTP/AVP 96 97");
	assert ($sdp.stream(video[0]/a=rtpmap) == "a=rtpmap:96 H264/90000");
	assert ($sdp.stream(video[0]/a=rtpmap[0]) == "a=rtpmap:96 H264/90000");
	assert ($sdp.stream(video[0]/a=rtpmap[1]) == "a=rtpmap:97 H264/90000");
	assert ($sdp.stream(video[0]/a=rtpmap[2]) == NULL);
	assert ($sdp.stream(video[1]) == NULL);
	assert ($sdp.stream(video[1]/) == NULL);
	assert ($sdp.stream(video[1]/a=rtpmap[0]) == NULL);
	xlog("------ 3.3 after -------\n");

	xlog("------ 3.4-WRITE before -------\n");
	$(sdp.stream(audio[0]/a=rtpmap[1])[insertAfter]) = "a=rtpmap:9 PCMX/8000";
	$(sdp.stream(audio[0]/a=rtpmap[2])[insert]) = "a=rtpmap:40 Opus/32000";
	$sdp.stream(audio[1]/a=rtpmap[2]) = "a=rtpmap:100 G726-40/16000";
	$sdp.stream(audio[1]/a=rtpmap[4]) = NULL;
	xlog("------ 3.4-WRITE after -------\n");

	assert ($sdp.stream(audio[0]/a=rtpmap[0]) == "a=rtpmap:0 PCMU/8000 bitrate=7000 bitrate=4000");
	assert ($sdp.stream(audio[0]/a=rtpmap[1]) == "a=rtpmap:8 PCMA/8000");
	assert ($sdp.stream(audio[0]/a=rtpmap[2]) == "a=rtpmap:40 Opus/32000");
	assert ($sdp.stream(audio[0]/a=rtpmap[3]) == "a=rtpmap:9 PCMX/8000");
	assert ($sdp.stream(audio[0]/a=rtpmap[4]) == "a=rtpmap:18 G729/8000");
	assert ($sdp.stream(audio[0]/a=rtpmap[5]) == "a=rtpmap:101 telephone-event/8000");
	assert ($sdp.stream(audio[0]/a=rtpmap[6]) == NULL);
	xlog("------ 3.4-WRITE after -------\n");

	xlog("------ 3.5-IDX before -------\n");
	assert ($sdp.stream.idx(/v=0) == NULL);
	assert ($sdp.stream.idx(audio/a=rtpmap:40) == 8);
	assert ($sdp.stream.idx(video/a=rtpmap:97) == 19);
	assert ($sdp.stream.idx(audio[1]/a=fmtp) == 27);
	assert ($sdp.stream.idx(audio[1]/a=xmtp) == NULL);
	xlog("------ 3.5-IDX after -------\n");
}


route [SDP_TEST_SESSION] {
	xlog(">>>>>>>> T4 <<<<<<<<<\n");

	$var(sdp) =
"v=0\r
o=Sonus_UAC 14892 145022 IN IP4 1.2.3.4\r
s=SIP Media Capabilities\r
c=IN IP4 1.2.3.4\r
t=0 0\r
m=audio 46938 RTP/AVP 0 8 18 101\r
a=rtpmap:0 PCMU/8000 bitrate=7000 bitrate=4000\r
a=rtpmap:8 PCMA/8000\r
a=rtpmap:18 G729/8000\r
a=fmtp:18 annexb=no\r
a=rtpmap:101 telephone-event/8000\r
a=fmtp:101 0-15\r
a=sendrecv\r
a=maxptime:20\r
"
;
	assert($rb(application/sdp) == $sdp);

	xlog("------ 4.0 before set -------\n");
	$sdp = $var(sdp);
	xlog("------ 4.0 after set -------\n");

	xlog("------ 4.1 before -------\n");
	$var(i) = 3; $var(j) = 2;
	assert ($sdp.session(/) == "v=0");
	assert ($sdp.session(/[0]) == "v=0");
	assert ($sdp.session([0]/[0]) == "v=0");
	assert ($sdp.session([1]/) == "o=Sonus_UAC");
	assert ($sdp.session([1]/[0]) == "o=Sonus_UAC");
	assert ($sdp.session([3]/) == "c=IN");
	assert ($sdp.session([3]/[0]) == "c=IN");
	assert ($sdp.session([3]/[1]) == "IP4");
	assert ($sdp.session([3]/[2]) == "1.2.3.4");
	assert ($sdp.session([$var(i)]/[$var(j)]) == "1.2.3.4");
	assert ($sdp.session([3]/[3]) == NULL);

	assert ($sdp.session([0]) == "v=0");
	assert ($sdp.session([1]) == "o=Sonus_UAC 14892 145022 IN IP4 1.2.3.4");
	assert ($sdp.session([2]) == "s=SIP Media Capabilities");
	assert ($sdp.session([3]) == "c=IN IP4 1.2.3.4");
	assert ($sdp.session([4]) == "t=0 0");
	assert ($sdp.session([5]) == NULL);
	xlog("------ 4.1 after -------\n");

	xlog("------ 4.2-WRITE before -------\n");
	$(sdp.session([0])[insert]) = "x=0";
	$sdp.session([5]) = "a=test";
	$(sdp.session([4])[insertAfter]) = "a=test2";
	xlog("------ 4.2-WRITE after -------\n");
	assert ($sdp.session([0]) == "x=0");
	assert ($sdp.session([1]) == "v=0");
	assert ($sdp.session([2]) == "o=Sonus_UAC 14892 145022 IN IP4 1.2.3.4");
	assert ($sdp.session([3]) == "s=SIP Media Capabilities");
	assert ($sdp.session([4]) == "c=IN IP4 1.2.3.4");
	assert ($sdp.session([5]) == "a=test2");
	assert ($sdp.session([6]) == "a=test");
	assert ($sdp.session([7]) == NULL);
	xlog("------ 4.2-READ after -------\n");
}


startup_route {
	route(SDP_TEST_SDP);
	route(SDP_TEST_LINE);
	route(SDP_TEST_STREAM);
	route(SDP_TEST_SESSION);

	xlog("XXX ================================================ XXX\n");
	xlog("XXX ========   Passed All Tests! ᕦ(ò_óˇ)ᕤ   ======== XXX\n");
	xlog("XXX ================================================ XXX\n");
}


route {
	exit;
}
