log_stderror=yes
mpath="../modules/"
loadmodule "db_mysql/db_mysql.so"
loadmodule "sl/sl.so"
loadmodule "tm/tm.so"
loadmodule "rr/rr.so"
loadmodule "maxfwd/maxfwd.so"
loadmodule "textops/textops.so"
loadmodule "usrloc/usrloc.so"
loadmodule "registrar/registrar.so"
loadmodule "mi_fifo/mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")


route{
	xlog("received by opensips[$pp] at '$Tf' from $si:$sp, method: $rm, transport: $rP:$Ri:$rp, user agent: $ua\n");

	if !(route(39)) {
		xlog("L_ERR", "Error getting identity\n");
		exit;
	}
	xlog("L_ERR", "My identity: $avp(identity_uri)\n");

	if (!method=="REGISTER")
		record_route();

	if (loose_route()) {
		# mark routing logic in request
		append_hf("P-hint: rr-enforced\r\n");
		route(1);
	};

	if (!uri==myself) {
		append_hf("P-hint: outbound\r\n");
		route(1);
	};
	xlog("From header tag: $(hdr(From){param.value,tag})\n");
	
	if(is_method("REGISTER")) {
		if(is_present_hf("Expires")) {
			xlog("Expires header field present\n");
			if($(hdr(Expires){s.int}) > 0) {
				xlog("this is an registration\n");
			}
			if($(hdr(Expires){s.int}) == 0) {
				xlog("this is an unregistration\n");
			}
		}
		if(is_present_hf("Contact")) {
			xlog("Contact header field present\n");
			if ($(hdr(Contact){param.value,expires}{s.int}) > 0) {
				xlog("this is an registration\n");
			}
			if ($(ct{param.value,expires}{s.int}) == 0) {
				xlog("this is an unregistration\n");
			}
		}
	}

	if (uri==myself) {
		if (method=="REGISTER") {
		save("location");
		exit;
		}
		if (!lookup("location")) {
			sl_send_reply("404", "Not Found");
			exit;
		}
		append_hf("P-hint: usrloc applied\r\n");
	}

	route(1);
}

route[1] {
	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

route[39] {
	if ($ai) {
		$avp(identity_user)=$(ai{uri.user});
		$avp(identity_domain)=$(ai{uri.domain});
		$avp(identity_uri)=$ai;
		xlog("L_ERR", "Getting identity from P-Asserted-Identity header\n");
	} else if ($pu) {
		$avp(identity_user)=$(pu{uri.user});
		$avp(identity_domain)=$(pu{uri.domain});
		$avp(identity_uri)=$pu;
		xlog("L_ERR", "Getting identity from P-Preferred-Identity header\n");
	} else if ($fu) {
		$avp(identity_user)=$(fu{uri.user});
		$avp(identity_domain)=$(fu{uri.domain});
		$avp(identity_uri)=$fu;
		xlog("L_ERR", "Getting identity from FROM URI\n");
	} else {
		xlog("L_ERR", "No identity for $rm: $fu -> $ru\n");
		return(-1);
	}

	return (1);
}
