<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

<!-- Include general documentation entities -->
<!ENTITY % docentities SYSTEM "../../../../doc/docbook/entities.xml">
%docentities;

]>

<section id="web3_auth_ext.faq" xmlns:xi="http://www.w3.org/2001/XInclude">

    <title>Frequently Asked Questions</title>

    <qandaset>

        <qandaentry>
            <question>
                <para>How does ENS integration work?</para>
            </question>
            <answer>
                <para>
                    ENS integration allows authentication using domain names like "alice.eth". 
                    The module detects ENS names (containing "."), queries ENS Registry for 
                    ownership, handles wrapped domains, and validates that the ENS owner 
                    matches the wallet address in your authentication contract.
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>Which networks are supported?</para>
            </question>
            <answer>
                <para>
                    <emphasis>Authentication:</emphasis> Only Oasis Sapphire (testnet/mainnet) 
                    due to confidential smart contract requirements.
                </para>
                <para>
                    <emphasis>ENS:</emphasis> Ethereum mainnet, Sepolia testnet, or any network 
                    with ENS contracts deployed.
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>What smart contract interface is required?</para>
            </question>
            <answer>
                <para>
                    Your contract must implement:
                    <programlisting>
function authenticateUser(
    string memory username, string memory realm, string memory method,
    string memory uri, string memory nonce, uint8 algorithm,
    bytes memory response
) public view returns (bool)

function getWalletAddress(string memory username) 
    public view returns (address)
                    </programlisting>
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>What happens if networks are down?</para>
            </question>
            <answer>
                <para>
                    Authentication fails after the configured timeout. Use reliable RPC providers, 
                    appropriate timeout values, and implement fallback authentication for high 
                    availability production environments.
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>Do SIP clients need modifications?</para>
            </question>
            <answer>
                <para>
                    No. The module maintains full RFC 2617/7616 compatibility. Clients use 
                    standard digest authentication. ENS validation happens transparently 
                    on the server side.
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>How do I troubleshoot authentication failures?</para>
            </question>
            <answer>
                <para>
                    <orderedlist>
                        <listitem><para>Enable debug mode: modparam("web3_auth_ext", "contract_debug_mode", 1)</para></listitem>
                        <listitem><para>Check Kamailio logs for detailed error information</para></listitem>
                        <listitem><para>Verify ENS domain ownership on etherscan.io</para></listitem>
                        <listitem><para>Test RPC endpoints manually</para></listitem>
                        <listitem><para>Verify contract addresses and function signatures</para></listitem>
                    </orderedlist>
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>Is this suitable for production?</para>
            </question>
            <answer>
                <para>
                    Yes, but consider: network reliability (use reliable RPC providers), 
                    latency (blockchain calls add 100-1000ms), security (audit smart contracts), 
                    and monitoring (implement comprehensive network status monitoring).
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>How do I configure for containers?</para>
            </question>
            <answer>
                <para>
                    Use environment variables for all parameters:
                    <programlisting>
AUTHENTICATION_RPC_URL="https://testnet.sapphire.oasis.dev"
AUTHENTICATION_CONTRACT_ADDRESS="0xYourContract"
ENS_RPC_URL="https://ethereum-sepolia-rpc.publicnode.com"
CONTRACT_DEBUG_MODE="0"
RPC_TIMEOUT="15"

# Minimal Kamailio config
loadmodule "auth.so"
loadmodule "web3_auth_ext.so"
                    </programlisting>
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>Can I use free RPC providers?</para>
            </question>
            <answer>
                <para>
                    Free providers work for development and low-volume production but have 
                    rate limits and no SLA. For production, use paid providers (Infura, Alchemy) 
                    for better reliability. For Oasis Sapphire, use official endpoints.
                </para>
            </answer>
        </qandaentry>

    </qandaset>

</section> 