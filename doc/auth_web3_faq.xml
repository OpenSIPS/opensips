<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
<!-- Include general documentation entities -->
<!ENTITY % docentities SYSTEM "../../../../doc/docbook/entities.xml">
%docentities;
]>

<chapter>
    <title>Frequently Asked Questions</title>

    <qandaset defaultlabel="number">
        <qandaentry>
            <question>
                <para>How does ENS integration work?</para>
            </question>
            <answer>
                <para>
                    ENS integration allows authentication using domain names like "alice.eth". 
                    The module detects ENS names (containing "."), queries ENS Registry for 
                    ownership, handles wrapped domains, and validates that the ENS owner 
                    matches the wallet address in your authentication contract.
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>Which networks are supported?</para>
            </question>
            <answer>
                <para>
                    <emphasis>Authentication:</emphasis> Only Oasis Sapphire (testnet/mainnet) 
                    due to confidential smart contract requirements.
                </para>
                <para>
                    <emphasis>ENS:</emphasis> Ethereum mainnet, Sepolia testnet, or any network 
                    with ENS contracts deployed.
                </para>
                <para>
                    <emphasis>Network Configuration Options:</emphasis>
                </para>
                <para>
                    <emphasis>Production (Mainnet) Configuration:</emphasis> Use Oasis Sapphire Mainnet for 
                    authentication contracts and Ethereum Mainnet for ENS queries. This setup is ideal for 
                    production deployments with real ENS domains.
                </para>
                <para>
                    <emphasis>Testing (Testnet) Configuration:</emphasis> Use Oasis Sapphire Testnet for 
                    authentication contracts and Ethereum Sepolia for ENS queries. This setup is perfect for 
                    development and testing with test ENS domains.
                </para>
                <para>
                    <emphasis>Single Network Configuration:</emphasis> Use the same network for both 
                    authentication and ENS queries. This simplified setup is suitable when you don't need 
                    cross-chain ENS functionality.
                </para>
                <para>
                    <emphasis>Custom Network Configuration:</emphasis> Use custom RPC endpoints for both 
                    authentication and ENS queries. This setup is useful for private networks or alternative providers.
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>What smart contract interface is required?</para>
            </question>
            <answer>
                <para>
                    Your contract must implement:
                    <programlisting>
...                    
function authenticateUser(
    string memory username, string memory realm, string memory method,
    string memory uri, string memory nonce, uint8 algorithm,
    bytes memory response
) public view returns (bool)
...

...
function getWalletAddress(string memory username) 
    public view returns (address)
...
                    </programlisting>
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>What happens if networks are down?</para>
            </question>
            <answer>
                <para>
                    Authentication fails after the configured timeout. Use reliable RPC providers, 
                    appropriate timeout values, and implement fallback authentication for high 
                    availability production environments.
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>Do SIP clients need modifications?</para>
            </question>
            <answer>
                <para>
                    No. The module maintains full RFC 2617/7616 compatibility. Clients use 
                    standard digest authentication. ENS validation happens transparently 
                    on the server side.
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>How do I troubleshoot authentication failures?</para>
            </question>
            <answer>
                <para>
                    <orderedlist>
                        <listitem><para>Enable debug mode: modparam("auth_web3", "contract_debug_mode", 1)</para></listitem>
                        <listitem><para>Check Kamailio logs for detailed error information</para></listitem>
                        <listitem><para>Verify ENS domain ownership on etherscan.io</para></listitem>
                        <listitem><para>Test RPC endpoints manually</para></listitem>
                        <listitem><para>Verify contract addresses and function signatures</para></listitem>
                    </orderedlist>
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>Is this suitable for production?</para>
            </question>
            <answer>
                <para>
                    Yes, but consider: network reliability (use reliable RPC providers), 
                    latency (blockchain calls add 100-1000ms), security (audit smart contracts), 
                    and monitoring (implement comprehensive network status monitoring).
                </para>
                <para>
                    <emphasis>Security Considerations:</emphasis> Smart contract audits should be conducted thoroughly 
                    for authentication contracts. Leverage Oasis Sapphire's confidential computing capabilities 
                    for enhanced security. Use HTTPS for all RPC endpoints to ensure network security. 
                    Verify that ENS ownership matches wallet addresses during validation. Implement backup 
                    authentication mechanisms for emergency situations.
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>Are there any known limitations with blockchain authentication?</para>
            </question>
            <answer>
                <para>
                    Yes, the main limitation is dependency on external blockchain network availability and response times.
                    Authentication will fail if the blockchain RPC endpoint is unreachable or if the smart contract
                    is not properly deployed.
                </para>
                <para>
                    Blockchain calls add 100-1000ms latency compared to traditional database queries.
                    Set appropriate RPC timeouts (10-30s recommended) to handle network delays. 
                    Furthermore, ENS resolution may require 2 RPC calls, adding additional overhead. 
                    Use reliable RPC providers for production environments to minimize performance impact.
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>How do I configure for containers?</para>
            </question>
            <answer>
                <para>
                    All parameters can be configured via environment variables for containerized deployments. 
                    Environment variables take precedence over modparam configurations.
                    Use environment variables for all parameters:
                    <programlisting>
...
# Environment variables
AUTHENTICATION_RPC_URL="https://testnet.sapphire.oasis.dev"
AUTHENTICATION_CONTRACT_ADDRESS="0xYourContract"
ENS_RPC_URL="https://ethereum-sepolia-rpc.publicnode.com"
CONTRACT_DEBUG_MODE="0"
RPC_TIMEOUT="15"
...

...
# Minimal Kamailio config
loadmodule "auth.so"
loadmodule "auth_web3.so"
...
                    </programlisting>
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>Can I use free RPC providers?</para>
            </question>
            <answer>
                <para>
                    Free providers work for development and low-volume production but have 
                    rate limits and no SLA. For production, use paid providers (Infura, Alchemy) 
                    for better reliability. For Oasis Sapphire, use official endpoints.
                </para>
                <para>
                    The following RPC endpoints are commonly used with the auth_web3 module:
                </para>
                <para>
                    <emphasis>Oasis Sapphire Mainnet:</emphasis> https://sapphire.oasis.io (Production network)
                </para>
                <para>
                    <emphasis>Oasis Sapphire Testnet:</emphasis> https://testnet.sapphire.oasis.dev (Testing network)
                </para>
                <para>
                    <emphasis>Ethereum Mainnet:</emphasis> https://mainnet.infura.io/v3/YOUR_KEY OR https://eth.drpc.org (Production network)
                </para>
                <para>
                    <emphasis>Ethereum Sepolia:</emphasis> https://ethereum-sepolia-rpc.publicnode.com (Testing network)
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>What are common troubleshooting scenarios?</para>
            </question>
            <answer>
                <para>
                    Here are the most common issues and their solutions:
                </para>
                <para>
                    <emphasis>Return code -5 (Network timeout):</emphasis> This occurs when the RPC endpoint is unreachable or slow. 
                    Check your network connectivity, increase the rpc_timeout parameter, and use a reliable RPC provider.
                </para>
                <para>
                    <emphasis>Return code -2 (Auth failed):</emphasis> This indicates invalid credentials or a contract error. 
                    Verify your contract address, check the authentication logic, and enable debug mode for more details.
                </para>
                <para>
                    <emphasis>ENS validation fails:</emphasis> This happens when the domain is not owned or is wrapped. 
                    Check ENS ownership on etherscan.io and verify that the wallet matches the contract data.
                </para>
                <para>
                    <emphasis>Module won't load:</emphasis> This is usually due to missing dependencies or misconfiguration. 
                    Verify that libcurl and OpenSSL are installed and check the module path.
                </para>
                <para>
                    <emphasis>High latency:</emphasis> This is caused by network delays or inefficient RPC providers. 
                    Use a faster RPC provider, optimize network routing, and consider implementing caching.
                </para>
                <para>
                    <emphasis>Intermittent failures:</emphasis> This is often due to RPC provider rate limiting. 
                    Upgrade to a paid RPC plan, implement retries, or use multiple providers for redundancy.
                </para>
                <para>
                    <emphasis>No authentication header:</emphasis> This indicates a SIP client or header parsing issue. 
                    Check client configuration, verify header format, and enable debug logs.
                </para>
                <para>
                    <emphasis>Contract call errors:</emphasis> This occurs with wrong contract addresses or ABI mismatches. 
                    Verify the contract address and check that function signatures match the required interface.
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>What do the error codes mean?</para>
            </question>
            <answer>
                <para>
                    The module returns specific error codes that indicate different authentication states:
                </para>
                <para>
                    <emphasis>Return code 1:</emphasis> Success - Authentication completed successfully. Continue processing the request.
                </para>
                <para>
                    <emphasis>Return code -1:</emphasis> Generic Error - Check the logs for specific error details. Send a 500 Internal Server Error response.
                </para>
                <para>
                    <emphasis>Return code -2:</emphasis> Auth Failed - The contract returned false or there was a credential mismatch. Send a 401 response with challenge (stale=false).
                </para>
                <para>
                    <emphasis>Return code -3:</emphasis> Stale Nonce - The nonce has already been used or expired. Send a 401 response with challenge (stale=true).
                </para>
                <para>
                    <emphasis>Return code -4:</emphasis> No Credentials - The Authorization header is missing or malformed. Send a 401 response with initial challenge.
                </para>
                <para>
                    <emphasis>Return code -5:</emphasis> Network Timeout - The RPC call failed or timed out. Send a 503 Service Unavailable response.
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>Where can I find more about &kamailio;?</para>
            </question>
            <answer>
                <para>
                    Take a look at &kamailiohomelink;.
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>Where can I post a question about this module?</para>
            </question>
            <answer>
                <para>
                    First check if your question was already answered on one of our mailing lists:
                </para>
                <itemizedlist>
                    <listitem>
                    <para>User Mailing List - &kamailiouserslink;</para>
                    </listitem>
                    <listitem>
                    <para>Developer Mailing List - &kamailiodevlink;</para>
                    </listitem>
                </itemizedlist>
                <para>
                    E-mails regarding any stable &kamailio; release should be sent to
                    &kamailiousersmail; and e-mails regarding development versions
                    should be sent to &kamailiodevmail;.
                </para>
            </answer>
        </qandaentry>

        <qandaentry>
            <question>
                <para>How can I report a bug?</para>
            </question>
            <answer>
                <para>
                    Please follow the guidelines provided at:
                    &kamailiobugslink;.
                </para>
            </answer>
        </qandaentry>

    </qandaset>

</chapter> 