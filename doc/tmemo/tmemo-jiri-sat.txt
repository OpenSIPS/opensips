$Id$

About Rewriting From in SIP Requests
====================================


Jiri Kuthan, iptel.org, February 2002


Summary
-------
After giving an introduction about general packet (1) and particular SIP
rewriting (2) and claiming it is harmful, we describe an IP2PSTN scenario
which asks for username translation. It is about the ability to display
phone number associated with a SIP caller in PSTN networks. We show three 
methods (3) then:
a) translation in gateways, which is little invasive and little 
   deployable 
b) NAI, which is architecturally still clean and takes fortunately 
   little knowledge of user-provisioning in gateways, but relies on
   an non-existent protocol extension
c) brute request rewriting which is architecturally ugly but works now
We also give some implementation hints for number three (4).



1. Packet Rewriting Harmful
---------------------------


Generally, message rewriting by elements in middle of a communication
path is a questionable practise threatening transparency. 


The best historical example is that of NATs. These devices are widely 
adopted by user community because they help to preserve IP address 
space and save consumers' money charged for IP addresses. Unfortunately, 
they mangle messages between end-devices in a way that makes life very
difficult. Particularly, with SIP signaling IP addresses advertised
in payload are invalid once a SIP message leavs a natted network.


As the NAT example shows, rewriting packets by elements in the middle 
is a ticket for problems and is likely to introduce operational confusion. 
Readers wishing to learn more about Internet transparency, and threats to it
are encouraged to read 


http://www.iptel.org/ietf/arch/#rfc2775
http://www.iptel.org/ietf/arch/#draft-iab-arch-changes
http://www.iptel.org/ietf/firewall/midcom/#rfc3234



2. Background on SIP Rewriting
------------------------------
In SIP, the most important element in the middle of the end2end path
is a proxy server. With few exceptions, it operates in read-only mode.
As requests and replies traverse SIP proxy servers, the servers update
request-URI, put/remove themselves in routing-related parts of message 
headers (route/via/record-route header field stacks) and decrement 
Max-Forwards.  Other well-known exception is removal of consumed 
credentials at authentication proxies.


Rest of SIP messages remains untouched. Message body, header fields
identifying transaction and dialog (From/CSeq/To/Call-ID), and other
header fields including those unknown are not modified. That establishes
transparent end2end communication, which is a prerequisity to many
end-2-end based features, such as reliability or security.


Consider the security implications as an example of "what happens
if I rewrite". If end-2-end security is striven for and say signed
digests are attached to a message to prove its integrity, rewritten
messages will be recognized as such and denied.


3. Rewrite or Not
--------------
There may be cases in which rewriting some header fields may have
benefits. A particular case raised has been a scenario with users
owning both "nice" e-mail-like SIP addresses as well as numerical
aliases for interoperation with PSTN. While the users commonly use
their e-mail like addresses (sip:john.doe@foo.bar), when they call
to PSTN, a gateway needs to advertise user's phone number to the
PSTN world. User's From needs to be translated to his phone number
before PSTN signaling is started.


There are multiple solutions. The safest is to make the gateway
implement this translation. This solution takes no rewriting in
the SIP path, the translation occurs at the place where the rest
of all other signaling translations occurs too. Whereas architecturally
nice, it is not easy to deploy. PSTN gateways are typically hardware
boxes with limited configuration possibilities. Also, the translation 
database is typically stored in a specialized user-provisioning system,
with interfaces which most likely are not supported by the gateway.


It seems thus easier to place this translation capability in proxy
servers. Proxy servers have been designed as open platforms for
programming. Like web servers, they can have many programming
interfaces, interact with databases and exercise request processing
logic. The translation can also occur without mangling the original
request -- the translation just needs to be _appended_ to the
request. Some of the NAI proposals in IETF can be used, as long as 
the NAI information is understood by terminating gateway:
http://www.iptel.org/ietf/security/identity/


The problem with NAI is it does not exist yet. To address cases
like the one above right now, users are left with brute rewriting of
From header field.


4. How to Rewrite
-----------------

If you are not yet discouraged by all the evil aspects of packet 
mangling and do not wish to wait until NAI is deployed, here you are. 
When rewriting From header field, caution is advised: all requests and 
replies in both directions need to be  translated consistently. Transaction 
and dialog matching will fail otherwise and break signaling completely.

To achieve that, a proxy server must stay in the path and understand
direction of a transaction wrt to session. That is because unlike
in requests from callers, in requests from callee the To header
field needs to be rewritten. Both these features can be achieved 
using record-routing. 


When an initial INVITE arrives, the proxy server looks at From,
and may decide to rewrite it using a database. If it does so
(ser's action "replace" from module "textops" is a good example
of how to achieve it), it puts a record-route (RR) in the forwarded
request. The RR enforces subsequent communication to visit the
proxy and can be used to include helpful hints in uri parameters.
(In general, any parameters can be added as RR is "owned" by 
a proxy and extension uri parameters are permitted for RR in 
SIP spec.)


The parameters that a proxy server appends to the RR-uri may 
describe the translation so that it can be used for subsequent
messages without having to consult the translation database
again. Also, they may be used to identify transactions's
direction. From tag may be good for this purpose. If the
recorded value matches From tag in subsequent requests, it is
request from caller and From needs to be rewritten. If it matches
to-tag, it is request from callee and To needs to be rewritten.



UAC                     proxy       gateway (UAS)
---                     -----       -------------


T1


INVITE                              INVITE
From: joe;tag=123 ---->   X   ----> From: 729-927-1234;tag=123
                                    RR: ;ifrom=joe;ojoe=729-927-1234;ftag=123

180               <----   X   <---- 180
From: joe;tag=123                   From: 729-927-1234;tag=123                                    


200               <----   X   <---- 200
From: joe;tag=123                   From: 729-927-1234;tag=123
                                    RR: ;ifrom=joe;ofrom=729-927-1234;ftag=123


T2


BYE                                 BYE   
From: joe;tag=123 ---->   X   ----> From: 729-927-1234;tag=123 
R: ;ifrom=joe;ojoe=729...                                                   


200               <----   X   <---- 200
From: joe;tag=123                   From: 729-927-1234;tag=123


T3


BYE                                 BYE   
To: joe;tag=123   <----   X   <---- To: 729-927-1234;tag=123 
                                    R: ;ifrom=joe;ojoe=729-927-1234;ftag=123


200               ---->   X   ----> 200
To: joe;tag=123                     To: 729-927-1234;tag=123


  RR denotes record-route, R route, only parameters are shown in
  RR and R


Note that one has to address rewriting of replies too; one needs to
know which replies should be rewritten and how. There are two ways.
One is through use of stateful transaction processing. A "rewriting"
flag is stored along with rewritten transactions. It tells, whether
From or To has been rewritten in relayed requests. If so, value from
the original request is put back in relayed replies.
(Transactional processing is best utilized in ser using TM callbacks.)

The other design choice is stateless: putting all the translation
information in Via, similarly to like it is put in RR.

Also, one needs to establish aliases that make the rewritten address
routable. Otherwise, attempts to use the translated address in From
header field for subsequent communication would fail. That is (unlike
with NATs, fortunately) a workable option.


  Note: with RFC3261, rewriting of From/To could be perhaps less
  voluminous. The major reason for rewriting consistency as explained
  above is the need to keep consistency for transaction and dialog
  matching. Pre-3261 implementations use header these fields to
  identify dialogs and transactions. It has been later recognized 
  that such dialog/transaction matching is bloated and it has been
  simplified in 3261. Transactions are identified by sentby/branch in 
  topmost Via, and dialogs by {callid,from-tag,to-tag}. If URI in From
  is then changed, dialog/transaction is not affected and one does
  not need to worry about rewriting replies (UAC does not care they
  have a different From URI) or subsequent requests (UAC does not 
  care UAS's To-URI != UAC's From URI).

  Again -- this simplification would only be doable if there were no
  backwards-compatibility concerns. It would be probably more confusing 
  than "consistent rewriting" as described above. On the other hand,
  things would be simpler, and neither stateful processing nor 
  record-routing would be required.

  A guess is that NAI will work before pre-3261 implementions disappear.
  That means, that now the fully consistent rewriting needs to be applied
  and later, rewriting will be (hopefuly) replaced with NAI.
