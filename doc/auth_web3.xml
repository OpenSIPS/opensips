<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
	"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
	[ <!ENTITY % local.common.attrib
	 "xmlns:xi CDATA #FIXED 'http://www.w3.org/2001/XInclude'">
	]
>

<book id="auth_web3" xmlns:xi="http://www.w3.org/2001/XInclude">
    <bookinfo>
        <title>The Web3 Auth Module</title>
        <authorgroup>
            <author>
                <firstname>Your</firstname>
                <surname>Name</surname>
                <affiliation><orgname>Your Organization</orgname></affiliation>
                <email>your.email@example.com</email>
            </author>
        </authorgroup>

        <copyright>
            <year>2025</year>
            <holder>Your Organization</holder>
        </copyright>

    </bookinfo>
    <toc></toc>
    
    <chapter id="auth_web3-overview">
        <title>Overview</title>
        <para>
            The <emphasis>auth_web3</emphasis> module provides Web3-based authentication 
            for OpenSIPS, enabling SIP authentication through blockchain technology and 
            ENS (Ethereum Name Service) resolution.
        </para>
        <para>
            This module integrates with the Oasis Sapphire blockchain network to verify 
            SIP digest authentication responses and resolve ENS names to wallet addresses.
        </para>
    </chapter>

    <chapter id="auth_web3-functions">
        <title>Functions</title>
        
        <section id="web3_www_authenticate">
            <title>
                <function>web3_www_authenticate(realm, method)</function>
            </title>
            <para>
                Performs Web3-based authentication for WWW-Authenticate challenges.
                Verifies SIP digest authentication through blockchain contracts and ENS resolution.
            </para>
            <para>
                This function extracts digest parameters from the Authorization header,
                resolves ENS names to wallet addresses, and verifies the digest response
                on the blockchain.
            </para>
            <para><emphasis>Parameters:</emphasis></para>
            <itemizedlist>
                <listitem>
                    <para><emphasis>realm</emphasis> (string, mandatory) - Authentication realm (usually the domain name)</para>
                </listitem>
                <listitem>
                    <para><emphasis>method</emphasis> (string, optional) - SIP method (REGISTER, INVITE, etc.). If not provided, uses the actual SIP method from the request</para>
                </listitem>
            </itemizedlist>
            <para><emphasis>Return value:</emphasis></para>
            <itemizedlist>
                <listitem>
                    <para><emphasis>1</emphasis> - Authentication successful</para>
                </listitem>
                <listitem>
                    <para><emphasis>-1</emphasis> - Authentication failed</para>
                </listitem>
            </itemizedlist>
            <para><emphasis>Example:</emphasis></para>
            <programlisting format="linespecific">
# REGISTER authentication
if (is_method("REGISTER")) {
    if (!is_present_hf("Authorization")) {
        www_challenge("example.com");
        exit;
    }
    if (web3_www_authenticate("example.com", "REGISTER")) {
        # Authentication successful
        save("location");
        exit;
    } else {
        send_reply(401, "Unauthorized");
        exit;
    }
}
            </programlisting>
        </section>

        <section id="web3_proxy_authenticate">
            <title>
                <function>web3_proxy_authenticate(realm, method)</function>
            </title>
            <para>
                Performs Web3-based authentication for Proxy-Authenticate challenges.
                Similar to web3_www_authenticate but for proxy authentication scenarios.
            </para>
            <para>
                This function works identically to web3_www_authenticate but is designed
                for proxy authentication flows where Proxy-Authorization headers are used.
            </para>
            <para><emphasis>Parameters:</emphasis></para>
            <itemizedlist>
                <listitem>
                    <para><emphasis>realm</emphasis> (string, mandatory) - Authentication realm (usually the domain name)</para>
                </listitem>
                <listitem>
                    <para><emphasis>method</emphasis> (string, optional) - SIP method (REGISTER, INVITE, etc.). If not provided, uses the actual SIP method from the request</para>
                </listitem>
            </itemizedlist>
            <para><emphasis>Return value:</emphasis></para>
            <itemizedlist>
                <listitem>
                    <para><emphasis>1</emphasis> - Authentication successful</para>
                </listitem>
                <listitem>
                    <para><emphasis>-1</emphasis> - Authentication failed</para>
                </listitem>
            </itemizedlist>
            <para><emphasis>Example:</emphasis></para>
            <programlisting format="linespecific">
# INVITE authentication with proxy auth
if (is_method("INVITE")) {
    if (!is_present_hf("Authorization")) {
        www_challenge("example.com");
        exit;
    }
    if (web3_proxy_authenticate("example.com", "INVITE")) {
        # Authentication successful
    } else {
        send_reply(407, "Proxy Authentication Required");
        exit;
    }
}
            </programlisting>
        </section>
    </chapter>

    <chapter id="auth_web3-parameters">
        <title>Parameters</title>
        
        <section id="web3_authentication_rpc_url">
            <title>
                <varname>web3_authentication_rpc_url</varname> (string)
            </title>
            <para>
                RPC URL for the blockchain network (e.g., Oasis Sapphire testnet or mainnet).
                This parameter specifies the endpoint for blockchain communication.
            </para>
            <para><emphasis>Default value:</emphasis> None (must be configured)</para>
            <para><emphasis>Example:</emphasis></para>
            <programlisting format="linespecific">
modparam("auth_web3", "web3_authentication_rpc_url", "https://testnet.sapphire.oasis.dev")
            </programlisting>
        </section>

        <section id="web3_authentication_contract_address">
            <title>
                <varname>web3_authentication_contract_address</varname> (string)
            </title>
            <para>
                Address of the smart contract that handles authentication verification.
                This contract must implement the authenticateUser function for digest verification.
            </para>
            <para><emphasis>Default value:</emphasis> None (must be configured)</para>
            <para><emphasis>Example:</emphasis></para>
            <programlisting format="linespecific">
modparam("auth_web3", "web3_authentication_contract_address", "0xE773BB79689379d32Ad1Db839868b6756B493aea")
            </programlisting>
        </section>

        <section id="web3_contract_debug_mode">
            <title>
                <varname>web3_contract_debug_mode</varname> (integer)
            </title>
            <para>
                Enable debug logging for blockchain contract interactions.
                When enabled, detailed logs are generated for debugging purposes.
            </para>
            <para><emphasis>Default value:</emphasis> 0 (disabled)</para>
            <para><emphasis>Example:</emphasis></para>
            <programlisting format="linespecific">
modparam("auth_web3", "web3_contract_debug_mode", 1)
            </programlisting>
        </section>

        <section id="web3_rpc_timeout">
            <title>
                <varname>web3_rpc_timeout</varname> (integer)
            </title>
            <para>
                Timeout in seconds for blockchain RPC calls.
                This parameter controls how long to wait for blockchain responses.
            </para>
            <para><emphasis>Default value:</emphasis> 10 seconds</para>
            <para><emphasis>Example:</emphasis></para>
            <programlisting format="linespecific">
modparam("auth_web3", "web3_rpc_timeout", 15)
            </programlisting>
        </section>
    </chapter>

    <chapter id="auth_web3-faq">
        <title>FAQ</title>
        
        <qandaset>
            <qandaentry>
                <question>
                    <para>What is Web3 authentication and how does it work?</para>
                </question>
                <answer>
                    <para>
                        Web3 authentication uses blockchain technology to verify SIP digest authentication.
                        Instead of storing passwords in a database, the module verifies authentication
                        responses against a smart contract deployed on the Oasis Sapphire blockchain.
                        ENS (Ethereum Name Service) names are resolved to wallet addresses for user identification.
                    </para>
                </answer>
            </qandaentry>

            <qandaentry>
                <question>
                    <para>What blockchain networks are supported?</para>
                </question>
                <answer>
                    <para>
                        Currently, the module supports Oasis Sapphire testnet and mainnet.
                        The module can be extended to support other EVM-compatible networks
                        by modifying the RPC URL configuration.
                    </para>
                </answer>
            </qandaentry>

            <qandaentry>
                <question>
                    <para>How do I set up ENS names for authentication?</para>
                </question>
                <answer>
                    <para>
                        Users need to register ENS names (e.g., alice.eth) and ensure their
                        wallet addresses are properly configured in the Oasis contract.
                        The module will resolve ENS names to wallet addresses and verify
                        that the wallet owner matches the authentication request.
                    </para>
                </answer>
            </qandaentry>

            <qandaentry>
                <question>
                    <para>What smart contract functions are required?</para>
                </question>
                <answer>
                    <para>
                        The smart contract must implement the authenticateUser function with
                        the following signature:
                        authenticateUser(string username, string realm, string method, string uri, string nonce, bytes response)
                        This function should return true if the digest authentication is valid.
                    </para>
                </answer>
            </qandaentry>

            <qandaentry>
                <question>
                    <para>Is this module compatible with standard SIP clients?</para>
                </question>
                <answer>
                    <para>
                        Yes, the module uses standard SIP digest authentication (RFC 3261).
                        SIP clients will work normally - they just need to use ENS names
                        as usernames instead of traditional usernames.
                    </para>
                </answer>
            </qandaentry>

            <qandaentry>
                <question>
                    <para>How do I debug authentication issues?</para>
                </question>
                <answer>
                    <para>
                        Enable debug mode by setting web3_contract_debug_mode to 1.
                        This will provide detailed logs of blockchain interactions,
                        ENS resolution, and digest verification processes.
                    </para>
                </answer>
            </qandaentry>

            <qandaentry>
                <question>
                    <para>What are the performance implications?</para>
                </question>
                <answer>
                    <para>
                        Each authentication requires blockchain RPC calls, which may add
                        latency compared to traditional database authentication.
                        Consider using appropriate RPC timeouts and potentially caching
                        ENS resolution results for better performance.
                    </para>
                </answer>
            </qandaentry>

            <qandaentry>
                <question>
                    <para>Can I use this module alongside traditional authentication?</para>
                </question>
                <answer>
                    <para>
                        Yes, you can configure different realms or routes to use different
                        authentication methods. The module only handles requests that
                        explicitly call the web3_www_authenticate or web3_proxy_authenticate functions.
                    </para>
                </answer>
            </qandaentry>
        </qandaset>
    </chapter>

</book>