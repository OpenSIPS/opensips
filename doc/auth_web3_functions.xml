<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

<!-- Include general documentation entities -->
<!ENTITY % docentities SYSTEM "../../../../doc/docbook/entities.xml">
%docentities;

]>

<section id="auth_web3.functions" xmlns:xi="http://www.w3.org/2001/XInclude">

    <title>Functions</title>

    <section id="auth_web3.f.web3_www_authenticate">
        <title>
            <function moreinfo="none">web3_www_authenticate(realm, method)</function>
        </title>
        <para>
            Verifies credentials using blockchain-based authentication via Web3 smart contract calls 
            with integrated ENS support. Automatically detects ENS names and performs domain ownership 
            validation when applicable. This function operates on WWW-Authenticate headers and serves 
            as a drop-in replacement for traditional www_authenticate functions.
        </para>
        <para>
            <emphasis>ENS Integration:</emphasis> For usernames containing "." (dot), performs ENS 
            owner validation by querying ENS Registry, handling wrapped domains, and cross-validating 
            with authentication contract wallet addresses.
        </para>
        <para>
            <emphasis>Parameters:</emphasis>
            <itemizedlist>
                <listitem>
                    <para><emphasis>realm</emphasis> (string) - Authentication realm. Use $td for REGISTER, $fd for other methods</para>
                </listitem>
                <listitem>
                    <para><emphasis>method</emphasis> (string, optional) - SIP method. Defaults to request-line method if not set</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            <emphasis>Return Type:</emphasis> integer
        </para>
                <para>
            <emphasis>Return codes:</emphasis>
            <itemizedlist>
                <listitem><para><emphasis>Positive value</emphasis> - Authentication successful</para></listitem>
                <listitem><para><emphasis>-1</emphasis> - Generic error</para></listitem>
                <listitem><para><emphasis>-2</emphasis> - Invalid credentials/blockchain verification failed</para></listitem>
                <listitem><para><emphasis>-3</emphasis> - Stale nonce</para></listitem>
                <listitem><para><emphasis>-4</emphasis> - No credentials</para></listitem>
                <listitem><para><emphasis>-5</emphasis> - Network timeout</para></listitem>
            </itemizedlist>
        </para>
        <para>
            This function can be used from REQUEST_ROUTE.
        </para>
        <example>
            <title>web3_www_authenticate usage</title>
            <programlisting format="linespecific">
...
# Basic Web3 + ENS authentication
if (!web3_www_authenticate("$fd", "$rm")) {
    www_challenge("$fd", "0");
    exit;
}
...

...
# Enhanced error handling with specific responses
if (!web3_www_authenticate("$td", "$rm")) {
    switch ($retcode) {
        case -2:
            xlog("L_INFO", "Auth failed for $fU\n");
            www_challenge("$td", "16"); # stale=true
            break;
        case -5:
            xlog("L_ERR", "Network timeout for $fU\n");
            sl_send_reply("503", "Service Unavailable");
            exit;
        default:
            www_challenge("$td", "0");
    }
    exit;
}
... 

...
# Log ENS domain authentication
if ($(fU{s.contains,"."})) {
    xlog("L_INFO", "ENS domain $fU authenticated\n");
}
...
            </programlisting>
        </example>
    </section>

    <section id="auth_web3.f.web3_proxy_authenticate">
        <title>
            <function moreinfo="none">web3_proxy_authenticate(realm, method)</function>
        </title>
        <para>
            Verifies credentials using blockchain-based authentication via Web3 smart contract calls 
            with ENS support for proxy authentication. Operates on Proxy-Authorization headers instead 
            of Authorization headers. Includes the same ENS integration capabilities as <function>web3_www_authenticate</function> 
            and serves as a drop-in replacement for traditional proxy_authenticate functions.
        </para>
        <para>
            <emphasis>Parameters:</emphasis>
            <itemizedlist>
                <listitem>
                    <para><emphasis>realm</emphasis> (string) - Authentication realm. Use $td for REGISTER, $fd for other methods</para>
                </listitem>
                <listitem>
                    <para><emphasis>method</emphasis> (string, optional) - SIP method. Defaults to request-line method if not set</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            <emphasis>Return Type:</emphasis> integer
        </para>
        <para>
            <emphasis>Return codes:</emphasis> Identical to <function>web3_www_authenticate</function>
        </para>
        <para>
            This function can be used from REQUEST_ROUTE.
        </para>
        <example>
            <title>web3_proxy_authenticate usage</title>
            <programlisting format="linespecific">
...
# Basic proxy authentication
if (!web3_proxy_authenticate("proxy.domain.com", "$rm")) {
    proxy_challenge("proxy.domain.com", "0");
    exit;
}
...

...
# Proxy routing with ENS awareness and error handling
route[RELAY] {
    if (!web3_proxy_authenticate("$fd", "$rm")) {
        switch ($retcode) {
            case -5:
                sl_send_reply("503", "Service Unavailable");
                exit;
        }
        proxy_challenge("$fd", "0");
        exit;
    }
    
    # Log ENS user authentication
    if ($(fU{s.contains,"."})) {
        xlog("L_INFO", "ENS user $fU authenticated via proxy\n");
    }
    t_relay();
}
...
            </programlisting>
        </example>
    </section>

    <section id="auth_web3.f.bind_web3_auth">
        <title>
            <function moreinfo="none">bind_web3_auth(api)</function>
        </title>
        <para>
            Allows other modules to bind to the Web3 authentication API with ENS support. This function 
            provides programmatic access to Web3 authentication functions for other 
            Kamailio modules. The API structure contains core authentication and ENS validation functions 
            that handle both standard Web3 authentication and ENS validation internally.
        </para>
		<para>
            Note: This function is intended for use by other Kamailio modules, not configuration scripts.
        </para>
        <para>
            <emphasis>Parameters:</emphasis>
            <itemizedlist>
                <listitem>
                    <para><emphasis>api</emphasis> (web3_auth_api_t*) - Pointer to API structure to be populated</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            <emphasis>API Functions Available:</emphasis>
            <itemizedlist>
                <listitem>
                    <para><emphasis>digest_authenticate(msg, realm, hdr_type, method)</emphasis> - Core authentication function with ENS support</para>
                    <para>Parameters: msg (sip_msg_t*), realm (str*), hdr_type (hdr_types_t), method (str*)</para>
                    <para>Return: auth_result_t (structure containing authentication result)</para>
                </listitem>
                <listitem>
                    <para><emphasis>check_response(cred, method)</emphasis> - Low-level credential verification function</para>
                    <para>Parameters: cred (dig_cred_t*), method (str*)</para>
                    <para>Return: auth_result_t (structure containing verification result)</para>
                </listitem>
				<listitem>
                    <para><emphasis>ens_validate(domain, wallet_address)</emphasis> - ENS domain ownership validation function</para>
                    <para>Parameters: domain (str*), wallet_address (str*)</para>
                    <para>Return: int (1 for valid ownership, 0 for invalid, -1 for error)</para>
                </listitem>
				<listitem>
                    <para><emphasis>ens_get_owner(domain)</emphasis> - ENS ownership resolution function</para>
                    <para>Parameters: domain (str*)</para>
                    <para>Return: str* (pointer to owner address string, NULL if not found)</para>
                </listitem>
            </itemizedlist>
        </para>
		<para>
            <emphasis>Return Type:</emphasis> integer
        </para>
        <para>
            <emphasis>Return codes:</emphasis> Identical to <function>web3_www_authenticate</function>
        </para>
		<para>
            This function can be used from MODULE_INIT.
        </para>
        <example>
            <title>API usage in C modules</title>
            <programlisting format="linespecific">
...
#include "modules/auth_web3/api.h"

web3_auth_api_t auth_web3_api;

// Module initialization
if (auth_web3_load_api(&amp;auth_web3_api) != 0) {
    LM_ERR("cannot bind auth_web3 api\n");
    return -1;
}

// Use authentication API
result = web3_api.digest_authenticate(msg, &amp;realm, 
                                      HDR_AUTHORIZATION_T, &amp;method);
...
            </programlisting>
        </example>
    </section>

</section> 