<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

<!-- Include general documentation entities -->
<!ENTITY % docentities SYSTEM "../../../../doc/docbook/entities.xml">
%docentities;

]>

<section id="auth_web3.functions" xmlns:xi="http://www.w3.org/2001/XInclude">

    <title>Functions</title>

    <section id="auth_web3.function_summary">
	<title>Function Summary</title>
	<para>
	    <programlisting>
Function                   Parameters      Return Type   Route Context   Description
--------------------------------------------------------------------------------------------
web3_www_authenticate      realm, method   integer       REQUEST_ROUTE   Web3 authentication with ENS support for WWW-Authenticate headers
web3_proxy_authenticate    realm, method   integer       REQUEST_ROUTE   Web3 authentication with ENS support for Proxy-Authenticate headers  
bind_auth_web3             api             integer       MODULE_INIT     API binding function for other Kamailio modules
	    </programlisting>
	</para>
    </section>

    <section id="auth_web3.return_codes">
	<title>Return Codes Reference</title>
	<para>
	    <programlisting>
Return Code   Meaning                                       Recommended Action
----------------------------------------------------------------------------------
> 0           Authentication successful                     Continue processing request
-1            Generic error                                 Send challenge or 500 error
-2            Invalid credentials/blockchain verification   Send challenge with stale=false
-3            Stale nonce                                   Send challenge with stale=true
-4            No credentials provided                       Send initial challenge
-5            Network timeout (RPC call failed)            Send 503 Service Unavailable
	    </programlisting>
	</para>
    </section>

	<section id="auth_web3.f.web3_www_authenticate">
		<title>
			<function moreinfo="none">web3_www_authenticate(realm, method)</function>
		</title>
		<para>
		Verifies credentials using blockchain-based authentication via Web3 smart contract calls 
		with integrated ENS support. Automatically detects ENS names and performs domain ownership 
		validation when applicable.
		</para>
		<para>
		<emphasis>ENS Integration:</emphasis> For usernames containing "." (dot), performs ENS 
		owner validation by querying ENS Registry, handling wrapped domains, and cross-validating 
		with authentication contract wallet addresses.
		</para>
		<para>
		<emphasis>Return codes:</emphasis>
		<itemizedlist>
			<listitem><para><emphasis>Positive value</emphasis> - Authentication successful</para></listitem>
			<listitem><para><emphasis>-1</emphasis> - Generic error</para></listitem>
			<listitem><para><emphasis>-2</emphasis> - Invalid credentials/blockchain verification failed</para></listitem>
			<listitem><para><emphasis>-3</emphasis> - Stale nonce</para></listitem>
			<listitem><para><emphasis>-4</emphasis> - No credentials</para></listitem>
			<listitem><para><emphasis>-5</emphasis> - Network timeout</para></listitem>
		</itemizedlist>
		</para>
		<para>
		<emphasis>Parameters:</emphasis>
		<itemizedlist>
		<listitem>
			<para><emphasis>realm</emphasis> (string) - Authentication realm. Use $td for REGISTER, $fd for other methods</para>
		</listitem>
		<listitem>
			<para><emphasis>method</emphasis> (string, optional) - SIP method. Defaults to request-line method if not set</para>
		</listitem>
		</itemizedlist>
		</para>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title>web3_www_authenticate usage</title>
		<programlisting format="linespecific">
# Basic Web3 + ENS authentication
if (!web3_www_authenticate("$fd", "$rm")) {
    www_challenge("$fd", "0");
    exit;
}

# Enhanced error handling
if (!web3_www_authenticate("$td", "$rm")) {
    switch ($retcode) {
        case -2:
            xlog("L_INFO", "Auth failed for $fU\n");
            www_challenge("$td", "16"); # stale=true
            break;
        case -5:
            xlog("L_ERR", "Network timeout for $fU\n");
            sl_send_reply("503", "Service Unavailable");
            exit;
        default:
            www_challenge("$td", "0");
    }
    exit;
}

# Check if ENS domain was authenticated
if ($(fU{s.contains,"."})) {
    xlog("L_INFO", "ENS domain $fU authenticated\n");
}
		</programlisting>
		</example>
	</section>

	<section id="auth_web3.f.web3_proxy_authenticate">
		<title>
			<function moreinfo="none">web3_proxy_authenticate(realm, method)</function>
		</title>
		<para>
		Verifies credentials using blockchain-based authentication via Web3 smart contract calls 
		with ENS support for proxy authentication. Operates on Proxy-Authorization headers instead 
		of Authorization headers.
		</para>
		<para>
		Includes the same ENS integration capabilities as web3_www_authenticate and serves as a 
		drop-in replacement for traditional proxy_authenticate functions.
		</para>
		<para>
		Return codes and parameter meanings are identical to web3_www_authenticate.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title>web3_proxy_authenticate usage</title>
		<programlisting format="linespecific">
# Basic proxy authentication
if (!web3_proxy_authenticate("proxy.domain.com", "$rm")) {
    proxy_challenge("proxy.domain.com", "0");
    exit;
}

# Proxy routing with ENS awareness
route[RELAY] {
    if (!web3_proxy_authenticate("$fd", "$rm")) {
        switch ($retcode) {
            case -5:
                sl_send_reply("503", "Service Unavailable");
                exit;
        }
        proxy_challenge("$fd", "0");
        exit;
    }
    
    if ($(fU{s.contains,"."})) {
        xlog("L_INFO", "ENS user $fU authenticated via proxy\n");
    }
    t_relay();
}
		</programlisting>
		</example>
	</section>

	<section id="auth_web3.api">
		<title>API Functions</title>
		<para>
		The module provides an API for other Kamailio modules to access Web3 authentication 
		and ENS validation functions programmatically.
		</para>

		<section id="auth_web3.api_summary">
		    <title>API Function Summary</title>
		    <para>
			<programlisting>
API Function          Parameters                                                 Return Type      Description
-----------------------------------------------------------------------------------------------------------
digest_authenticate   msg, realm, hdr_type, method                              auth_result_t    Core authentication with ENS support
check_response        username, realm, password, nonce, method, uri, algorithm, auth_result_t    Low-level credential verification
                      response
ens_validate          domain, wallet_address                                     int              ENS domain ownership validation
ens_get_owner         domain                                                     str*             ENS ownership resolution
			</programlisting>
		    </para>
		</section>
		
		<section id="auth_web3.f.bind_auth_web3">
			<title>
				<function moreinfo="none">bind_auth_web3(api)</function>
			</title>
			<para>
			Allows other modules to bind to the Web3 authentication API with ENS support.
			</para>
			<para>
			<emphasis>API Functions:</emphasis>
			<itemizedlist>
				<listitem><para>digest_authenticate - Core authentication with ENS support</para></listitem>
				<listitem><para>check_response - Low-level credential verification</para></listitem>
				<listitem><para>ens_validate - ENS domain validation</para></listitem>
				<listitem><para>ens_get_owner - ENS ownership resolution</para></listitem>
			</itemizedlist>
			</para>
			<para>
			This function is intended for use by other Kamailio modules, not configuration scripts.
			</para>
			<example>
			<title>API usage in C modules</title>
			<programlisting format="linespecific">
#include "modules/auth_web3/api.h"

auth_web3_api_t auth_web3_api;

// Module initialization
if (auth_web3_load_api(&amp;auth_web3_api) != 0) {
    LM_ERR("cannot bind auth_web3 api\n");
    return -1;
}

// Use authentication API
result = web3_api.digest_authenticate(msg, &amp;realm, 
                                      HDR_AUTHORIZATION_T, &amp;method);
			</programlisting>
			</example>
		</section>
	</section>

	<section id="auth_web3.ens_technical">
	    <title>ENS Technical Details</title>
	    <para>
		The module implements comprehensive ENS integration with the following technical features:
	    </para>
	    
	    <section id="auth_web3.ens_namehash">
		<title>Namehash Calculation</title>
		<para>
		    Implements proper ENS namehash calculation according to EIP-137 for converting 
		    human-readable names like "alice.eth" into bytes32 hashes used by ENS contracts.
		</para>
	    </section>
	    
	    <section id="auth_web3.ens_ownership">
		<title>Ownership Resolution</title>
		<para>
		    Handles complex ENS ownership scenarios:
		    <itemizedlist>
			<listitem><para>Direct ownership via ENS Registry</para></listitem>
			<listitem><para>Wrapped domain ownership via Name Wrapper contract</para></listitem>
			<listitem><para>Zero address detection for unregistered domains</para></listitem>
		    </itemizedlist>
		</para>
	    </section>
	    
	    <section id="auth_web3.multi_network">
		<title>Multi-Network Support</title>
		<para>
		    <itemizedlist>
			<listitem><para>ENS queries on Ethereum mainnet/testnet</para></listitem>
			<listitem><para>Authentication contracts on Oasis Sapphire (required)</para></listitem>
			<listitem><para>Automatic RPC endpoint selection</para></listitem>
			<listitem><para>Fallback to single-network mode when ens_rpc_url not configured</para></listitem>
		    </itemizedlist>
		</para>
	    </section>
	</section>

</section> 