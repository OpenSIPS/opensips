#
#
# makefile defs (CC, LD,a.s.o)
#


#version number
VERSION = 0
PATCHLEVEL = 8
SUBLEVEL = 7
EXTRAVERSION = -2

RELEASE=$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)
OS = $(shell uname -s)
ARCH = $(shell uname -m |sed -e s/i.86/i386/ -e s/sun4u/sparc64/ )

# compile-time options
#
# -DSTATS
#		allows to print out number of packets processed on CTRL-C;
# 		implementation still nasty and reports per-process
# -DNO_DEBUG
#		turns off some of the debug messages (DBG(...)).
# -DNO_LOG
#		completely turns of all the logging (and DBG(...))
# -DEXTRA_DEBUG
#		compiles in some extra debugging code
# -DDNS_IP_HACK
#		faster ip address resolver for ip strings (e.g "127.0.0.1")
# -DSHM_MEM
#		compiles in shared mem. support, needed by some modules and
#		by USE_SHM_MEM
# -DSHM_MMAP
#		use mmap instead of SYSV shared memory
# -DPKG_MALLOC
#		uses a faster malloc (exclusive w/ USE_SHM_MEM)
# -DUSE_SHM_MEM
#		all pkg_malloc => shm_malloc (most mallocs use a common sh.
#		mem. segment); don't define PKG_MALLOC if you want this!
# -DDBG_QM_MALLOC
#		qm_malloc debug code, will cause pkg_malloc and shm_malloc
#		to keep and display lot of debuging information: file name,
#		function, line number of malloc/free call for each block,
#		extra error checking (trying to free the same pointer
#		twice, trying to free a pointer alloc'ed with a different
#		malloc etc.)
# -DVQ_MALLOC
#		additional option to PKG_MALLOC which utilizes a fater then
#		qm version
#		(not true anymore, q_malloc performs approx. the same)
# -DF_MALLOC
#		an even faster malloc, not recommended for debugging
# -DDBG_MALLOC
#		issues additional debugging information if lock/unlock is called
# -DFAST_LOCK
#		uses fast arhitecture specific locking (see the arh. specific section)
# -DNOISY_REPLIES
#		turns on appending User-agent and Content-length:0 to ser-generated
#		replies; 
# -DBUSY_WAIT
#		uses busy waiting on the lock
# -DADAPTIVE_WAIT
#		try busy waiting for a while and if the lock is still held go to
#		force reschedule
# -DADAPTIVE_WAIT_LOOPS=number
#		number of loops we busy wait, after "number" loops have elapsed we 
#		force a reschedule
# -DNOSMP
#		don't use smp compliant locking (faster but won't work on SMP machines)
#		(not yet enabled)
# -DWAIT
#		protection against race condiditions; turn off only for debugging;
#       to become non-optional if stable
# -DNEW_HNAME
#		32-bit header name parsing; turn off for lower speed ;-) or debugging; to become non-optional if fast and stable
# -DSRL Shortened Reply Lock -- moves more code, esp. "send" out
#  of locks for greater speed; to become non-optional if fast and stable

DEFS+= -DNAME='"$(NAME)"' -DVERSION='"$(RELEASE)"' -DARCH='"$(ARCH)"' \
	 -DOS='"$(OS)"' -DCOMPILER='"$(CC_VER)"'\
	 -DDNS_IP_HACK  -DPKG_MALLOC -DSHM_MEM  -DSHM_MMAP \
	 -DF_MALLOC  -DUSE_SYNONIM\
	 -DWAIT -DNEW_HNAME -DNOISY_REPLIES -DSRL\
	 -DNO_DEBUG \
	 #-DADAPTIVE_WAIT -DADAPTIVE_WAIT_LOOPS=0 \
	 #-DNOSMP \
	 #-DEXTRA_DEBUG 
	 #-DVQ_MALLOC  -DDBG_LOCK  #-DSTATS
	 #-DDBG_QM_MALLOC #-DNO_DEBUG
# -DUSE_SHM_MEM
#-DNO_DEBUG
#-DNO_DEBUG#-DSTATS -DNO_DEBUG
#-DNO_LOG

# arh. specific definitions
ifeq ($(ARCH), i386)
	DEFS+= -DFAST_LOCK
endif

ifeq ($(ARCH), sparc64)
	DEFS+= -DFAST_LOCK
endif


#PROFILE=  -pg #set this if you want profiling
#mode = debug
mode = release

# platform dependent settings


#common
CC=gcc
LD= $(CC)
CC_VER= $(CC) $(shell $(CC) --version)
CC_LONGVER=$(shell $(CC) -v 2>&1)
MKDEP=gcc -MM $(DEFS)
MKTAGS=ctags -R .

#find-out the compiler's name

ifneq (,$(findstring gcc, $(CC_LONGVER)))
	CC_NAME=gcc
	#transform gcc version into 2.9x or 3.0
	CC_SHORTVER=$(shell $(CC) --version | \
				 sed -e 's/[^0-9]*-\(.*\)/\1/'| \
				 sed -e 's/2\.9.*/2.9x/' -e 's/3\..\..*/3.0/')
else
	CC_NAME=$(CC)
	CC_SHORTVER=unknown
endif


# setting CFLAGS
ifeq ($(mode), release)
	#common stuff
	CFLAGS=-O9 -funroll-loops  -Wcast-align $(PROFILE) -Winline\
			#-Wmissing-prototypes \
	#if i386
ifeq	($(ARCH), i386)
		# if gcc 
ifeq		($(CC_NAME), gcc)
			#if gcc 3.0
ifeq			($(CC_SHORTVER), 3.0)
					CFLAGS+=-minline-all-stringops -malign-double \
							-malign-loops=4 \
							-march=athlon \
							#-mcpu=athlon
else
ifeq			($(CC_SHORTVER), 2.9x) #older gcc version (2.9[1-5])
$(warning 			Old gcc detected ($(CC_SHORTVER)), use  gcc 3.0.x \
					for better results)
					
					CFLAGS+=-m486 \
							-malign-loops=4
else
				#really old version
$(warning			You are using an old and unsupported gcc \
					 version ($(CC_SHORTVER)), compile at your own risk!)

endif			# CC_SHORTVER, 2.9x
endif			# CC_SHORTVER, 3.0

else		# CC_NAME, gcc
				#other compilers
$(error 			Unsupported compiler ($(CC):$(CC_NAME)), try gcc)
endif		#CC_NAME, gcc
endif	#ARCH, i386


	#if sparc64
ifeq	($(ARCH), sparc64)
			#if gcc
ifeq		($(CC_NAME), gcc)
				#if gcc 3.0
ifeq			($(CC_SHORTVER), 3.0)
					#use 32bit for now
					CFLAGS+= -mcpu=ultrasparc -mtune=ultrasparc  -m32  \
					# -mcpu=v9 or ultrasparc? # -mtune implied by -mcpu
					#-mno-epilogue #try to inline function exit code
					#-mflat # omit save/restore
					#-,faster-structs #faster non Sparc ABI structure copy ops
else			# CC_SHORTVER, 3.0
ifeq			($(CC_SHORTVER), 2.9x) #older gcc version (2.9[1-5])
$(warning 			Old gcc detected ($(CC_SHORTVER)), use  gcc 3.0.x \
					for better results)
					
					CFLAGS+= -mv8 -Wa,-xarch=v8plus
else			#CC_SHORTVER, 2.9x
				#really old version
$(warning			You are using an old and unsupported gcc \
					 version ($(CC_SHORTVER)), compile at your own risk!)
					
					CFLAGS+= -mv8 -Wa,-xarch=v8plus
endif			#CC_SHORTVER, 2.9x
endif			#CC_SHORTVER, 3.0

else		#CC_NAME, gcc
				#other compilers
$(error 			Unsupported compiler ($(CC):$(CC_NAME)), try gcc)
endif		#CC_NAME, gcc
endif	#ARCH, sparc64



# setting LDFLAGS
	LDFLAGS+=-Wl,-O2 -Wl,-E $(PROFILE) 
	# we need -fPIC -DPIC only for shared objects, we don't need them for
	# the executable file, because it's always loaded at a fixed address
	# -andrei
else	#mode,release
	CFLAGS=-g -Wcast-align -Winline $(PROFILE)
	LDFLAGS+=-g -Wl,-E $(PROFILE)
endif #mode=release


#*FLAGS used for compiling the modules
MOD_CFLAGS=-fPIC -DPIC $(CFLAGS)
MOD_LDFLAGS=-shared $(LDFLAGS)

LEX=flex
YACC=bison
YACC_FLAGS=-d -b cfg
# on linux and freebsd keep it empty (e.g. LIBS= )
# on solaris add -lxnet (e.g. LIBS= -lxnet)
LIBS=-lfl -ldl


#os specific stuff
ifeq ($(OS), Linux)
	#same as common
endif

ifeq  ($(OS), SunOS)
	ifeq ($(mode), release)
		#use these only if you're using gcc with Solaris ld
		#LDFLAGS=-O2 $(PROFILE)
		#MOD_LDFLAGS=-O2 -G
	else
		#LDFLAGS=-g $(PROFILE)
		#MOD_LDFLAGS=-g -G
	endif

	YACC=yacc
	LIBS+=-L/usr/local/lib -lxnet -lrt # or -lnsl -lsocket or -lglibc ?
	# -lrt needed for sched_yield; some systems may require -lposix4
endif

ifeq ($(OS), FreeBSD)

	YACC=yacc
	LIBS= -lfl  #dlopen is in libc

endif

ifneq (,$(findstring CYGWIN, $(OS)))
	#cygwin is the same as common
endif

