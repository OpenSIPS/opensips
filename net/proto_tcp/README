proto_tcp Module

OpenSIPS Project

Edited by

Razvan Crainea

   Copyright Â© 2015 OpenSIPS Project
     __________________________________________________________

   Table of Contents

   1. Admin Guide

        1.1. Overview
        1.2. Dependencies

              1.2.1. OpenSIPS Modules
              1.2.2. External Libraries or Applications

        1.3. Exported Parameters

              1.3.1. tcp_port (integer)
              1.3.2. tcp_send_timeout (integer)
              1.3.3. tcp_max_msg_chunks (integer)
              1.3.4. tcp_crlf_pingpong (integer)
              1.3.5. tcp_crlf_drop (integer)
              1.3.6. tcp_async (integer)
              1.3.7. tcp_async_max_postponed_chunks (integer)
              1.3.8. tcp_async_local_connect_timeout (integer)
              1.3.9. tcp_async_local_write_timeout (integer)

   2. Frequently Asked Questions

   List of Examples

   1.1. Set tcp_port parameter
   1.2. Set tcp_send_timeout parameter
   1.3. Set tcp_max_msg_chunks parameter
   1.4. Set tcp_crlf_pingpong parameter
   1.5. Set tcp_crlf_drop parameter
   1.6. Set tcp_async parameter
   1.7. Set tcp_async_max_postponed_chunks parameter
   1.8. Set tcp_async_local_connect_timeout parameter
   1.9. Set tcp_async_local_write_timeout parameter

Chapter 1. Admin Guide

1.1. Overview

   The proto_tcp module is a built-in transport module which
   implements SIP TCP-based communication. It does not handle TCP
   connections management, but only offers higher-level primitives
   to read and write SIP messages over TCP.

   Once loaded, you will be able to define TCP listeners in your
   script, by adding its IP, and optionally the listening port, in
   your configuration file, similar to this example:

...
listen=tcp:127.0.0.1            # change the listening IP
listen=tcp:127.0.0.1:5080       # change with the listening IP and port
...

1.2. Dependencies

1.2.1. OpenSIPS Modules

   The following modules must be loaded before this module:
     * None.

1.2.2. External Libraries or Applications

   The following libraries or applications must be installed
   before running OpenSIPS with this module loaded:
     * None.

1.3. Exported Parameters

1.3.1. tcp_port (integer)

   The default port to be used by all TCP listeners.

   Default value is 5060.

   Example 1.1. Set tcp_port parameter
...
modparam("proto_tcp", "tcp_port", 5065)
...

1.3.2. tcp_send_timeout (integer)

   Time in milliseconds after a TCP connection will be closed if
   it is not available for blocking writing in this interval (and
   OpenSIPS wants to send something on it).

   Default value is 100 ms.

   Example 1.2. Set tcp_send_timeout parameter
...
modparam("proto_tcp", "tcp_send_timeout", 200)
...

1.3.3. tcp_max_msg_chunks (integer)

   The maximum number of chunks that a SIP message is expected to
   arrive via TCP. If a packet is received more fragmented than
   this, the connection is dropped (either the connection is very
   overloaded and this leads to high fragmentation - or we are the
   victim of an ongoing attack where the attacker is sending the
   traffic very fragmented in order to decrease our performance).

   Default value is 4.

   Example 1.3. Set tcp_max_msg_chunks parameter
...
modparam("proto_tcp", "tcp_max_msg_chunks", 8)
...

1.3.4. tcp_crlf_pingpong (integer)

   Send CRLF pong (\r\n) to incoming CRLFCRLF ping messages over
   TCP. By default it is enabled (1).

   Default value is 1 (enabled).

   Example 1.4. Set tcp_crlf_pingpong parameter
...
modparam("proto_tcp", "tcp_crlf_pingpong", 0)
...

1.3.5. tcp_crlf_drop (integer)

   Drop CRLF (\r\n) ping messages. When this parameter is enabled,
   the TCP layer drops packets that contains a single CRLF
   message. If a CRLFCRLF message is received, it is handled
   according to the tcp_crlf_pingpong parameter.

   Default value is 0 (disabled).

   Example 1.5. Set tcp_crlf_drop parameter
...
modparam("proto_tcp", "tcp_crlf_drop", 1)
...

1.3.6. tcp_async (integer)

   If the TCP connect and write operations should be done in an
   asynchronous mode (non-blocking connect and write). If
   disabled, OpenSIPS will block and wait for TCP operations like
   connect and write.

   Default value is 1 (enabled).

   Example 1.6. Set tcp_async parameter
...
modparam("proto_tcp", "tcp_async", 0)
...

1.3.7. tcp_async_max_postponed_chunks (integer)

   If tcp_async is enabled, this specifies the maximum number of
   SIP messages that can be stashed for later/async writing. If
   the connection pending writes exceed this number, the
   connection will be marked as broken and dropped.

   Default value is 32.

   Example 1.7. Set tcp_async_max_postponed_chunks parameter
...
modparam("proto_tcp", "tcp_async_max_postponed_chunks", 16)
...

1.3.8. tcp_async_local_connect_timeout (integer)

   If tcp_async is enabled, this specifies the number of
   milliseconds that a connect will be tried in blocking mode
   (optimization). If the connect operation lasts more than this,
   the connect will go to async mode and will be passed to TCP
   MAIN for polling.

   Default value is 100 ms.

   Example 1.8. Set tcp_async_local_connect_timeout parameter
...
modparam("proto_tcp", "tcp_async_local_connect_timeout", 200)
...

1.3.9. tcp_async_local_write_timeout (integer)

   If tcp_async is enabled, this specifies the number of
   milliseconds that a write op will be tried in blocking mode
   (optimization). If the write operation lasts more than this,
   the write will go to async mode and will be passed to TCP MAIN
   for polling.

   Default value is 10 ms.

   Example 1.9. Set tcp_async_local_write_timeout parameter
...
modparam("proto_tcp", "tcp_async_local_write_timeout", 100)
...

Chapter 2. Frequently Asked Questions

   2.1.

       After switching to OpenSIPS 2.1, I'm getting this error:
       "listeners found for protocol tcp, but no module can handle it"

       You need to load the "proto_tcp" module. In your script, make
       sure you do a loadmodule "proto_tcp.so" after setting the
       mpath.

   2.2.

       I cannot locate "proto_tcp.so". Where is it?

       The "proto_udp" and "proto_tcp" modules are simply built into
       the opensips binary by default. They are not available as
       shared libraries, but look like modules for code consistency
       reasons.
