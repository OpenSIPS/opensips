<!-- Module User's Guide -->

<chapter>

	<title>&adminguide;</title>

	<section>
	<title>Overview</title>
	<para>
		The <emphasis role='bold'>proto_tcp</emphasis> module is a built-in
		transport module which implements SIP TCP-based communication. It does
		not handle TCP connections management, but only offers higher-level
		primitives to read and write SIP messages over TCP.
	</para>
	</section>
	<para>
		Once loaded, you will be able to define TCP listeners in your script,
		by adding its IP, and optionally the listening port, in your configuration
		file, similar to this example:
	<para>
		<programlisting format="linespecific">
...
listen=tcp:127.0.0.1 		# change the listening IP
listen=tcp:127.0.0.1:5080	# change with the listening IP and port
...
</programlisting>
	</para>
	</para>

	<section>
	<title>Dependencies</title>
	<section>
		<title>&osips; Modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>None</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>

	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be installed before
		running &osips; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>None</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>

	<section>
	<title>Exported Parameters</title>
	<section>
		<title><varname>tcp_port</varname> (integer)</title>
		<para>
		The default port to be used by all TCP listeners.
		</para>
		<para>
		<emphasis>
			Default value is 5060.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>tcp_port</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("proto_tcp", "tcp_port", 5065)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>tcp_send_timeout</varname> (integer)</title>
		<para>
		Time in milliseconds after a TCP connection will be closed if it is
		not available for blocking writing in this interval (and &osips; wants
		to send something on it).
		</para>
		<para>
		<emphasis>
			Default value is 100 ms.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>tcp_send_timeout</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("proto_tcp", "tcp_send_timeout", 200)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>tcp_max_msg_chunks</varname> (integer)</title>
		<para>
			The maximum number of chunks that a SIP message is expected to
			arrive via TCP. If a packet is received more fragmented than this,
			the connection is dropped (either the connection is very
			overloaded and this leads to high fragmentation - or we are the
			victim of an ongoing attack where the attacker is sending the
			traffic very fragmented in order to decrease our performance).
		</para>
		<para>
		<emphasis>
			Default value is 4.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>tcp_max_msg_chunks</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("proto_tcp", "tcp_max_msg_chunks", 8)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>tcp_crlf_pingpong</varname> (integer)</title>
		<para>
			Send CRLF pong (\r\n) to incoming CRLFCRLF ping messages over TCP.
			By default it is enabled (1).
		</para>
		<para>
		<emphasis>
			Default value is 1 (enabled).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>tcp_crlf_pingpong</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("proto_tcp", "tcp_crlf_pingpong", 0)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>tcp_crlf_drop</varname> (integer)</title>
		<para>
			Drop CRLF (\r\n) ping messages. When this parameter is enabled,
			the TCP layer drops packets that contains a single CRLF message.
			If a CRLFCRLF message is received, it is handled according to the
			<emphasis>tcp_crlf_pingpong</emphasis> parameter.
		</para>
		<para>
		<emphasis>
			Default value is 0 (disabled).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>tcp_crlf_drop</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("proto_tcp", "tcp_crlf_drop", 1)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>tcp_async</varname> (integer)</title>
		<para>
			If the TCP connect and write operations should be done in an
			asynchronous mode (non-blocking connect and
			write). If disabled, OpenSIPS will block and wait for TCP 
			operations like connect and write.
		</para>
		<para>
		<emphasis>
			Default value is 1 (enabled).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>tcp_async</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("proto_tcp", "tcp_async", 0)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>tcp_async_max_postponed_chunks</varname> (integer)</title>
		<para>
			If <emphasis>tcp_async</emphasis> is enabled, this specifies the
			maximum number of SIP messages that can be stashed for later/async
			writing. If the connection pending writes exceed this number, the
			connection will be marked as broken and dropped.
		</para>
		<para>
		<emphasis>
			Default value is 32.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>tcp_async_max_postponed_chunks</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("proto_tcp", "tcp_async_max_postponed_chunks", 16)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>tcp_async_local_connect_timeout</varname> (integer)</title>
		<para>
			If <emphasis>tcp_async</emphasis> is enabled, this specifies the
			number of milliseconds that a connect will be tried in blocking
			mode (optimization). If the connect operation lasts more than
			this, the connect will go to async mode and will be passed to TCP
			MAIN for polling.
		</para>
		<para>
		<emphasis>
			Default value is 100 ms.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>tcp_async_local_connect_timeout</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("proto_tcp", "tcp_async_local_connect_timeout", 200)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>tcp_async_local_write_timeout</varname> (integer)</title>
		<para>
			If <emphasis>tcp_async</emphasis> is enabled, this specifies the
			number of milliseconds that a write op will be tried in blocking
			mode (optimization). If the write operation lasts more than this,
			the write will go to async mode and will be passed to TCP MAIN for
			polling.
		</para>
		<para>
		<emphasis>
			Default value is 10 ms.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>tcp_async_local_write_timeout</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("proto_tcp", "tcp_async_local_write_timeout", 100)
...
</programlisting>
		</example>
	</section>
	</section>

</chapter>
