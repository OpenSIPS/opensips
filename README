The Web3 Auth Module

Jonathan Kandel

   Cellact B.V.
   <jonathan@cellact.com>

   Copyright Â© 2025 Cellact B.V.
     __________________________________________________________________

   Table of Contents

   1. Admin Guide

        1. Overview
        2. Dependencies
        3. Parameters

              3.1. authentication_rpc_url (string)
              3.2. authentication_contract_address (string)
              3.3. ens_rpc_url (string)
              3.4. ens_registry_address (string)
              3.5. ens_name_wrapper_address (string)
              3.6. contract_debug_mode (integer)
              3.7. rpc_timeout (integer)
              3.8. Network Configuration
              3.9. RPC Endpoints Reference
              3.10. Environment Variable Configuration

        4. Functions

              4.1. web3_www_authenticate(realm, method)
              4.2. web3_proxy_authenticate(realm, method)
              4.3. bind_auth_web3(api)
              4.4. digest_authenticate(msg, realm, hdr_type, method)
              4.5. check_response(username, realm, password, nonce,
                      method, uri, algorithm, response)

              4.6. ens_validate(domain, wallet_address)
              4.7. ens_get_owner(domain)

   List of Examples

   1.1. authentication_rpc_url parameter
   1.2. authentication_contract_address parameter
   1.3. ens_rpc_url parameter
   1.4. ens_registry_address parameter
   1.5. ens_name_wrapper_address parameter
   1.6. contract_debug_mode parameter
   1.7. rpc_timeout parameter
   1.8. Complete environment configuration
   1.9. web3_www_authenticate usage
   1.10. web3_proxy_authenticate usage
   1.11. API usage in C modules

Chapter 1. Admin Guide

   Table of Contents

   1. Overview
   2. Dependencies
   3. Parameters

        3.1. authentication_rpc_url (string)
        3.2. authentication_contract_address (string)
        3.3. ens_rpc_url (string)
        3.4. ens_registry_address (string)
        3.5. ens_name_wrapper_address (string)
        3.6. contract_debug_mode (integer)
        3.7. rpc_timeout (integer)
        3.8. Network Configuration
        3.9. RPC Endpoints Reference
        3.10. Environment Variable Configuration

   4. Functions

        4.1. web3_www_authenticate(realm, method)
        4.2. web3_proxy_authenticate(realm, method)
        4.3. bind_auth_web3(api)
        4.4. digest_authenticate(msg, realm, hdr_type, method)
        4.5. check_response(username, realm, password, nonce, method, uri,
                algorithm, response)

        4.6. ens_validate(domain, wallet_address)
        4.7. ens_get_owner(domain)

1. Overview

   The Web3 Auth module provides blockchain-based authentication for
   Kamailio with integrated ENS (Ethereum Name Service) support. This
   module replaces traditional password-based verification with Web3 smart
   contract calls while maintaining full SIP digest authentication
   compatibility.

   The module maintains full compatibility with standard SIP digest
   authentication while using blockchain smart contracts to verify user
   credentials. It supports all standard auth functions including
   WWW-Authenticate, Proxy-Authenticate, and various authentication
   challenges.

   Key features:
     * Blockchain authentication via Oasis Sapphire smart contracts
     * ENS domain support (alice.eth authentication)
     * Multi-network support (ENS on Ethereum, auth on Oasis)
     * RFC2617/7616 digest authentication compliance
     * Environment variable configuration for containers
     * Drop-in replacement for auth_db module

2. Dependencies

   The following modules must be loaded before this module:
     * auth - base authentication module

   External dependencies:
     * libcurl - HTTP client library for blockchain RPC calls
     * OpenSSL - cryptographic library for digest calculations

3. Parameters

   3.1. authentication_rpc_url (string)
   3.2. authentication_contract_address (string)
   3.3. ens_rpc_url (string)
   3.4. ens_registry_address (string)
   3.5. ens_name_wrapper_address (string)
   3.6. contract_debug_mode (integer)
   3.7. rpc_timeout (integer)
   3.8. Network Configuration
   3.9. RPC Endpoints Reference
   3.10. Environment Variable Configuration

3.1. authentication_rpc_url (string)

   RPC URL for the Oasis Sapphire network endpoint. Used for
   authentication contract calls via eth_call method.

   Supported Networks:
     * Oasis Sapphire Testnet: https://testnet.sapphire.oasis.dev
     * Oasis Sapphire Mainnet: https://sapphire.oasis.io

   Environment Variable: AUTHENTICATION_RPC_URL

   Default: "https://testnet.sapphire.oasis.dev"

   Example 1.1. authentication_rpc_url parameter
modparam("auth_web3", "authentication_rpc_url", "https://sapphire.oasis.io")

3.2. authentication_contract_address (string)

   Smart contract address on Oasis Sapphire that handles authentication.
   Must implement authenticateUser() and getWalletAddress() functions.

   Required Contract Interface:
function authenticateUser(
    string memory username,
    string memory realm,
    string memory method,
    string memory uri,
    string memory nonce,
    uint8 algorithm,
    bytes memory response
) public view returns (bool)

function getWalletAddress(
    string memory username
) public view returns (address)

   Environment Variable: AUTHENTICATION_CONTRACT_ADDRESS

   Default: "0xE773BB79689379d32Ad1Db839868b6756B493aea"

   Example 1.2. authentication_contract_address parameter
modparam("auth_web3", "authentication_contract_address", "0x1234567890abcdef1234
567890abcdef12345678")

3.3. ens_rpc_url (string)

   RPC URL for ENS queries. Enables multi-network authentication where ENS
   is on Ethereum while authentication contracts are on Oasis Sapphire. If
   not set, uses authentication_rpc_url for ENS queries.

   Common Endpoints:
     * Ethereum Mainnet: https://mainnet.infura.io/v3/YOUR_KEY
     * Ethereum Sepolia: https://ethereum-sepolia-rpc.publicnode.com

   Environment Variable: ENS_RPC_URL

   Default: "https://ethereum-sepolia-rpc.publicnode.com"

   Example 1.3. ens_rpc_url parameter
modparam("auth_web3", "ens_rpc_url", "https://mainnet.infura.io/v3/YOUR_KEY")

3.4. ens_registry_address (string)

   ENS Registry contract address. Standard address on Ethereum mainnet and
   testnets.

   Environment Variable: ENS_REGISTRY_ADDRESS

   Default: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"

   Example 1.4. ens_registry_address parameter
modparam("auth_web3", "ens_registry_address", "0x00000000000C2E074eC69A0dFb2997B
A6C7d2e1e")

3.5. ens_name_wrapper_address (string)

   ENS Name Wrapper contract address for wrapped domains. Different
   addresses on mainnet vs testnets.

   Network Addresses:
     * Ethereum Mainnet: 0xD4416b13d2b3a9aBae7AcD5D6C2BbDBE25686401
     * Ethereum Sepolia: 0x0635513f179D50A207757E05759CbD106d7dFcE8

   Environment Variable: ENS_NAME_WRAPPER_ADDRESS

   Default: "0x0635513f179D50A207757E05759CbD106d7dFcE8" (Sepolia)

   Example 1.5. ens_name_wrapper_address parameter
modparam("auth_web3", "ens_name_wrapper_address", "0xD4416b13d2b3a9aBae7AcD5D6C2
BbDBE25686401")

3.6. contract_debug_mode (integer)

   Enable debug logging for authentication and ENS operations. Warning:
   May log sensitive authentication data.

   Values:
     * 0 - Debug disabled
     * 1 - Debug enabled

   Environment Variable: CONTRACT_DEBUG_MODE

   Default: 1

   Example 1.6. contract_debug_mode parameter
modparam("auth_web3", "contract_debug_mode", 0)

3.7. rpc_timeout (integer)

   Timeout in seconds for RPC calls to blockchain networks. Includes both
   authentication and ENS queries.

   Recommended Values:
     * 5-10s - Development/testing
     * 15-30s - Production

   Environment Variable: RPC_TIMEOUT

   Default: 10

   Example 1.7. rpc_timeout parameter
modparam("auth_web3", "rpc_timeout", 15)

3.8. Network Configuration

   The auth_web3 module supports various network configurations for
   different deployment scenarios. You can configure authentication and
   ENS to use different networks or the same network.

   Production (Mainnet) Configuration: Use Oasis Sapphire Mainnet for
   authentication contracts and Ethereum Mainnet for ENS queries. This
   setup is ideal for production deployments with real ENS domains.

   Testing (Testnet) Configuration: Use Oasis Sapphire Testnet for
   authentication contracts and Ethereum Sepolia for ENS queries. This
   setup is perfect for development and testing with test ENS domains.

   Single Network Configuration: Use the same network for both
   authentication and ENS queries. This simplified setup is suitable when
   you don't need cross-chain ENS functionality.

   Custom Network Configuration: Use custom RPC endpoints for both
   authentication and ENS queries. This setup is useful for private
   networks or alternative providers.

3.9. RPC Endpoints Reference

   The following RPC endpoints are commonly used with the auth_web3
   module:

   Oasis Sapphire Mainnet: https://sapphire.oasis.io (Production network)

   Oasis Sapphire Testnet: https://testnet.sapphire.oasis.dev (Testing
   network)

   Ethereum Mainnet: https://mainnet.infura.io/v3/YOUR_KEY (Production
   network)

   Ethereum Sepolia: https://ethereum-sepolia-rpc.publicnode.com (Testing
   network)

   Ethereum Sepolia (Alternative): https://sepolia.infura.io/v3/YOUR_KEY
   (Testing network)

3.10. Environment Variable Configuration

   All parameters can be configured via environment variables for
   containerized deployments. Environment variables take precedence over
   modparam configurations.

   Example 1.8. Complete environment configuration
# Environment variables
AUTHENTICATION_RPC_URL="https://testnet.sapphire.oasis.dev"
AUTHENTICATION_CONTRACT_ADDRESS="0xYourContract"
ENS_RPC_URL="https://ethereum-sepolia-rpc.publicnode.com"
CONTRACT_DEBUG_MODE="0"
RPC_TIMEOUT="15"

# Minimal Kamailio config
loadmodule "auth.so"
loadmodule "auth_web3.so"

4. Functions

   4.1. web3_www_authenticate(realm, method)
   4.2. web3_proxy_authenticate(realm, method)
   4.3. bind_auth_web3(api)
   4.4. digest_authenticate(msg, realm, hdr_type, method)
   4.5. check_response(username, realm, password, nonce, method, uri,
          algorithm, response)

   4.6. ens_validate(domain, wallet_address)
   4.7. ens_get_owner(domain)

4.1.  web3_www_authenticate(realm, method)

   Verifies credentials using blockchain-based authentication via Web3
   smart contract calls with integrated ENS support. Automatically detects
   ENS names and performs domain ownership validation when applicable.
   This function operates on WWW-Authenticate headers and serves as a
   drop-in replacement for traditional www_authenticate functions.

   ENS Integration: For usernames containing "." (dot), performs ENS owner
   validation by querying ENS Registry, handling wrapped domains, and
   cross-validating with authentication contract wallet addresses.

   Return codes:
     * Positive value - Authentication successful
     * -1 - Generic error
     * -2 - Invalid credentials/blockchain verification failed
     * -3 - Stale nonce
     * -4 - No credentials
     * -5 - Network timeout

   Parameters:
     * realm (string) - Authentication realm. Use $td for REGISTER, $fd
       for other methods
     * method (string, optional) - SIP method. Defaults to request-line
       method if not set

   Return Type: integer

   This function can be used from REQUEST_ROUTE.

   Example 1.9. web3_www_authenticate usage
# Basic Web3 + ENS authentication
if (!web3_www_authenticate("$fd", "$rm")) {
    www_challenge("$fd", "0");
    exit;
}

# Enhanced error handling with specific responses
if (!web3_www_authenticate("$td", "$rm")) {
    switch ($retcode) {
        case -2:
            xlog("L_INFO", "Auth failed for $fU\n");
            www_challenge("$td", "16"); # stale=true
            break;
        case -5:
            xlog("L_ERR", "Network timeout for $fU\n");
            sl_send_reply("503", "Service Unavailable");
            exit;
        default:
            www_challenge("$td", "0");
    }
    exit;
}

# Log ENS domain authentication
if ($(fU{s.contains,"."})) {
    xlog("L_INFO", "ENS domain $fU authenticated\n");
}

4.2.  web3_proxy_authenticate(realm, method)

   Verifies credentials using blockchain-based authentication via Web3
   smart contract calls with ENS support for proxy authentication.
   Operates on Proxy-Authorization headers instead of Authorization
   headers. Includes the same ENS integration capabilities as
   web3_www_authenticate and serves as a drop-in replacement for
   traditional proxy_authenticate functions.

   Return codes: Identical to web3_www_authenticate

   Parameters:
     * realm (string) - Authentication realm. Use $td for REGISTER, $fd
       for other methods
     * method (string, optional) - SIP method. Defaults to request-line
       method if not set

   Return Type: integer

   This function can be used from REQUEST_ROUTE.

   Example 1.10. web3_proxy_authenticate usage
# Basic proxy authentication
if (!web3_proxy_authenticate("proxy.domain.com", "$rm")) {
    proxy_challenge("proxy.domain.com", "0");
    exit;
}

# Proxy routing with ENS awareness and error handling
route[RELAY] {
    if (!web3_proxy_authenticate("$fd", "$rm")) {
        switch ($retcode) {
            case -5:
                sl_send_reply("503", "Service Unavailable");
                exit;
        }
        proxy_challenge("$fd", "0");
        exit;
    }

    # Log ENS user authentication
    if ($(fU{s.contains,"."})) {
        xlog("L_INFO", "ENS user $fU authenticated via proxy\n");
    }
    t_relay();
}

4.3.  bind_auth_web3(api)

   Allows other modules to bind to the Web3 authentication API with ENS
   support. This function provides programmatic access to Web3
   authentication and ENS validation functions for other Kamailio modules.

   Parameters:
     * api (auth_web3_api_t*) - Pointer to API structure to be populated

   Return Type: integer (0 on success, -1 on failure)

   This function is intended for use by other Kamailio modules, not
   configuration scripts.

   Example 1.11. API usage in C modules
#include "modules/auth_web3/api.h"

auth_web3_api_t auth_web3_api;

// Module initialization
if (auth_web3_load_api(&auth_web3_api) != 0) {
    LM_ERR("cannot bind auth_web3 api\n");
    return -1;
}

// Use authentication API
result = web3_api.digest_authenticate(msg, &realm,
                                      HDR_AUTHORIZATION_T, &method);

4.4.  digest_authenticate(msg, realm, hdr_type, method)

   Core authentication function with ENS support. This function performs
   the main authentication logic including ENS domain validation when
   usernames contain "." characters. It handles the complete
   authentication flow from credential parsing to blockchain verification.

   Parameters:
     * msg (sip_msg_t*) - SIP message structure
     * realm (str*) - Authentication realm string
     * hdr_type (int) - Header type (HDR_AUTHORIZATION_T or
       HDR_PROXYAUTH_T)
     * method (str*) - SIP method string

   Return Type: auth_result_t (structure containing authentication result)

   This function is part of the internal API and is called by the public
   authentication functions.

4.5.  check_response(username, realm, password, nonce, method, uri,
algorithm, response)

   Low-level credential verification function. This function handles the
   detailed verification of authentication credentials including digest
   calculation and blockchain verification. It performs the core
   cryptographic operations required for authentication.

   Parameters:
     * username (str*) - Username from authentication header
     * realm (str*) - Authentication realm
     * password (str*) - Password (not used in Web3 auth)
     * nonce (str*) - Nonce value from challenge
     * method (str*) - SIP method
     * uri (str*) - Request URI
     * algorithm (str*) - Digest algorithm
     * response (str*) - Response from authentication header

   Return Type: auth_result_t (structure containing verification result)

   This function is part of the internal API and handles the cryptographic
   verification of credentials.

4.6.  ens_validate(domain, wallet_address)

   ENS domain ownership validation function. This function checks if a
   given wallet address owns the specified ENS domain by querying the ENS
   Registry and handling wrapped domains. It performs the complete ENS
   validation workflow including namehash calculation and cross-validation
   with authentication contract data.

   Parameters:
     * domain (str*) - ENS domain name (e.g., "alice.eth")
     * wallet_address (str*) - Wallet address to validate against

   Return Type: int (1 for valid ownership, 0 for invalid, -1 for error)

   This function handles complex ENS scenarios including direct ownership,
   wrapped domains, and zero address detection for unregistered domains.

4.7.  ens_get_owner(domain)

   ENS ownership resolution function. This function retrieves the owner
   address for a given ENS domain by querying the ENS Registry. It handles
   both direct ownership and wrapped domain scenarios, returning the
   actual owner address.

   Parameters:
     * domain (str*) - ENS domain name (e.g., "alice.eth")

   Return Type: str* (pointer to owner address string, NULL if not found)

   This function implements proper ENS namehash calculation according to
   EIP-137 and handles the complete ownership resolution workflow
   including wrapped domain detection.

Chapter 2. Frequently Asked Questions

   2.1. How does ENS integration work?
   2.2. Which networks are supported?
   2.3. What smart contract interface is required?
   2.4. What happens if networks are down?
   2.5. Do SIP clients need modifications?
   2.6. How do I troubleshoot authentication failures?
   2.7. Is this suitable for production?
   2.8. How do I configure for containers?
   2.9. Can I use free RPC providers?
   2.10. What are common troubleshooting scenarios?
   2.11. What do the error codes mean?
   2.12. Where can I find more about Kamailio?
   2.13. Where can I post a question about this module?
   2.14. How can I report a bug?

   2.1.

   How does ENS integration work?

   ENS integration allows authentication using domain names like
   "alice.eth". The module detects ENS names (containing "."), queries ENS
   Registry for ownership, handles wrapped domains, and validates that the
   ENS owner matches the wallet address in your authentication contract.

   2.2.

   Which networks are supported?

   Authentication: Only Oasis Sapphire (testnet/mainnet) due to
   confidential smart contract requirements.

   ENS: Ethereum mainnet, Sepolia testnet, or any network with ENS
   contracts deployed.

   2.3.

   What smart contract interface is required?

   Your contract must implement:
function authenticateUser(
    string memory username, string memory realm, string memory method,
    string memory uri, string memory nonce, uint8 algorithm,
    bytes memory response
) public view returns (bool)

function getWalletAddress(string memory username)
    public view returns (address)

   2.4.

   What happens if networks are down?

   Authentication fails after the configured timeout. Use reliable RPC
   providers, appropriate timeout values, and implement fallback
   authentication for high availability production environments.

   2.5.

   Do SIP clients need modifications?

   No. The module maintains full RFC 2617/7616 compatibility. Clients use
   standard digest authentication. ENS validation happens transparently on
   the server side.

   2.6.

   How do I troubleshoot authentication failures?

    1. Enable debug mode: modparam("auth_web3", "contract_debug_mode", 1)
    2. Check Kamailio logs for detailed error information
    3. Verify ENS domain ownership on etherscan.io
    4. Test RPC endpoints manually
    5. Verify contract addresses and function signatures

   2.7.

   Is this suitable for production?

   Yes, but consider: network reliability (use reliable RPC providers),
   latency (blockchain calls add 100-1000ms), security (audit smart
   contracts), and monitoring (implement comprehensive network status
   monitoring).

   2.8.

   How do I configure for containers?

   Use environment variables for all parameters:
AUTHENTICATION_RPC_URL="https://testnet.sapphire.oasis.dev"
AUTHENTICATION_CONTRACT_ADDRESS="0xYourContract"
ENS_RPC_URL="https://ethereum-sepolia-rpc.publicnode.com"
CONTRACT_DEBUG_MODE="0"
RPC_TIMEOUT="15"

# Minimal Kamailio config
loadmodule "auth.so"
loadmodule "auth_web3.so"

   2.9.

   Can I use free RPC providers?

   Free providers work for development and low-volume production but have
   rate limits and no SLA. For production, use paid providers (Infura,
   Alchemy) for better reliability. For Oasis Sapphire, use official
   endpoints.

   2.10.

   What are common troubleshooting scenarios?

   Here are the most common issues and their solutions:

   Return code -5 (Network timeout): This occurs when the RPC endpoint is
   unreachable or slow. Check your network connectivity, increase the
   rpc_timeout parameter, and use a reliable RPC provider.

   Return code -2 (Auth failed): This indicates invalid credentials or a
   contract error. Verify your contract address, check the authentication
   logic, and enable debug mode for more details.

   ENS validation fails: This happens when the domain is not owned or is
   wrapped. Check ENS ownership on etherscan.io and verify that the wallet
   matches the contract data.

   Module won't load: This is usually due to missing dependencies or
   misconfiguration. Verify that libcurl and OpenSSL are installed and
   check the module path.

   High latency: This is caused by network delays or inefficient RPC
   providers. Use a faster RPC provider, optimize network routing, and
   consider implementing caching.

   Intermittent failures: This is often due to RPC provider rate limiting.
   Upgrade to a paid RPC plan, implement retries, or use multiple
   providers for redundancy.

   No authentication header: This indicates a SIP client or header parsing
   issue. Check client configuration, verify header format, and enable
   debug logs.

   Contract call errors: This occurs with wrong contract addresses or ABI
   mismatches. Verify the contract address and check that function
   signatures match the required interface.

   2.11.

   What do the error codes mean?

   The module returns specific error codes that indicate different
   authentication states:

   Return code 1: Success - Authentication completed successfully.
   Continue processing the request.

   Return code -1: Generic Error - Check the logs for specific error
   details. Send a 500 Internal Server Error response.

   Return code -2: Auth Failed - The contract returned false or there was
   a credential mismatch. Send a 401 response with challenge
   (stale=false).

   Return code -3: Stale Nonce - The nonce has already been used or
   expired. Send a 401 response with challenge (stale=true).

   Return code -4: No Credentials - The Authorization header is missing or
   malformed. Send a 401 response with initial challenge.

   Return code -5: Network Timeout - The RPC call failed or timed out.
   Send a 503 Service Unavailable response.

   2.12.

   Where can I find more about Kamailio?

   Take a look at https://www.kamailio.org/.

   2.13.

   Where can I post a question about this module?

   First check if your question was already answered on one of our mailing
   lists:
     * User Mailing List -
       https://lists.kamailio.org/cgi-bin/mailman/listinfo/sr-users
     * Developer Mailing List -
       https://lists.kamailio.org/cgi-bin/mailman/listinfo/sr-dev

   E-mails regarding any stable Kamailio release should be sent to
   <sr-users@lists.kamailio.org> and e-mails regarding development
   versions should be sent to <sr-dev@lists.kamailio.org>.

   2.14.

   How can I report a bug?

   Please follow the guidelines provided at:
   https://github.com/kamailio/kamailio/issues.
