Web3 Authentication Extension Module for Kamailio
=================================================

This module extends Kamailio's authentication capabilities to support Web3/blockchain-based authentication with ENS (Ethereum Name Service) integration.

## Features

### Core Web3 Authentication
- Replaces traditional digest authentication with blockchain-based verification
- Uses smart contract calls to validate user credentials
- Supports multiple hashing algorithms (MD5, SHA-256, SHA-512)

### ENS Integration (NEW)
- Validates ENS names in the "From" field of SIP messages
- Queries ENS Registry for resolver addresses
- Supports ENS Name Wrapper for wrapped domains
- Cross-validates ENS ownership with Oasis authentication contract
- Returns appropriate error codes:
  - 200: Successful ENS validation and address match
  - 401: Address mismatch or authentication failure
  - 402: ENS not valid (not found, no owner, etc.)

## Module Parameters

### Basic Configuration
- `web3_rpc_url`: Blockchain RPC endpoint (default: Oasis Sapphire testnet)
- `web3_contract_address`: Oasis authentication contract address
- `web3_debug_mode`: Enable debug logging (1 = enabled, 0 = disabled)
- `web3_timeout`: RPC call timeout in seconds

### ENS Configuration (NEW)
- `ens_registry_address`: ENS Registry contract address (default: Ethereum mainnet)
- `ens_name_wrapper_address`: ENS Name Wrapper contract address (default: Ethereum mainnet)
- `ens_rpc_url`: ENS-specific RPC endpoint (optional, falls back to web3_rpc_url if not provided)

## Network Flexibility

The module supports **multi-network authentication** where ENS contracts and Oasis contracts can be on different networks:

- **ENS Network**: Configure via `ens_rpc_url` (e.g., Sepolia testnet for ENS)
- **Oasis Network**: Uses `web3_rpc_url` (e.g., Oasis Sapphire testnet)
- **Fallback**: If `ens_rpc_url` is not provided, ENS queries use the main `web3_rpc_url`

This allows you to:
- Use ENS contracts on Ethereum Sepolia testnet
- Use Oasis authentication contracts on Oasis Sapphire
- Mix and match networks as needed for your deployment

## Authentication Flow

### Standard Authentication
1. Extract digest credentials from SIP message
2. Build ABI-encoded call to authenticateUser function
3. Execute blockchain call via JSON-RPC
4. Validate response and return authentication result

### ENS Authentication Flow (NEW)
1. Extract username from "From" field (not auth username)
2. Check if username contains "." (ENS format)
3. If ENS format detected:
   a. Query ENS Registry for resolver address
   b. Check if resolver is Name Wrapper
   c. Get owner from Name Wrapper or Registry
   d. Query Oasis contract for getWalletAddress(username)
   e. Compare ENS owner with Oasis wallet address
4. If not ENS format, fallback to standard authentication

## Usage

### Kamailio Configuration Example

```
loadmodule "web3_auth_ext.so"

# Basic configuration
modparam("web3_auth_ext", "web3_rpc_url", "https://testnet.sapphire.oasis.dev")
modparam("web3_auth_ext", "web3_contract_address", "0xYourContractAddress")

# ENS configuration
modparam("web3_auth_ext", "ens_registry_address", "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e")
modparam("web3_auth_ext", "ens_name_wrapper_address", "0x0635513f179D50A207757E05759CbD106d7dFcE8")

# ENS network configuration (optional - for different networks)
modparam("web3_auth_ext", "ens_rpc_url", "https://ethereum-sepolia-rpc.publicnode.com")

# Debug mode
modparam("web3_auth_ext", "web3_debug_mode", 1)

# In your route block
route[AUTH] {
    if (!web3_www_authenticate("$td", "$rm")) {
        switch ($retcode) {
            case -402:
                sl_send_reply("402", "ENS domain not valid");
                exit;
            case -401:
                sl_send_reply("401", "Unauthorized");
                exit;
            default:
                sl_send_reply("500", "Authentication error");
                exit;
        }
    }
    # Authentication successful, continue processing
}
```

## Smart Contract Requirements

### Oasis Authentication Contract
Must implement:
```solidity
function authenticateUser(
    string memory username,
    string memory realm,
    string memory method,
    string memory uri,
    string memory nonce,
    uint8 algo,
    bytes memory response
) public view returns (bool);

function getWalletAddress(
    string memory username
) public view returns (address);
```

### ENS Integration
- Connects to standard ENS Registry and Name Wrapper contracts
- Queries resolver addresses and ownership information
- Validates ENS domains against registered wallet addresses

## Error Handling

- Standard HTTP auth error codes for compatibility
- Specific 402 error code for ENS validation failures
- Detailed logging in debug mode
- Graceful fallback to standard authentication for non-ENS usernames

## Security Features

- Cross-validation between ENS ownership and contract registration
- Protection against ENS spoofing attacks
- Validation of zero addresses (0x000...000)
- Comprehensive error checking and logging

## Dependencies

- libcurl for HTTP/RPC calls
- Kamailio core and auth module APIs
- Standard C libraries 