#
# iptel.org real world configuration
#
# $Id$
#

debug=9          # debug level (cmd line: -dddddddddd)
fork=yes
log_stderror=yes	# (cmd line: -E)
check_via=yes     # (cmd. line: -v)
dns=on           # (cmd. line: -r)
rev_dns=yes      # (cmd. line: -R)
port=5060
children=1

# advertise IP address in Via (as opposed to advertising DNS name
# which is annoying for downstream servers and some phones can
# not handle DNS at all)
listen=195.37.77.101

loadmodule "modules/sl/sl.so"
loadmodule "modules/print/print.so"
loadmodule "modules/tm/tm.so"
loadmodule "modules/rr/rr.so"
loadmodule "modules/maxfwd/maxfwd.so"
loadmodule "modules/mysql/mysql.so"
loadmodule "modules/usrloc/usrloc.so"
loadmodule "modules/auth/auth.so"


route{

	# special measure for cebit ... relay all traffic
	# for 'cebit' to CSPS as it is able of forking
	# which we can't handle yet
	if (uri=~"sip:cebit@") {
		forward("fox.iptel.org", 5061 );
		break;
	};



	# filter local stateless ACK generated by authentication of mf replies
	sl_filter_ACK();

	# filter too old messages
        log("Checking maxfwd\n");
	if (!mf_process_maxfwd_header("10")) {
		log("Too many hops\n");
		sl_send_reply("483","Too Many Hops");
		break;
	};

        # Do strict routing if route headers present
	rewriteFromRoute();

	# divert voicemail requests
        if (uri=~"mail\.iptel\.org" | uri=~":6060") {
		log("Request is for voicemail\n");
		forward("fox.iptel.org", 6060);
	} else {
		# process requests for iptel.org (note the wildcard in
		# the regex end -- that captures URIs which have port
		# numbers or parameters in them); also include gateway
		# here too -- we RR to the gateway which means that its
		# address shows up in d-uri of subsequent requests after
		# having called rewriteFromRoute and we want the requests
		# to go through our PSTN authorization code
		if (uri=~"[@:]iptel\.org([;:].*)*" | uri=~"[@:]@195\.37\.77\.101([;:].*)*" |
			uri=~"@195.37.77.110([;:].*)*" ) {
			log("Request is for iptel.org\n");	

			# registers always MUST be authenticated to
			# avoid stealing incoming calls	
			if (method=="REGISTER") {
				log("Request is REGISTER\n");
				if (!authorize("iptel.org")) {
	            			log("REGISTER has no credentials, sending challenge\n");
                    			challenge("iptel.org");
					break;
				};
				# prohibit attempts to grab someone else's address 
				# using someone else's valid credentials
				if (!check_to()) {
					log("Cheating attempt\n");
					sl_send_reply("403", "What a nasty guy you are");
					break;
				};
					
				# update Contact database
	        		log("REGISTER is authorized, saving location\n");
				save_contact("location");
				break;
			};

			# various aliases (might use a database in future)
			if (uri=~"sip:9040@.*") {
				setuser("jiri");
			};

			# now it's about PSTN destinations through our gateway
			if (uri=~"sip:[0-9]+@.*") {
				# free call destinations ... no authentication needed
				if (uri=~"sip:001795061546@.*" | uri=~"sip:[79][0-9][0-9][0-9]@.*") {
					log("Free PSTN\n");
				} else {
					# all other PSTN destinations only for authenticated users
					# (Cisco GW, which has no digest support, is authenticated
					# by its IP address -- that's for sure not very strong;
					# wth confirmed that we filter packets coming from outside
					# and bearing SRC IP address of a Fokus network)
					if (!(src_ip==195.37.77.110) & !(authorize("iptel.org"))) {
						challenge("iptel.org");
						break;
					};
				
					# does the authenticated user have a permission for local
					# calls? (i.e., is he in the "local" group?)
					if (uri=~"sip:0[1-9][0-9]+@.*") {
						if (!is_in_group("local")) {
							sl_send_reply("403", "Toodle Noodle...");
							break;
						};
					# the same for long-distance
					} else if (uri=~"sip:00[1-9][0-9]+@.*") {
						if (!is_in_group("ld")) {
							sl_send_reply("403", "Toodle Noodle...");
							break;
						};
					# the same for international calls
					} else if (uri=~"sip:000[1-9][0-9]+@.*") {
						if (!is_in_group("int")) {
							sl_send_reply("403", "Toodle Noodle...");
							break;
						};
					# everything else (e.g., interplanetary calls) is denied
					} else {
						sl_send_reply("403", "Toodle Noodle...");
						break;
					};
				};
				# requests to gateway must be record-route because the GW accepts
				# only reqeusts coming from our proxy
				if (method=="INVITE")
					addRecordRoute();
				# if you have passed through all the checks, let your call go to GW!
				rewritehostport("195.37.77.110:5060");
			} else {
				

				# native SIP destinations are handled using our USRLOC DB
				if (!lookup_contact("location")) {
						log("Unable to lookup contact, sending 404\n");
						sl_send_reply("404", "Not Found");
						break;
				};
			};
                } else {
			# outbound requests are allowed only for our users -- we don't
			# support relaying and don't like strangers bothering us
			# with resolving DNS
			log("that's a request to outside");
			if (!(src_ip==195.37.77.110) & !(authorize("iptel.org"))) {
				challenge("iptel.org");
				break;
			};
			# there should be check_from here too -- but I'm to tired
			# to test it tonight
		};

		# we now know we may, we now where, let it go out now!
		t_relay();
       };
}

