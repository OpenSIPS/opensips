# This is a basic workflow to help you get started with Actions

name: Unit Tests

# Controls when the action will run. 
on:
  # Triggers the workflow on all push or pull request events
  push:
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_and_test:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    env:
      COMPILER: ${{ matrix.compiler }}
      BUILD_OS: ${{ matrix.os }}

    strategy:
      matrix:
        compiler: ['gcc', 'clang', 'gcc-9', 'gcc-10', 'clang-9', 'clang-10']
        os: [ubuntu-20.04]
        include:
          - compiler: 'gcc'
            os: ubuntu-22.04
          - compiler: 'clang'
            os: ubuntu-22.04
          - compiler: 'gcc-11'
            os: ubuntu-22.04
          - compiler: 'gcc-12'
            os: ubuntu-22.04
          - compiler: 'clang-11'
            os: ubuntu-22.04
          - compiler: 'clang-12'
            os: ubuntu-22.04
          - compiler: 'clang-13'
            os: ubuntu-22.04
          - compiler: 'clang-14'
            os: ubuntu-22.04
          - compiler: 'clang-15'
            os: ubuntu-22.04
          - compiler: 'gcc-arm64-qemu-cross'
            os: ubuntu-22.04
          - compiler: 'gcc-arm32-qemu-cross'
            os: ubuntu-22.04
          - compiler: 'clang-arm64-qemu-cross'
            os: ubuntu-22.04
          - compiler: 'clang-arm32-qemu-cross'
            os: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Cache the compiler cache
        uses: actions/cache@v3
        if: endsWith(matrix.compiler, '-qemu-cross')
        with:
          path: ccache
          key: ccache-ut-${{ matrix.os }}-${{ matrix.compiler }}-${{ github.run_id }}
          restore-keys: |
            ccache-ut-${{ matrix.os }}-${{ matrix.compiler }}

      - name: Start Docker container
        if: endsWith(matrix.compiler, '-cross')
        run: sh -x scripts/build/start_container.sh

      - name: Install dependencies
        run: |
          sh -x scripts/build/reset_sources.sh
          sh -x scripts/build/install_depends.sh

      - name: Get libtap
        run: git clone https://github.com/zorgnax/libtap.git lib/libtap

      - name: Zero out compiler cache stats
        if: endsWith(matrix.compiler, '-qemu-cross')
        run: scripts/build/zero_ccache_stats.sh

      - name: Build libtap
        run: sh -x scripts/build/build_libtap.sh lib/libtap

      - name: Build test harness
        run: sh -x scripts/build/build_test_harness.sh lib/libtap

      - name: Print compiler cache stats
        if: endsWith(matrix.compiler, '-qemu-cross')
        run: scripts/build/print_ccache_stats.sh

      - name: Run tests
        env:
          MAKE_TGT: 'test'
        run: script -e unit_tests.log -c 'sh -x scripts/build/do_build.sh DEFS_EXTRA_OPTS="-DUNIT_TESTS -fPIE -fPIC"'

      - name: Notify slack fail
        if: failure() && github.repository == 'OpenSIPS/opensips'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: devel
          status: FAILED
          color: danger

      - name: Collect test logs
        uses: actions/upload-artifact@v3
        with:
          name: unit_tests-logs_${{ matrix.os }}_${{ matrix.compiler }}
          path: |
            unit_tests.log
