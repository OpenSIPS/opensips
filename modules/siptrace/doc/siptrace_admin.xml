<!-- Module User's Guide -->

<chapter>

	<title>&adminguide;</title>

	<section>
	<title>Overview</title>
	<para>
		Offer a possibility to store incoming/outgoing SIP messages in database.
		Since version 2.2, proto_hep module needs to be loaded in order to duplicate
		with hep. All hep parameters moved inside proto_hep.
	</para>
	<para>
	There are two ways of storing information.
		<itemizedlist>
		<listitem>
		<para>
		by calling explicitely the sip_trace() method in OpenSIPS configuration
		file. In this case the original message is processed.
		</para>
		</listitem>
		<listitem>
		<para>
		by setting the flag equal with the value of 'trace_flag' (e.g.,
		setflag(TRACE_FLAG)) parameter of the module. In this case, the\
		message sent forward is processed. The logging mechanism is based on
		TM/SL callbacks, so only messages processed with TM/SL are logged.
		</para>
		</listitem>
		</itemizedlist>
	</para>

	<para>
	The tracing can be turned on/off using fifo commad.
	</para>
	<para>
	opensipsctl fifo sip_trace on
	</para>
	<para>
	opensipsctl fifo sip_trace off
	</para>
	</section>
	<section>
	<title>Dependencies</title>
	<section>
		<title>&osips; Modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>database module</emphasis> - mysql, postrgress,
				dbtext, unixodbc...
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>tm and sl modules</emphasis> - optional, only if
				you want to trace messages forwarded by these modules.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be installed before running
		&osips; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>None</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>
	<section>
	<title>Exported Parameters</title>
	<section>
		<title><varname>db_url</varname> (str)</title>
		<para>
		Database URL.
		</para>
		<para>
		<emphasis>
			Default value is "".
		</emphasis>
		</para>
		<example>
		<title>Set <varname>db_url</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("siptrace", "db_url", "mysql://user:passwd@host/dbname")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>trace_flag</varname> (string/integer)</title>
		<para>
		Which flag is used to mark messages to trace
		</para>
		<para>
		<emphasis>WARNING: </emphasis>Setting INT flags is deprecated!
		Use quoted strings instead!
		</para>
		<para>
		<emphasis>
			Default value is "NULL" (not set).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>trace_flag</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("siptrace", "trace_flag", "TRACE_FLAG")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>trace_on</varname> (integer)</title>
		<para>
		Parameter to enable/disable trace (on(1)/off(0))
		</para>
		<para>
		<emphasis>
			Default value is "0".
		</emphasis>
		</para>
		<example>
		<title>Set <varname>trace_on</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("siptrace", "trace_on", 1)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>enable_ack_trace</varname> (integer)</title>
		<para>
		Parameter to enable/disable tracing of statelessly received ACKs
		(on(1)/off(0))
		</para>
		<para>
		<emphasis>
			Default value is "0".
		</emphasis>
		</para>
		<example>
		<title>Set <varname>enable_ack_trace</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("siptrace", "enable_ack_trace", 1)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>traced_user_avp</varname> (str)</title>
		<para>
		The name of the AVP storing the SIP URI of the traced user. If
		the AVP is set, messages are stored in database table and
		'traced_user' column is filled with AVP's value. You can store
		the message many times for many users by having multiple values
		for this AVP.
		</para>
		<para>
		<emphasis>
			Default value is "NULL" (feature disabled).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>traced_user_avp</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("siptrace", "traced_user_avp", "$avp(123)")
modparam("siptrace", "traced_user_avp", "$avp(user)")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>trace_table_avp</varname> (str)</title>
		<para>
		The name of the AVP storing the name of the table where to
		store the SIP messages. If it is not set, the value of
		'table' parameter is used. In this way one can select
		dynamically where to store the traced messages. The table
		must exist, and must have the same structure as 'sip_trace'
		table.
		</para>
		<para>
		<emphasis>
			Default value is "NULL" (feature disabled).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>trace_table_avp</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("siptrace", "trace_table_avp", "$avp(345)")
modparam("siptrace", "trace_table_avp", "$avp(siptrace_table)")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>duplicate_uri</varname> (str)</title>
		<para>
		The address in form of SIP uri where to send a duplicate
		of traced message. It uses UDP all the time.
		</para>
		<para>
		<emphasis>
			Default value is "NULL".
		</emphasis>
		</para>
		<example>
		<title>Set <varname>duplicate_uri</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("siptrace", "duplicate_uri", "sip:10.1.1.1:5888")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>trace_local_ip</varname> (str)</title>
		<para>
			The address to be used in the fields that specify the source address
		(protocol, ip and port) for locally generated messages. If not set,
		the module sets it to the address of the socket that will be used to send
		the message. Protocol and/or port are optional and if omitted will take
		the default values: udp and 5060.
		</para>
		<para>
		<emphasis>
			Default value is "NULL".
		</emphasis>
		</para>
		<example>
		<title>Set <varname>trace_local_ip</varname> parameter</title>
		<programlisting format="linespecific">
...
#Resulting address: udp:10.1.1.1:5064
modparam("siptrace", "trace_local_ip", "10.1.1.1:5064")
...

...
#Resulting address: tcp:10.1.1.1:5060
modparam("siptrace, "trace_local_ip", "tcp:10.1.1.1")
...

...
#Resulting address: tcp:10.1.1.1:5064
modparam("siptrace", "trace_local_ip", "tcp:10.1.1.1:5064")
...

...
#Resulting address: udp:10.1.1.1:5060
modparam("siptrace", "trace_local_ip", "10.1.1.1")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>table</varname> (str)</title>
		<para>
		Name of the table where to store the SIP messages.
		</para>
		<para>
		<emphasis>
			Default value is "sip_trace".
		</emphasis>
		</para>
		<example>
		<title>Set <varname>sip_trace</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("siptrace", "table", "strace")
...
</programlisting>
		</example>
	</section>
	</section>

	<section>
	<title>Exported Functions</title>
	<section>
		<title>
		<function moreinfo="none">sip_trace()</function>
		</title>
		<para>
		Store current processed SIP message in database. It is stored in the
		form prior applying chages made to it.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, FAILURE_ROUTE, ONREPLY_ROUTE, BRANCH_ROUTE.
		</para>
		<example>
		<title><function>sip_trace()</function> usage</title>
		<programlisting format="linespecific">
...
sip_trace();
...
</programlisting>
		</example>
	</section>
	<section>
		<title>
		<function moreinfo="none">trace_dialog()</function>
		</title>
		<para>
		The function triggers the tracing of all messages belonging to a
		dialog. The function must be called for the initial request (that
		starts the dialog) and it will automatically take care of tracing
		evertyhing related to that dialog.
		</para>
		<para>
		When using this function, you do not have to explicity set any tracing
		flag or to explicitly call anothe trace function.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function>trace_dialog()</function> usage</title>
		<programlisting format="linespecific">
...
if(is_method("INVITE") &amp;&amp; !has_totag())
	trace_dialog();
...
</programlisting>
		</example>
	</section>
	<section>
                <title><varname>trace_to_database</varname> (integer)</title>
                <para>
                Parameter to enable/disable inserts to the Database from this
                OpenSIPS.
                </para>
                <para>
                In case we only want to send the SIP-Messages to the
                duplicate_uri and not store the information to the local
                database we can set this to "0".
                </para>
                <para>
                <emphasis>
                        Default value is "1".
                </emphasis>
                </para>
                <example>
                <title>Set <varname>trace_to_database</varname>parameter</title>
                <programlisting format="linespecific">
...
modparam("siptrace", "trace_to_database", 0)
...
</programlisting>
                </example>
        </section>

	<section>
                <title><varname>duplicate_with_hep</varname> (integer)</title>
                <para>
                Parameter to enable/disable homer encapsulate mode
                (on(1)/off(0))
                </para>
                <para>
                <emphasis>
                        Default value is "0".
                </emphasis>
                </para>
                <example>
                <title>Set <varname>duplicate_with_hep</varname> parameter</title>
                <programlisting format="linespecific">
...
modparam("siptrace", "duplicate_with_hep", 1)
...
</programlisting>
                </example>
        </section>
	</section>

    <section>
	<title>Exported MI Functions</title>
	<section>
		<title>
		<function moreinfo="none">sip_trace</function>
		</title>
		<para>

		</para>
		<para>
		Name: <emphasis>sip_trace</emphasis>
		</para>
		<para>Parameters: </para>
		<itemizedlist>
			<listitem><para>trace_mode : turns on/off SIP message tracing.
			Possible values are:</para>
			<itemizedlist>
				<listitem><para> on </para></listitem>
				<listitem><para> off </para></listitem>
			</itemizedlist>
			<para>The parameter is optional - if missing, the command will
			return the status of the SIP message tracing (as string
			<quote>on</quote> or <quote>off</quote> ) without changing
			anything.</para>
			</listitem>
		</itemizedlist>

		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:sip_trace:_reply_fifo_file_
		trace_mode
		_empty_line_
		</programlisting>
	</section>
	<section>
		<title>
		<function moreinfo="none">trace_to_database</function>
		</title>
		<para>

		</para>
		<para>
		Name: <emphasis>trace_to_database</emphasis>
		</para>
		<para>Parameters: </para>
		<itemizedlist>
			<listitem><para>trace_to_db_mode : turns on/off SIP message tracing into DB.
			Possible values are:</para>
			<itemizedlist>
				<listitem><para> on </para></listitem>
				<listitem><para> off </para></listitem>
			</itemizedlist>
			<para>The parameter is optional - if missing, the command will
			return the status of the SIP message tracing (as string
			<quote>on</quote> or <quote>off</quote> ) without changing
			anything. The parameter can be switched from off to on,
			if db connection was before inizialized</para>
			</listitem>
		</itemizedlist>

		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:trace_to_database:_reply_fifo_file_
		trace_to_db_mode
		_empty_line_
		</programlisting>
	</section>


	</section>

	<section>
		<title>Database setup</title>
		<para>
			Before running &osips; with siptrace, you have to setup the database
			tables where the module will store the data. For that, if the
			table were not created by the installation script or you choose
			to install everything by yourself you can use the siptrace-create.sql
			<acronym>SQL</acronym> script in the database directories in the
			opensips/scripts folder as template.
			You can also find the complete database documentation on the
			project webpage, &osipsdbdocslink;.
		</para>
	</section>

	<section>
	<title>Known issues</title>
	<para>
	Stateless forwarded messages (forward()) are not logged if you set the
	flag, use sip_trace().
	</para>
	</section>

</chapter>

