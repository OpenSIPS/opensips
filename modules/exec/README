exec Module
     __________________________________________________________

   Table of Contents

   1. Admin Guide

        1.1. Overview
        1.2. Dependencies

              1.2.1. OpenSIPS Modules
              1.2.2. External Libraries or Applications

        1.3. Exported Parameters

              1.3.1. setvars (integer)
              1.3.2. time_to_kill (integer)

        1.4. Exported Functions

              1.4.1. exec(command, [stdin], [stdout], [stderr],
                      [envavp])

              1.4.2. exec_dset(command) (DEPRECATED)
              1.4.3. exec_msg(command) (DEPRECATED)
              1.4.4. exec_avp(command[, avplist]) (DEPRECATED)
              1.4.5. exec_getenv(environment_variable[, avp])
                      (DEPRECATED)

        1.5. Exported Asyncronous Functions

              1.5.1. exec(command[,input[,output[,error[,env]]]])

        1.6. Known Issues

   2. Contributors

        2.1. By Commit Statistics
        2.2. By Commit Activity

   3. Documentation

        3.1. Contributors

   List of Tables

   2.1. Top contributors by DevScore^(1), authored commits^(2) and
          lines added/removed^(3)

   2.2. Most recently active contributors^(1) to this module

   List of Examples

   1.1. Set “setvars” parameter
   1.2. Set “time_to_kill” parameter
   1.3. exec usage
   1.4. exec_dset usage
   1.5. exec_msg usage
   1.6. exec_avp usage
   1.7. exec_getenv usage
   1.8. async exec usage

Chapter 1. Admin Guide

1.1. Overview

   The Exec module enables the execution of external commands from
   the OpenSIPS script. Any valid shell commands are accepted. The
   final input string is evaluated and executed using the
   "/bin/sh" symlink/binary. OpenSIPS may additionally pass a lot
   more information about the request using environment variables:
     * SIP_HF_<hf_name> contains value of each header field in
       request. If a header field occurred multiple times, values
       are concatenated and comma-separated. <hf_name> is in
       capital letters. Ff a header-field name occurred in compact
       form, <hf_name> is canonical.
     * SIP_TID is transaction identifier. All request
       retransmissions or CANCELs/ACKs associated with a previous
       INVITE result in the same value.
     * SIP_DID is dialog identifier, which is the same as to-tag.
       Initially, it is empty.
     * SIP_SRCIP is source IP address from which request came.
     * SIP_ORURI is original request URI.
     * SIP_RURI is current request URI (if unchanged, equal to
       original).
     * SIP_USER is userpart of current request URI.
     * SIP_OUSER is userpart of original request URI.

   NOTE: Any environment variables which are given to the exec
   module functions must be specified using the '$$' delimiter
   (e.g., $$SIP_OUSER), otherwise they will be evaluated as
   OpenSIPS pseudo-variables, throwing scripting errors.

1.2. Dependencies

1.2.1. OpenSIPS Modules

   The following modules must be loaded before this module:
     * No dependencies on other OpenSIPS modules.

1.2.2. External Libraries or Applications

   The following libraries or applications must be installed
   before running OpenSIPS with this module loaded:
     * None.

1.3. Exported Parameters

1.3.1. setvars (integer)

   Set to 1 to enable setting all above-mentioned environment
   variables for all executed commands.

   WARNING: Before enabling this parameter, make sure your
   "/bin/sh" is safe from the Shellshock bash vulnerability!!!

   Default value is 0 (disabled).

   Example 1.1. Set “setvars” parameter
...
modparam("exec", "setvars", 1)
...

1.3.2. time_to_kill (integer)

   If set, this parameter specifies the longest time (in seconds)
   that a program is allowed to execute. Once this duration is
   exceeded, the program is terminated (SIGTERM).

   NOTE: due to internal limitations, a SIGTERM will actually be
   sent to all job pids once the "time_to_kill" expiration timeout
   hits. On a standard system, this should have no side-effects,
   as pids are monotonically increasing in a slow manner, and
   OpenSIPS should run under the "opensips" user, thus rendering
   it unable to terminate non-child processes. If this is not the
   case on your system, do not use the OpenSIPS "time_to_kill"
   feature -- rather implement it within your external app!

   Default value is 0 (disabled).

   Example 1.2. Set “time_to_kill” parameter
...
modparam("exec", "time_to_kill", 20)
...

1.4. Exported Functions

1.4.1.  exec(command, [stdin], [stdout], [stderr], [envavp])

   Executes an external command. The input is passed to the
   standard input of the new process, if specified, and the output
   is saved in the output variable.

   The function waits for the external script until it provided
   all its output (not necessary to actually finish). If no output
   (standard output or standard error) is required by the
   function, it will not block at all - it will simply launch the
   external script and continue the script.

   Meaning of the parameters is as follows:
     * command - command to be executed.It can include
       pseudovariables.
     * stdin - String to be passed to the standard input of the
       command. The string can be given as a pseudovariable.
     * stdout - pseudovariable where to store the output from the
       standard output of the process.
     * stderr - pseudovariable where to store the error from the
       standard error of the process.
     * envavp - AVP which holds the values for the environment
       variables to be passed for the command. The names of the
       environment variables will be "OSIPS_EXEC_#", where "#"
       starts from 0. For example, if we push two values (e.g. "b"
       and "a") into an AVP variable, which acts like a stack,
       OSIPS_EXEC_0 will hold "a", while OSIPS_EXEC_1 will hold
       "b".

   NOTE: If expecting a multi-line formatted output, you should
   use $avp variables for the "stdout" and "stderr" parameters, to
   avoid only receiving the last lines of each stream.

   WARNING: any OpenSIPS pseudo-vars which may contain special
   bourne shell (sh/bash) characters should be placed inside
   quotes, e.g. exec("update-stats.sh '$(ct{re.subst,/'//g})'");

   WARNING: "stdin"/"stdout"/"stderr" parameters are not designed
   for large amounts of data, so one should be careful when using
   them. Because of the basic implementation, filled up pipes
   could cause a read deadlock.

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   LOCAL_ROUTE, STARTUP_ROUTE, TIMER_ROUTE, EVENT_ROUTE,
   ONREPLY_ROUTE.

   Example 1.3. exec usage
...
$avp(env) = "a";
$avp(env) = "b";
exec("ls -l", , "$var(out)", "$var(err)", "$avp(env)");
xlog("The output is $var(out)\n");
xlog("Received the following error\n$var(err)");
...
$var(input) = "input";
exec("/home/../myscript.sh", "this is my $var(input) for exec\n", , , "$
avp(env)");
...

1.4.2.  exec_dset(command) (DEPRECATED)

   WARNING - this function is deprecated and it will be remove in
   the next version - please use the exec() function ( exec() ).

   Executes an external command. The current R-URI is appended to
   the command as its last parameter. The output of the command
   will rewrite the current R-URI. Multiple lines of output lead
   to multiple branches.

   Meaning of the parameters is as follows:
     * command (string, pvar) - command to be executed. It can
       include pseudo-variables or '$$' delimited UNIX environment
       variables

   WARNING: most OpenSIPS scripting variables should be quoted
   before being passed to external commands, as in:
   exec_avp("log-call.sh '$ct'"). This may help avoid some
   unexpected behaviour (e.g. unwanted extra parameters, errors
   due to special bash characters, etc.)

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE.

   Example 1.4. exec_dset usage
...
exec_dset("ruri-changer.sh");
exec_dset("ruri-changer.sh '$ct'");
...

1.4.3.  exec_msg(command) (DEPRECATED)

   WARNING - this function is deprecated and it will be remove in
   the next version - please use the exec() function ( exec() ).

   Executes an external command. The current SIP message is passed
   to it in the standard input, no command-line parameters are
   added and the output of the command is ignored.

   See sip-server/modules/exec/etc/exec.cfg in the source tarball
   for information on usage.

   Meaning of the parameters is as follows:
     * command (string) - command to be executed. It can include
       pseudo-variables or '$$' delimited UNIX environment
       variables

   WARNING: most OpenSIPS scripting variables should be quoted
   before being passed to external commands, as in:
   exec_avp("log-call.sh '$ct'"). This may help avoid some
   unexpected behaviour (e.g. unwanted extra parameters, errors
   due to special bash characters, etc.)

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   LOCAL_ROUTE, TIMER_ROUTE, EVENT_ROUTE, ONREPLY_ROUTE.

   Example 1.5. exec_msg usage
...
exec_msg("call-logger.sh '$ct' >> /var/log/call-logger/'$rU'.calls");
...

1.4.4.  exec_avp(command[, avplist]) (DEPRECATED)

   WARNING - this function is deprecated and it will be remove in
   the next version - please use the exec() function ( exec() ).

   Executes an external command. Each output line of the command
   is saved in its corresponding AVP from avplist. If avplist is
   missing or is incomplete, the populated AVPs will be 1, 2, 3...
   or N, N+1, N+2...

   Meaning of the parameters is as follows:
     * command (string) - command to be executed. It can include
       pseudo-variables or '$$' delimited UNIX environment
       variables
     * avplist (string) - comma separated list with AVP names to
       store the result in

   WARNING: most OpenSIPS scripting variables should be quoted
   before being passed to external commands, as in:
   exec_avp("log-call.sh '$ct'"). This may help avoid some
   unexpected behaviour (e.g. unwanted extra parameters, errors
   due to special bash characters, etc.)

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   LOCAL_ROUTE, STARTUP_ROUTE, TIMER_ROUTE, EVENT_ROUTE,
   ONREPLY_ROUTE.

   Example 1.6. exec_avp usage
...
exec_avp("get-subscriber-details.sh '$rU'", "$avp(credit) $avp(contract_
model)");
...

1.4.5.  exec_getenv(environment_variable[, avp]) (DEPRECATED)

   WARNING - this function is deprecated and it will be remove in
   the next version - please use the exec() function ( exec() ).

   Obtains the value of a UNIX evironment_variable. The value is
   saved in 'avp'. If 'avp' is missing, output will be stored in
   $avp(1). If there is no such environment variable no value will
   be returned.

   Meaning of the parameters is as follows:
     * environment_variable (string) - environent variable name.
       Can also be specified as a pseudo-variable
     * avp - an AVP to store the result in

   WARNING: any OpenSIPS pseudo-vars which may contain special
   bash characters should be placed inside quotes, e.g.
   exec_getenv("'$ct'");

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   LOCAL_ROUTE, STARTUP_ROUTE, TIMER_ROUTE, EVENT_ROUTE,
   ONREPLY_ROUTE.

   Example 1.7. exec_getenv usage
...
exec_getenv("HOSTNAME");
exec_getenv("HOSTNAME", "$avp(localhost)");
...

1.5. Exported Asyncronous Functions

1.5.1.  exec(command[,input[,output[,error[,env]]]])

   Executes an external command. This function does exactly the
   same as exec() (in terms of input, output and processing), but
   in an asynchronous way. The script execution is suspended until
   the external script provided all its output. OpenSIPS waits for
   the external script to close its output stream, not necessarily
   to terminate (so the script may still be running when OpenSIPS
   resumes the script execution on "seeing" EOF on the the output
   stream).

   NOTE: this function ignore the "error" parameters for now - the
   asynchronous waiting is done only on the output stream !! This
   may be fixed in the following versions.

   To read and understand more on the asynchronous functions, how
   to use them and what are their advantages, please refer to the
   OpenSIPS online Manual.

   Example 1.8. async exec usage
{
...
async( exec("ruri-changer.sh","$ru","$ru"), resume );
}

route[resume] {
...
}

1.6. Known Issues

   When imposing an execution timeout using time_to_kill, make
   sure your "/bin/sh" is a shell which does not fork when
   executed, case in which the job itself will not be killed, but
   rather its parent shell, while the job is silently inherited by
   "init" and will continue to run. "/bin/dash" is one of these
   troublesome shell environments.

Chapter 2. Contributors

2.1. By Commit Statistics

   Table 2.1. Top contributors by DevScore^(1), authored
   commits^(2) and lines added/removed^(3)
     Name DevScore Commits Lines ++ Lines --
   1. Bogdan-Andrei Iancu (@bogdan-iancu) 43 28 634 526
   2. Liviu Chircu (@liviuchircu) 29 20 321 308
   3. Jiri Kuthan (@jiriatipteldotorg) 27 11 1579 152
   4. Daniel-Constantin Mierla (@miconda) 26 19 440 131
   5. Razvan Crainea (@razvancrainea) 16 12 306 48
   6. Jan Janak (@janakj) 16 10 463 111
   7. Ionut Ionita (@ionutrazvanionita) 15 7 612 117
   8. Andrei Pelinescu-Onciul 11 8 29 105
   9. Vlad Patrascu (@rvlad-patrascu) 9 2 46 297
   10. Henning Westerholt (@henningw) 4 2 8 8

   All remaining contributors: Walter Doekes (@wdoekes), Anca
   Vamanu, Dan Pascu (@danpascu), Elena-Ramona Modroiu, Konstantin
   Bokarius, Vlad Paiu (@vladpaiu), Andreas Granig, Julián Moreno
   Patiño, Octavian Cerna, Peter Lemenkov (@lemenkov), Edson
   Gellert Schubert, Dror Wald.

   (1) DevScore = author_commits + author_lines_added /
   (project_lines_added / project_commits) + author_lines_deleted
   / (project_lines_deleted / project_commits)

   (2) including any documentation-related commits, excluding
   merge commits. Regarding imported patches/code, we do our best
   to count the work on behalf of the proper owner, as per the
   "fix_authors" and "mod_renames" arrays in
   opensips/doc/build-contrib.sh. If you identify any
   patches/commits which do not get properly attributed to you,
   please submit a pull request which extends "fix_authors" and/or
   "mod_renames".

   (3) ignoring whitespace edits, renamed files and auto-generated
   files

2.2. By Commit Activity

   Table 2.2. Most recently active contributors^(1) to this module
                      Name                   Commit Activity
   1.  Bogdan-Andrei Iancu (@bogdan-iancu) Jul 2004 - Apr 2019
   2.  Vlad Patrascu (@rvlad-patrascu)     May 2017 - Apr 2019
   3.  Liviu Chircu (@liviuchircu)         Feb 2014 - Nov 2018
   4.  Peter Lemenkov (@lemenkov)          Jun 2018 - Jun 2018
   5.  Ionut Ionita (@ionutrazvanionita)   Oct 2014 - Feb 2017
   6.  Octavian Cerna                      Oct 2016 - Oct 2016
   7.  Julián Moreno Patiño                Feb 2016 - Feb 2016
   8.  Razvan Crainea (@razvancrainea)     Jun 2011 - Jan 2016
   9.  Walter Doekes (@wdoekes)            Mar 2014 - Sep 2015
   10. Vlad Paiu (@vladpaiu)               Mar 2015 - Mar 2015

   All remaining contributors: Anca Vamanu, Dror Wald, Dan Pascu
   (@danpascu), Daniel-Constantin Mierla (@miconda), Konstantin
   Bokarius, Edson Gellert Schubert, Henning Westerholt
   (@henningw), Elena-Ramona Modroiu, Andreas Granig, Jan Janak
   (@janakj), Andrei Pelinescu-Onciul, Jiri Kuthan
   (@jiriatipteldotorg).

   (1) including any documentation-related commits, excluding
   merge commits

Chapter 3. Documentation

3.1. Contributors

   Last edited by: Peter Lemenkov (@lemenkov), Liviu Chircu
   (@liviuchircu), Walter Doekes (@wdoekes), Bogdan-Andrei Iancu
   (@bogdan-iancu), Ionut Ionita (@ionutrazvanionita), Razvan
   Crainea (@razvancrainea), Anca Vamanu, Dror Wald, Dan Pascu
   (@danpascu), Daniel-Constantin Mierla (@miconda), Konstantin
   Bokarius, Edson Gellert Schubert, Elena-Ramona Modroiu, Jan
   Janak (@janakj).

   Documentation Copyrights:

   Copyright © 2003 FhG FOKUS
