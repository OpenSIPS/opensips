exec Module

Jiri Kuthan

   FhG FOKUS

Edited by

Jan Janak

   Copyright © 2003 FhG FOKUS
   Revision History
   Revision $Revision: 5901 $ $Date$
     __________________________________________________________

   Table of Contents

   1. Admin Guide

        1.1. Overview
        1.2. Dependencies

              1.2.1. OpenSIPS Modules
              1.2.2. External Libraries or Applications

        1.3. Exported Parameters

              1.3.1. setvars (integer)
              1.3.2. time_to_kill (integer)
              1.3.3. async (integer)

        1.4. Exported Functions

              1.4.1. exec_dset(command)
              1.4.2. exec_msg(command)
              1.4.3. exec_avp(command[, avplist])
              1.4.4. exec_getenv(environment_variable[, avp])
              1.4.5. exec(command, [output], [input],
                      [error],[envavp])

        1.5. Known Issues

   List of Examples

   1.1. Set “setvars” parameter
   1.2. Set “time_to_kill” parameter
   1.3. Set “async” parameter
   1.4. exec_dset usage
   1.5. exec_msg usage
   1.6. exec_avp usage
   1.7. exec_getenv usage
   1.8. exec usage

Chapter 1. Admin Guide

1.1. Overview

   The Exec module enables the execution of external commands from
   the OpenSIPS script. Any valid shell commands are accepted. The
   final input string is evaluated and executed using the
   "/bin/sh" symlink/binary. OpenSIPS may additionally pass a lot
   more information about the request using environment variables:
     * SIP_HF_<hf_name> contains value of each header field in
       request. If a header field occurred multiple times, values
       are concatenated and comma-separated. <hf_name> is in
       capital letters. Ff a header-field name occurred in compact
       form, <hf_name> is canonical.
     * SIP_TID is transaction identifier. All request
       retransmissions or CANCELs/ACKs associated with a previous
       INVITE result in the same value.
     * SIP_DID is dialog identifier, which is the same as to-tag.
       Initially, it is empty.
     * SIP_SRCIP is source IP address from which request came.
     * SIP_ORURI is original request URI.
     * SIP_RURI is current request URI (if unchanged, equal to
       original).
     * SIP_USER is userpart of current request URI.
     * SIP_OUSER is userpart of original request URI.

   NOTE: Any environment variables which are given to the exec
   module functions must be specified using the '$$' delimiter
   (e.g., $$SIP_OUSER), otherwise they will be evaluated as
   OpenSIPS pseudo-variables, throwing scripting errors.

1.2. Dependencies

1.2.1. OpenSIPS Modules

   The following modules must be loaded before this module:
     * No dependencies on other OpenSIPS modules.

1.2.2. External Libraries or Applications

   The following libraries or applications must be installed
   before running OpenSIPS with this module loaded:
     * None.

1.3. Exported Parameters

1.3.1. setvars (integer)

   Turn off to disable setting environment variables for executed
   commands.

   Default value is 1.

   Example 1.1. Set “setvars” parameter
...
modparam("exec", "setvars", 1)
...

1.3.2.  time_to_kill (integer)

   Specifies the longest time a program is allowed to execute. If
   the time is exceeded, the program is killed.

   Default value is 0 (disabled).

   Example 1.2. Set “time_to_kill” parameter
...
modparam("exec", "time_to_kill", 20)
...

1.3.3. async (integer)

   Turns on the asynchronous mode for the 'exec_msg' and 'exec'
   functions. All commands will be executed by a different process
   and the caller will continue its flow, without waiting for a
   response.

   Default value is 0 (disabled).

   Example 1.3. Set “async” parameter
...
modparam("exec", "async", 1)
...

1.4. Exported Functions

1.4.1.  exec_dset(command)

   Executes an external command. The current R-URI is appended to
   the command as its last parameter. The output of the command
   will rewrite the current R-URI. Multiple lines of output lead
   to multiple branches.

   Meaning of the parameters is as follows:
     * command (string, pvar) - command to be executed. It can
       include pseudo-variables or '$$' delimited UNIX environment
       variables

   WARNING: most OpenSIPS scripting variables should be quoted
   before being passed to external commands, as in:
   exec_avp("log-call.sh '$ct'"). This may help avoid some
   unexpected behaviour (e.g. unwanted extra parameters, errors
   due to special bash characters, etc.)

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE.

   Example 1.4. exec_dset usage
...
exec_dset("ruri-changer.sh");
exec_dset("ruri-changer.sh '$ct'");
...

1.4.2.  exec_msg(command)

   Executes an external command. The current SIP message is passed
   to it in the standard input, no command-line parameters are
   added and the output of the command is ignored.

   See sip-server/modules/exec/etc/exec.cfg in the source tarball
   for information on usage.

   Meaning of the parameters is as follows:
     * command (string) - command to be executed. It can include
       pseudo-variables or '$$' delimited UNIX environment
       variables

   WARNING: most OpenSIPS scripting variables should be quoted
   before being passed to external commands, as in:
   exec_avp("log-call.sh '$ct'"). This may help avoid some
   unexpected behaviour (e.g. unwanted extra parameters, errors
   due to special bash characters, etc.)

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   LOCAL_ROUTE, TIMER_ROUTE, EVENT_ROUTE, ONREPLY_ROUTE.

   Example 1.5. exec_msg usage
...
exec_msg("call-logger.sh '$ct' >> /var/log/call-logger/'$rU'.calls");
...

1.4.3.  exec_avp(command[, avplist])

   Executes an external command. Each output line of the command
   is saved in its corresponding AVP from avplist. If avplist is
   missing or is incomplete, the populated AVPs will be 1, 2, 3...
   or N, N+1, N+2...

   Meaning of the parameters is as follows:
     * command (string) - command to be executed. It can include
       pseudo-variables or '$$' delimited UNIX environment
       variables
     * avplist (string) - comma separated list with AVP names to
       store the result in

   WARNING: most OpenSIPS scripting variables should be quoted
   before being passed to external commands, as in:
   exec_avp("log-call.sh '$ct'"). This may help avoid some
   unexpected behaviour (e.g. unwanted extra parameters, errors
   due to special bash characters, etc.)

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   LOCAL_ROUTE, STARTUP_ROUTE, TIMER_ROUTE, EVENT_ROUTE,
   ONREPLY_ROUTE.

   Example 1.6. exec_avp usage
...
exec_avp("get-subscriber-details.sh '$rU'", "$avp(credit) $avp(contract_
model)");
...

1.4.4.  exec_getenv(environment_variable[, avp])

   Obtains the value of a UNIX evironment_variable. The value is
   saved in 'avp'. If 'avp' is missing, output will be stored in
   $avp(1). If there is no such environment variable no value will
   be returned.

   Meaning of the parameters is as follows:
     * environment_variable (string) - environent variable name.
       Can also be specified as a pseudo-variable
     * avp - an AVP to store the result in

   WARNING: any OpenSIPS pseudo-vars which may contain special
   bash characters should be placed inside quotes, e.g.
   exec_getenv("'$ct'");

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   LOCAL_ROUTE, STARTUP_ROUTE, TIMER_ROUTE, EVENT_ROUTE,
   ONREPLY_ROUTE.

   Example 1.7. exec_getenv usage
...
exec_getenv("HOSTNAME");
exec_getenv("HOSTNAME", "$avp(localhost)");
...

1.4.5.  exec(command, [output], [input], [error],[envavp])

   Executes an external command. The input is passed to the
   standard input of the new process, if specified, and the output
   is saved in the output variable.

   Meaning of the parameters is as follows:
     * command - command to be executed.It can include
       pseudovariables.
     * output - pseudovariable where to store the output from the
       standard output of the process. Keep in mind that if this
       parameter is set, the async paramater will not be taken in
       consideration.
     * input - String to be passed to the standard input of the
       command. The string can be given as a pseudovariable.
     * error - pseudovariable where to store the error from the
       standard error of the process.
     * envavp - Avp where to store the values for the environment
       variables to be passed for the command. The names of the
       environment variables will be "OSIPS_EXEC_#" where # will
       start from 0. For example if you store 2 values into an avp
       ("a" and "b") OSIPS_EXEC_0 will contain the first value and
       OSIPS_EXEC_1 the second value.

   WARNING: any OpenSIPS pseudo-vars which may contain special
   bash characters should be placed inside quotes, e.g.
   exec("update-stats.sh '$ct'");

   WARNING: "input"/"output"/"error" parameters are not designed
   for a large amount of data so one should be careful when using
   them because server could considerably be slowed down.

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   LOCAL_ROUTE, STARTUP_ROUTE, TIMER_ROUTE, EVENT_ROUTE,
   ONREPLY_ROUTE.

   Example 1.8. exec usage
...
$avp(env) = "a";
$avp(env) = "b";
exec("ls -l", "$var(out)",, "$avp(env)");
xlog("The output is $var(out)\n");
...
$var(input) = "input";
exec("/home/../myscript.sh",, "this is my $var(input) for exec\n", "$avp
(env)");
...

1.5. Known Issues

   When imposing an execution timeout using time_to_kill, make
   sure your "/bin/sh" is a shell which does not fork when
   executed, case in which the job itself will not be killed, but
   rather its parent shell, while the job is silently inherited by
   "init" and will continue to run. "/bin/dash" is one of these
   troublesome shell environments.
