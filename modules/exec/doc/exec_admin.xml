<!-- Module User's Guide -->

<chapter>

	<title>&adminguide;</title>

	<section>
	<title>Overview</title>
	<para>
		The Exec module enables the execution of external commands from the
		&osips; script. Any valid shell commands are accepted. The final input
		string is evaluated and executed using the "/bin/sh" symlink/binary.
		&osips; may additionally pass a lot more information about the request
		using environment variables:
	</para>
	<itemizedlist>
		<listitem>
		<para>
			SIP_HF_&lt;hf_name&gt; contains value of each header field in
			request. If a header field occurred multiple times, values are
			concatenated and comma-separated. &lt;hf_name&gt; is in capital
			letters. Ff a header-field name occurred in compact form,
			&lt;hf_name&gt; is canonical.
		</para>
		</listitem>
		<listitem>
		<para>
			SIP_TID is transaction identifier. All request retransmissions or
			CANCELs/ACKs associated with a previous INVITE result in the same
			value.
		</para>
		</listitem>
		<listitem>
		<para>
			SIP_DID is dialog identifier, which is the same as to-tag.
			Initially, it is empty.
		</para>
		</listitem>
		<listitem>
		<para>
			SIP_SRCIP is source &ip; address from which request came.
		</para>
		</listitem>
		<listitem>
		<para>
			SIP_ORURI is original request &uri;.
		</para>
		</listitem>
		<listitem>
		<para>
			SIP_RURI is <emphasis>current</emphasis> request &uri; (if
			unchanged, equal to original).
		</para>
		</listitem>
		<listitem>
		<para>
			SIP_USER is userpart of <emphasis>current</emphasis> request &uri;.
		</para>
		</listitem>
		<listitem>
		<para>
			SIP_OUSER is userpart of original request &uri;.
		</para>
		</listitem>
	</itemizedlist>
	<para>
		NOTE: Any environment variables which are given to the exec module
		functions must be specified using the '$$' delimiter (e.g., $$SIP_OUSER),
		otherwise they will be evaluated as &osips; pseudo-variables,
		throwing scripting errors.
	</para>
	</section>

	<section>
	<title>Dependencies</title>
	<section>
		<title>&osips; Modules</title>
		<para>
		The following  modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>No dependencies on other &osips; modules</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be installed before running
		&osips; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>None</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>

	<section>
	<title>Exported Parameters</title>
	<section>
		<title><varname>setvars</varname> (integer)</title>
		<para>
		Set to 1 to enable setting all above-mentioned environment variables
		for all executed commands.
		</para>
		<para>
		<emphasis role='bold'>WARNING: Before enabling this parameter, make sure
		your "/bin/sh" is safe from the Shellshock bash vulnerability!!! </emphasis>
		</para>
		<para>
		<emphasis>
			Default value is 0 (disabled).
		</emphasis>
		</para>
		<example>
		<title>Set <quote>setvars</quote> parameter</title>
		<programlisting format="linespecific">
...
modparam("exec", "setvars", 1)
...
</programlisting>
		</example>
	</section>
	<section id='time_to_kill' xreflabel='time_to_kill'>
		<title>
			<varname>time_to_kill</varname> (integer)
		</title>
		<para>
		Specifies the longest time a program is allowed to execute. If the
		time is exceeded, the program is killed (SIGTERM)
		</para>
		<para>
		<emphasis>
			Default value is 0 (disabled).
		</emphasis>
		</para>
		<example>
		<title>Set <quote>time_to_kill</quote> parameter</title>
		<programlisting format="linespecific">
...
modparam("exec", "time_to_kill", 20)
...
</programlisting>
		</example>
	</section>

	</section>
	<section>
	<title>Exported Functions</title>
	<section id="exec_sync_exec">
		<title>
		<function moreinfo="none">exec(command, [stdin], [stdout], [stderr], [envavp])</function>
		</title>
		<para>
		Executes an external command. The input is passed to the standard input of the new
		process, if specified, and the output is saved in the output variable.
		</para>
		<para>
		The function waits for the external script until it provided all its output (not
		necessary to actually finish). If no output (standard output or standard error)
		is required by the function, it will not block at all - it will simply launch the
		external script and continue the script.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>command</emphasis> - command to be executed.It can include
			pseudovariables.
			</para>
		</listitem>
		<listitem>
			<para><emphasis>stdin</emphasis> - String to be passed to the standard input
			of the command. The string can be given as a pseudovariable.
			</para>
		</listitem>
		<listitem>
			<para><emphasis>stdout</emphasis> - pseudovariable where to store the output
			from the standard output of the process.
			</para>
		</listitem>
		<listitem>
			<para><emphasis>stderr</emphasis> - pseudovariable where to store the error from
			the standard error of the process.
			</para>
		</listitem>
		<listitem>
			<para><emphasis>envavp</emphasis> - Avp where to store the values for the
			environment variables to be passed for the command. The names of the environment
			variables will be "OSIPS_EXEC_#" where # will start from 0. For example if you
			store 2 values into an avp ("a" and "b") OSIPS_EXEC_0 will contain the first value
			and OSIPS_EXEC_1 the second value.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		WARNING: any OpenSIPS pseudo-vars which may contain special bourne shell (sh/bash)
		characters should be placed inside quotes, e.g.
		exec("update-stats.sh '$(ct{re.subst,/'//g})'");
		</para>
		<para>
		WARNING: "stdin"/"stdout"/"stderr" parameters are not designed for large amounts of
		data, so one should be careful when using them. Because of the basic implementation,
		filled up pipes could cause a read deadlock.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
		LOCAL_ROUTE, STARTUP_ROUTE, TIMER_ROUTE, EVENT_ROUTE, ONREPLY_ROUTE.
		</para>
		<example>
		<title><function moreinfo="none">exec</function> usage</title>
		<programlisting format="linespecific">
...
$avp(env) = "a";
$avp(env) = "b";
exec("ls -l", , "$var(out)", "$var(err)", "$avp(env)");
xlog("The output is $var(out)\n");
xlog("Received the following error\n$var(err)");
...
$var(input) = "input";
exec("/home/../myscript.sh", "this is my $var(input) for exec\n", , , "$avp(env)");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">exec_dset(command) (DEPRECATED)</function>
		</title>
		<para>
		WARNING - this function is deprecated and it will be remove in the next
		version - please use the exec() function (  <xref linkend="exec_sync_exec"/> ).
		</para>
		<para>
		Executes an external command. The current &ruri; is appended to the command
		as its last parameter. The output of the command will rewrite the current R-URI.
		Multiple lines of output lead to multiple branches.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>command (string, pvar)</emphasis> - command to be
			executed. It can include pseudo-variables or '$$' delimited UNIX
			environment variables
			</para>
		</listitem>
		</itemizedlist>
		<para>
		WARNING: most OpenSIPS scripting variables should be quoted before being
		passed to external commands, as in: exec_avp("log-call.sh '$ct'").
		This may help avoid some unexpected behaviour
		(e.g. unwanted extra parameters, errors due to special bash characters, etc.)
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, FAILURE_ROUTE.
		</para>
		<example>
		<title><function moreinfo="none">exec_dset</function> usage</title>
		<programlisting format="linespecific">
...
exec_dset("ruri-changer.sh");
exec_dset("ruri-changer.sh '$ct'");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">exec_msg(command) (DEPRECATED)</function>
		</title>
		<para>
		WARNING - this function is deprecated and it will be remove in the next
		version - please use the exec() function (  <xref linkend="exec_sync_exec"/> ).
		</para>
		<para>
		Executes an external command. The current SIP message is passed to it in
		the standard input, no command-line parameters are added and the output
		of the command is ignored.
		</para>
		<para>
		See sip-server/modules/exec/etc/exec.cfg in the source tarball for
		information on usage.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>command (string)</emphasis> - command to be executed. It
			can include pseudo-variables or '$$' delimited UNIX
			environment variables
			</para>
		</listitem>
		</itemizedlist>
		<para>
		WARNING: most OpenSIPS scripting variables should be quoted before being
		passed to external commands, as in: exec_avp("log-call.sh '$ct'").
		This may help avoid some unexpected behaviour
		(e.g. unwanted extra parameters, errors due to special bash characters, etc.)
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, FAILURE_ROUTE, LOCAL_ROUTE,
		TIMER_ROUTE, EVENT_ROUTE, ONREPLY_ROUTE.
		</para>
		<example>
		<title><function moreinfo="none">exec_msg</function> usage</title>
		<programlisting format="linespecific">
...
exec_msg("call-logger.sh '$ct' >> /var/log/call-logger/'$rU'.calls");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">exec_avp(command[, avplist]) (DEPRECATED)</function>
		</title>
		<para>
		WARNING - this function is deprecated and it will be remove in the next
		version - please use the exec() function (  <xref linkend="exec_sync_exec"/> ).
		</para>
		<para>
		Executes an external command. Each output line of the command
		is saved in its corresponding AVP from <emphasis>avplist</emphasis>.
		If <emphasis>avplist</emphasis> is missing or is incomplete, the
		populated AVPs will be 1, 2, 3... or N, N+1, N+2...
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>command (string)</emphasis> - command to be
			executed. It can include pseudo-variables or '$$' delimited UNIX
			environment variables
			</para>
		</listitem>
		<listitem>
			<para><emphasis>avplist (string)</emphasis> - comma separated list with AVP
			names to store the result in
			</para>
		</listitem>
		</itemizedlist>
		<para>
		WARNING: most OpenSIPS scripting variables should be quoted before being
		passed to external commands, as in: exec_avp("log-call.sh '$ct'").
		This may help avoid some unexpected behaviour
		(e.g. unwanted extra parameters, errors due to special bash characters, etc.)
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
		LOCAL_ROUTE, STARTUP_ROUTE, TIMER_ROUTE, EVENT_ROUTE, ONREPLY_ROUTE.
		</para>
		<example>
		<title><function moreinfo="none">exec_avp</function> usage</title>
		<programlisting format="linespecific">
...
exec_avp("get-subscriber-details.sh '$rU'", "$avp(credit) $avp(contract_model)");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">exec_getenv(environment_variable[, avp]) (DEPRECATED)</function>
		</title>
		<para>
		WARNING - this function is deprecated and it will be remove in the next
		version - please use the exec() function (  <xref linkend="exec_sync_exec"/> ).
		</para>
		<para>
		Obtains the value of a UNIX evironment_variable. The value is saved
		in 'avp'. If 'avp' is missing, output will be stored in $avp(1). If there
		is no such environment variable no value will be returned.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>environment_variable (string)</emphasis> -
				environent variable name. Can also be specified as a pseudo-variable
		</para>
		</listitem>
		<listitem>
			<para><emphasis>avp</emphasis> - an AVP to store the  result in
			</para>
		</listitem>
		</itemizedlist>
		<para>
		WARNING: any OpenSIPS pseudo-vars which may contain special bash
		characters should be placed inside quotes, e.g. exec_getenv("'$ct'");
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
		LOCAL_ROUTE, STARTUP_ROUTE, TIMER_ROUTE, EVENT_ROUTE, ONREPLY_ROUTE.
		</para>
		<example>
		<title><function moreinfo="none">exec_getenv</function> usage</title>
		<programlisting format="linespecific">
...
exec_getenv("HOSTNAME");
exec_getenv("HOSTNAME", "$avp(localhost)");
...
</programlisting>
		</example>
	</section>
	</section>

	<section>
	<title>Exported Asyncronous Functions</title>
	<section>
		<title>
		<function moreinfo="none">exec(command[,input[,output[,error[,env]]]])</function>
		</title>
		<para>
		Executes an external command. This function does exactly the same as
		<xref linkend="exec_sync_exec"/> (in terms of input, output and processing),
		but in an asynchronous way. The script execution is suspended until the external script
		provided all its output. OpenSIPS waits for the external script to close its output
		stream, not necessarily to terminate (so the script may still be running when OpenSIPS
		resumes the script execution on "seeing" EOF on the the output stream).
		</para>
		<para>
		NOTE: this function ignore the "error" parameters for now - the asynchronous waiting is
		done only on the output stream !! This may be fixed in the following versions.
		</para>
		<para>
		To read and understand more on the asynchronous functions, how to use them and what are their
		advantages, please refer to the OpenSIPS online Manual.
		</para>
		<example>
		<title><function moreinfo="none">async exec</function> usage</title>
		<programlisting format="linespecific">
{
...
async( exec("ruri-changer.sh","$ru","$ru"), resume );
}

route[resume] {
...
}
</programlisting>
		</example>
	</section>
	</section>

	<section>
	<title>Known Issues</title>
	<para>
		When imposing an execution timeout using
		<emphasis role='bold'><xref linkend="time_to_kill"/></emphasis>,
		make sure your "/bin/sh" is a shell which does not fork when executed,
		case in which the job itself will not be killed, but rather its parent shell,
		while the job is silently inherited by "init" and will continue to run.
		"/bin/dash" is one of these troublesome shell environments.
	</para>
	</section>
</chapter>

