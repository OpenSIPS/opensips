#
# $Id$
#
# simple quick-start config script
#

 # ----------- global configuration parameters ------------------------

 debug=9          # debug level (cmd line: -dddddddddd)
 fork=no
 log_stderror=yes# (cmd line: -E)
 check_via=no    # (cmd. line: -v)
 dns=no           # (cmd. line: -r)
 rev_dns=no      # (cmd. line: -R)
 port=5060
 children=4
 fifo="/tmp/ser_fifo"

 listen=193.175.135.170

 # ------------------ module loading ----------------------------------

 # Uncomment this if you want to use SQL database
 loadmodule "modules/mysql/mysql.so"

 loadmodule "modules/sl/sl.so"
 loadmodule "modules/tm/tm.so"
 loadmodule "modules/rr/rr.so"
 loadmodule "modules/maxfwd/maxfwd.so"
 loadmodule "modules/usrloc/usrloc.so"
 loadmodule "modules/registrar/registrar.so"
 loadmodule "modules/pdt/pdt.so"

 # Uncomment this if you want digest authentication
 # mysql.so must be loaded !
 #loadmodule "/usr/lib/ser/modules/auth.so"

 # ----------------- setting module-specific parameters ---------------

# -- registrar params --

modparam("registrar", "default_expires", 120)
modparam("registrar", "use_domain", 0)

# -- usrloc params --
modparam("usrloc", "use_domain", 0)
modparam("usrloc", "db_mode", 0)

 # -- auth params --
 # Uncomment if you are using auth module
 #
 #modparam("auth", "secret", "alsdkhglaksdhfkloiwr")
 #modparam("auth", "calculate_ha1", yes)
 #
 # If you set "calculate_ha1" parameter to yes (which true in this config), 
 # uncomment also the following parameter)
 #
 #modparam("auth", "password_column", "password")


 modparam("pdt", "db_url", "sql://root@g127.0.0.1/pdt")    
 modparam("pdt", "db_table", "domains")
 modparam("pdt", "prefix", "2")
 modparam("pdt", "start_range", 2000)
 modparam("pdt", "hsize_2pow", 2)
 
 # -------------------------  request routing logic -------------------

 # main routing logic

 route{
         
	 # initial sanity checks -- messages with
         # max_forwars==0, or excessively long requests
     if (!mf_process_maxfwd_header("5")) {
          sl_send_reply("483","Too Many Hops");
          break;
     };
     if (len_gt( max_len )) {
          sl_send_reply("513", "Message too big");
          break;
     };

    # Do strict routing if pre-loaded route headers present
	loose_route();
	if (uri=~"[@:]nenobec\.fokus\.gmd\.de([;:].*)*" |
		uri=~"[@:]nenobec\.fokus\.fraunhofer\.de([;:].*)*" |
		uri=~"[@:]193\.175\.135\.170([;:].*)*")
	{
		# for testing purposes, simply okay all
		# REGISTERs
		if (method=="REGISTER")
		{
			if (t_newtran()) 
			{
				save("location");
				log("REGISTER received ->reply okay\n");
			} else {
				sl_send_reply("200", "OKX");
			};
			break;
		};
																				
		if(!prefix2domain())
		{
    		#log("PDT: Wrong prefix ...");
	   	    sl_send_reply("404", "Not found - PDT");
		    break;
		};
	    if (uri=~"[@:]nenobec\.fokus\.gmd\.de([;:].*)*" |
	        uri=~"[@:]nenobec\.fokus\.fraunhofer\.de([;:].*)*" |
		    uri=~"[@:]193\.175\.135\.170([;:].*)*")
		{
			if(!lookup("location")) 
			{
				sl_send_reply("404", "Not found - NE");
				break;
			};
		};
						
	};
	record_route();
    
	# forward to current uri now
	if (!t_relay()) {
    	sl_reply_error();
	};
	# forward(uri:host, uri:port);

}

