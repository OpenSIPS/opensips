<!-- Module User's Guide -->

<chapter>
	
	<title>&adminguide;</title>
	
	<section>
	<title>Overview</title>
	<para>
		The module implements SIP based operations over the messages
		processed by OpenSIPS. SIP is a text based protocol and the module
		provides a large set of very useful functions to manipulate the
		message at SIP level, e.g., inserting new headers or deleting them,
		check for method type, etc.
	</para>
	</section>

	<section>
	<title>Dependencies</title>
	<section>
		<title>&osips; Modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>No dependencies on other &osips; modules</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be installed before 
		running &osips; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>None</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>


	<section>
	<title>Exported Functions</title>
	<section>
		<title>
		<function moreinfo="none">filter_body(content_type)</function>
		</title>
		<para>
		Filters multipart body by leaving out all other body
		parts except the first body part of given type.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>content_type</emphasis> -
				Content type to be left in the body.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE, 
		FAILURE_ROUTE, BRANCH_ROUTE.
		</para>
		<example>
		<title><function>filter_body</function> usage</title>
		<programlisting format="linespecific">
...
if (has_body("multipart/mixed")) {
    if (filter_body("application/sdp") {
        remove_hf("Content-Type");
        append_hf("Content-Type: application/sdp\r\n");
    } else {
        xlog("Body part application/sdp not found\n");
    }
}
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">append_to_reply(txt)</function>
		</title>
		<para>
		Append txt as header to all replies that will be generated by
		OpenSIPS for this request.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>txt</emphasis> - String which may contains
			pseudo-variables.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
		BRANCH_ROUTE, ERROR_ROUTE.
		</para>
		<example>
		<title><function>append_to_reply</function> usage</title>
		<programlisting format="linespecific">
...
append_to_reply("Foo: bar\r\n");
append_to_reply("Foo: $rm at $Ts\r\n");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">append_hf(txt)</function>
		</title>
		<para>
			Appends 'txt' as header after the last header field. 
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>txt</emphasis> - Header field to be appended. The
			value can contain pseudo-variables which will be replaced at run
			time.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		Note: Headers which are added in main route cannot be removed in further routes
		(e.g. failure routes). So, the idea is not to add there any headers that you 
		might want to remove later. To add headers temporarely use the branch route 
		because the changes you do there are per-branch.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE, 
		FAILURE_ROUTE, BRANCH_ROUTE.
		</para>
		<example>
		<title><function>append_hf</function> usage</title>
		<programlisting format="linespecific">
...
append_hf("P-hint: VOICEMAIL\r\n");
append_hf("From-username: $fU\r\n");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">append_hf(txt, hdr)</function>
		</title>
		<para>
		Appends 'txt' as header after first 'hdr' header field.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>txt</emphasis> - Header field to be appended. The
			value can contain pseudo-variables which will be replaced at run
			time.
			</para>
		</listitem>
		<listitem>
			<para><emphasis>hdr</emphasis> - Header name after which the 'txt'
			is appended.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE, 
		FAILURE_ROUTE, BRANCH_ROUTE.
		</para>
		<example>
		<title><function>append_hf</function> usage</title>
		<programlisting format="linespecific">
...
append_hf("P-hint: VOICEMAIL\r\n", "Call-ID");
append_hf("From-username: $fU\r\n", "Call-ID");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">insert_hf(txt)</function>
		</title>
		<para>
		Inserts 'txt' as header before the first header field.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>txt</emphasis> - Header field to be inserted. The
			value can contain pseudo-variables which will be replaced at run
			time.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE, 
		FAILURE_ROUTE, BRANCH_ROUTE.
		</para>
		<example>
		<title><function>insert_hf</function> usage</title>
		<programlisting format="linespecific">
...
insert_hf("P-hint: VOICEMAIL\r\n");
insert_hf("To-username: $tU\r\n");
...
</programlisting>
		</example>
	</section>


	<section>
		<title>
		<function moreinfo="none">insert_hf(txt, hdr)</function>
		</title>
		<para>
		Inserts 'txt' as header before first 'hdr' header field.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>txt</emphasis> - Header field to be inserted. The
			value can contain pseudo-variables which will be replaced at run
			time.
			</para>
		</listitem>
		<listitem>
			<para><emphasis>hdr</emphasis> - Header name before which the 'txt'
			is inserted.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE, 
		FAILURE_ROUTE, BRANCH_ROUTE.
		</para>
		<example>
		<title><function>insert_hf</function> usage</title>
		<programlisting format="linespecific">
...
insert_hf("P-hint: VOICEMAIL\r\n", "Call-ID");
insert_hf("To-username: $tU\r\n", "Call-ID");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">append_urihf(prefix, suffix)</function>
		</title>
		<para>
		Append header field name with original <acronym>Request-URI</acronym> 
		in middle.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>prefix</emphasis> - string (usually at least 
			header field name).
			</para>
		</listitem>
		<listitem>
			<para><emphasis>suffix</emphasis> - string (usually at least 
			line terminator).
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, FAILURE_ROUTE, 
		BRANCH_ROUTE.
		</para>
		<example>
		<title><function>append_urihf</function> usage</title>
		<programlisting format="linespecific">
...
append_urihf("CC-Diversion: ", "\r\n");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">is_present_hf(hf_name)</function>
		</title>
		<para>
		Return true if a header field is present in message.
		</para>
		<note>
		<para>
			The function is also able to distinguish the compact names. For
			exmaple <quote>From</quote> will match with <quote>f</quote>
		</para>
		</note>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>hf_name</emphasis> - Header field name.(long or 
			compact form). The <emphasis>hf_name</emphasis> parameter can have
			the following types:
			</para>
				<itemizedlist>
					<listitem>
					<para><emphasis>string</emphasis> - Static header field name
					</para>
					</listitem>
					
					<listitem>
					<para><emphasis>pvar</emphasis> - Header field name is given
					as a pseudo-variable (as string value)
					</para>
					</listitem>
				</itemizedlist>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE, 
		FAILURE_ROUTE, BRANCH_ROUTE.
		</para>
		<example>
		<title><function>is_present_hf</function> usage</title>
		<programlisting format="linespecific">
...
if (is_present_hf("From")) log(1, "From HF Present");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">append_time()</function>
		</title>
		<para>
		Adds a time header to the reply of the request. You must use it
		before functions that are likely to send a reply, e.g., save()
		from 'registrar' module. Header format is: 
		<quote>Date: %a, %d %b %Y %H:%M:%S GMT</quote>, with the legend:
		<itemizedlist>
		<listitem>
			<para><emphasis>%a</emphasis> abbreviated week of day name (locale)
			</para>
		</listitem>
		<listitem>
			<para><emphasis>%d</emphasis> day of month as decimal number
			</para>
		</listitem>
		<listitem>
			<para><emphasis>%b</emphasis> abbreviated month name (locale)
			</para>
		</listitem>
		<listitem>
			<para><emphasis>%Y</emphasis> year with century
			</para>
		</listitem>
		<listitem>
			<para><emphasis>%H</emphasis> hour
			</para>
		</listitem>
		<listitem>
			<para><emphasis>%M</emphasis> minutes
			</para>
		</listitem>
		<listitem>
			<para><emphasis>%S</emphasis> seconds
			</para>
		</listitem>
		</itemizedlist>
		</para>
		<para>
		Return true if a header was successfully appended.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, FAILURE_ROUTE, 
		BRANCH_ROUTE.
		</para>
		<example>
		<title><function>append_time</function> usage</title>
		<programlisting format="linespecific">
...
append_time();
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">is_method(name)</function>
		</title>
		<para>
		Check if the method of the message matches the name. If name is a
		known method (invite, cancel, ack, bye, options, info, update, register,
		message, subscribe, notify, refer, prack), the function performs method
		ID testing (integer comparison) instead of ignore case string
		comparison.
		</para>
		<para>
		The 'name' can be a list of methods in the form of
		'method1|method2|...'. In this case, the function returns true if the
		SIP message's method is one from the list. IMPORTANT NOTE: in the list
		must be only methods defined in &osips; with ID (invite, cancel, ack,
		bye, options, info, update, register, message, subscribe, notify,
		refer, prack, publish; for more see:
		<ulink url="http://www.iana.org/assignments/sip-parameters">
			http://www.iana.org/assignments/sip-parameters</ulink>).
		</para>
		<para>
		If used for replies, the function tests the value of method field from
		CSeq header.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>name</emphasis> - SIP method name
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE, 
		FAILURE_ROUTE, and BRANCH_ROUTE.
		</para>
		<example>
		<title><function>is_method</function> usage</title>
		<programlisting format="linespecific">
...
if(is_method("INVITE"))
{
    # process INVITEs here
}
if(is_method("OPTION|UPDATE"))
{
    # process OPTIONs and UPDATEs here
}
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">remove_hf(hname [,flags])</function>
		</title>
		<para>
		Remove from message all headers with name <quote>hname</quote>
		</para>
		<para>
		Returns true if at least one header is found and removed.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>hname</emphasis> - header name to be removed.
			The <emphasis>hname</emphasis> parameter can have the following types:
			</para>
			<itemizedlist>
				<listitem>
				<para><emphasis>string</emphasis> - Header name to be removed
				</para>
				</listitem>
				<listitem>
				<para><emphasis>pvar</emphasis> - Header name to be removed is
				the value of an existing pseudo-variable (as string value)
				</para>
				</listitem>
				<listitem>
				<para><emphasis>pattern</emphasis> - pattern to match the 
				names of the headers to be removed; can be a simple wildcard
				or a regexp (see the second param too)
				</para>
				</listitem>
			</itemizedlist>
		</listitem>
		<listitem>
			<para><emphasis>flags</emphasis> - how to interpret the pattern from
			the first parameted.
			</para>
			<itemizedlist>
				<listitem>
				<para><emphasis>r</emphasis> - pattern is a regexp
				</para>
				</listitem>
				<listitem>
				<para><emphasis>g</emphasis> - pattern is glob (shell wildcard pattern)
				</para>
				</listitem>
			</itemizedlist>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE, 
		FAILURE_ROUTE and BRANCH_ROUTE.
		</para>
		<example>
		<title><function>remove_hf</function> usage</title>
		<programlisting format="linespecific">
...
if(remove_hf("User-Agent"))
{
    # User Agent header removed
}
...
# removes X-Billing-Account, X-Billing-Price, X-Billing-rateplan, etc
remove_hf("X-Billing*", "g");
...
#removes headers by regex
remove_hf("^X-g.+[0-9]", "r");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">has_body()</function>,
		<function moreinfo="none">has_body(mime)</function>
		</title>
		<para>
		The function returns <emphasis>true</emphasis> if the SIP message
		has a body attached. The checked includes also the 
		<quote>Content-Lenght</quote> header presence and value.
		</para>
		<para>
		If a parameter is given, the mime described will be also checked against
		the <quote>Content-Type</quote> header.
		</para>

                <para>
                If the SIP message has a multipart body and mime is
                not a multipart type , it will search through
                all the parts for the given type.
                </para>

                <para>It will not handle multi-layer multiparts</para>
                
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>mime</emphasis> - mime to be checked against the 
				<quote>Content-Type</quote> header. If not present or 0, this
				check will be disabled.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE, 
		FAILURE_ROUTE and BRANCH_ROUTE.
		</para>
		<example>
		<title><function>has_body</function> usage</title>
		<programlisting format="linespecific">
...
if(has_body("application/sdp"))
{
    # do interesting stuff here
}
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">is_audio_on_hold()</function>
		</title>
		<para>
		The function returns <emphasis>true</emphasis> if the SIP message
		has an SDP body attached and at least one audio stream in on hold.
		</para>

		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE, 
		FAILURE_ROUTE and BRANCH_ROUTE.
		</para>
		<example>
		<title><function>is_audio_on_hold</function> usage</title>
		<programlisting format="linespecific">
...
if(is_audio_on_hold())
{
    # do interesting stuff here
}
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">is_privacy(privacy_type)</function>
		</title>
		<para>
		The function returns <emphasis>true</emphasis> if 
                the SIP message has a Privacy header field that includes
                the given privacy_type among its privacy values.  See
				<ulink url="http://www.iana.org/assignments/sip-priv-values">
                http://www.iana.org/assignments/sip-priv-values</ulink>
                for possible privacy type values.
		</para>
   		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE, 
		FAILURE_ROUTE and BRANCH_ROUTE.
		</para>
		<example>
		<title><function>is_privacy</function> usage</title>
		<programlisting format="linespecific">
...
if(is_privacy("id"))
{
    # do interesting stuff here
}
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">strip_body(),</function>
		<function moreinfo="none">strip_body(mime)</function>
                </title>
		<para>
		If the message has a body, this function deletes it,
		correcting Content-Length. This function also deletes the 
		Content-Type header.
		</para>
                <para>
                If a MIME type is specified it will delete the body if it has
                the same type or, if the message has a multipart body
                it will go through the parts and delete all those with the specified type.
                </para>
                <para>It will not handle multi-layer multiparts</para>

                <para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>mime</emphasis> - mime to be checked against the
				<quote>Content-Type</quote> header. If not present or 0, this
				check will be disabled.
			</para>
		</listitem>
		</itemizedlist>

   		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE, 
		FAILURE_ROUTE, BRANCH_ROUTE and LOCAL_ROUTE.
		</para>
		<example>
		<title><function>strip_body</function> usage</title>
		<programlisting format="linespecific">
...
strip_body();   #delete any body
strip_body("multipart/related") # delete a multipart/related body
strip_body("application/sdp") # delete all sdp bodies, even ones enclosed in multipart
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">add_body(body_text, new_content_type)</function>
		</title>
		<para>
		This function can be used to add a body to a message. If a body already
		exists, it will be replaced with the new one. The second parameter is 
		the content type of the new body. It is optional: in case the function
		is used to replace an existing body with a body of the same type, there
		is no need to set this parameter. If the message has no body or if the
		types are different, it is compulsory to set this parameter.
		</para>
   		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE, 
		FAILURE_ROUTE, BRANCH_ROUTE and LOCAL_ROUTE.
		</para>
		<example>
		<title><function>add_body</function> usage</title>
		<programlisting format="linespecific">
...
add_body("Hello World!", "text/plain");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">sipmsg_validate([flags[,result_pvar]])</function>
		</title>
		<para>
		The function returns <emphasis>true</emphasis> if the SIP message
		is properly built according to SIP RFC3261. It verifies if the
		mandatory headers for each request/reply and can also check the format
		of the headers body.
		</para>
		<para>The flags parameter received is optional and can be composed
			with the following values:
			<itemizedlist>
				<listitem><para><emphasis>'s'</emphasis> - checks the
						integrity of the SDP body, if it exists
				</para></listitem>
				<listitem><para><emphasis>'h'</emphasis> - checks the format
						and integrity of each header body.
				</para></listitem>
				<listitem><para><emphasis>'m'</emphasis> - don't check the
						Max-Forwards header.
				</para></listitem>
				<listitem><para><emphasis>'r'</emphasis> - checks the R-URI
						and whether the domain contains valid characters.
				</para></listitem>
				<listitem><para><emphasis>'f'</emphasis> - checks the URI of the 'From' field
						and whether the domain contains valid characters.
				</para></listitem>
				<listitem><para><emphasis>'t'</emphasis> - checks the URI of the 'To' field
						and whether the domain contains valid characters.
				</para></listitem>
				<listitem><para><emphasis>'c'</emphasis> - checks the URI of the 'Contact' field.
				</para></listitem>
			</itemizedlist>
		</para>
		<para>The result_pvar parameter sets resulting pvar with text error reason in case of
			negative result ( easy for logging or propagating the rejection reason back to the 
			bogus UA )
		</para>
		<para>This function can return the following codes:
			<itemizedlist>
				<listitem><para><emphasis>1</emphasis> - the message is
						RFC3261 compliant and has been successfully validated.
				</para></listitem>
				<listitem><para><emphasis>-1</emphasis> - No SIP message
				</para></listitem>
				<listitem><para><emphasis>-2</emphasis> - Header Parsing error
				</para></listitem>
				<listitem><para><emphasis>-3</emphasis> - No Call-ID header
				</para></listitem>
				<listitem><para><emphasis>-4</emphasis> - No Content-Length header for transports that require it ( eg. TCP )
				</para></listitem>
				<listitem><para><emphasis>-5</emphasis> - Invalid Content-Length, other from the size of the actual body
				</para></listitem>
				<listitem><para><emphasis>-6</emphasis> - SDP body parsing error.
				</para></listitem>
				<listitem><para><emphasis>-7</emphasis> - No Cseq header.
				</para></listitem>
				<listitem><para><emphasis>-8</emphasis> - No From header.
				</para></listitem>
				<listitem><para><emphasis>-9</emphasis> - No To header.
				</para></listitem>
				<listitem><para><emphasis>-10</emphasis> - No Via header.
				</para></listitem>
				<listitem><para><emphasis>-11</emphasis> - Request URI parse error.
				</para></listitem>
				<listitem><para><emphasis>-12</emphasis> - Bad hostname in R-URI.
				</para></listitem>
				<listitem><para><emphasis>-13</emphasis> - No Max-Forward header.
				</para></listitem>
				<listitem><para><emphasis>-14</emphasis> - No Contact header.
				</para></listitem>
				<listitem><para><emphasis>-15</emphasis> - Path user for non-Register request.
				</para></listitem>
				<listitem><para><emphasis>-16</emphasis> - No allow header in 405 reply.
				</para></listitem>
				<listitem><para><emphasis>-17</emphasis> - No Min-Expire header in 423 reply.
				</para></listitem>
				<listitem><para><emphasis>-18</emphasis> - No Proxy-Authorize header in 407 reply.
				</para></listitem>
				<listitem><para><emphasis>-19</emphasis> - No Unsupported header in 420 reply.
				</para></listitem>
				<listitem><para><emphasis>-20</emphasis> - No WWW-Authorize header in 401 reply.
				</para></listitem>
				<listitem><para><emphasis>-21</emphasis> - No Content-Type header
				</para></listitem>
				<listitem><para><emphasis>-22</emphasis> - To header parse error
				</para></listitem>
				<listitem><para><emphasis>-23</emphasis> - From header parse error
				</para></listitem>
				<listitem><para><emphasis>-24</emphasis> - Bad hostname in To header
				</para></listitem>
				<listitem><para><emphasis>-25</emphasis> - Bad hostname in From header
				</para></listitem>
				<listitem><para><emphasis>-26</emphasis> - Contact header parse error
				</para></listitem>
				<listitem><para><emphasis>-255</emphasis> - undefined errors.
				</para></listitem>
			</itemizedlist>
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE, 
		FAILURE_ROUTE and BRANCH_ROUTE.
		</para>
		<example>
		<title><function>sipmsg_validate</function> usage</title>
		<programlisting format="linespecific">
...
if(!sipmsg_validate())
{
	send_reply("400", "Bad Request");
	exit;
}
...

...
# checks also the SDP and headers body
if(!sipmsg_validate("sh"))
{
	send_reply("400", "Bad Request/Body");
	exit;
}
...
</programlisting>
		</example>
	</section>



	<section>
		<title>
		<function moreinfo="none">codec_exists (name [,clock] )</function>
		</title>
		<para>
		This function can be used to verify if a codec exists inside an 
		sdp payload. It will search for the codec inside all streams from all
		sdp sessions. If it is found anywhere it will return TRUE otherwise
		it will	return FALSE. The second parameter is optional, if it is not supplied
		any clockrate will match. Parameters are CASE INSENSITIVE.
		</para>
   		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
		FAILURE_ROUTE, BRANCH_ROUTE and LOCAL_ROUTE.
		</para>
		<example>
		<title><function>codec_exists</function> usage</title>
		<programlisting format="linespecific">
...
codec_exists("speex");
or
codec_exists("GSM","8000");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">codec_delete (name [,clock] )</function>
		</title>
		<para>
		This function can be used to delete a codec from inside an
		sdp payload. It will search for the codec inside all streams from all
		sdp sessions. If it is found anywhere it will be deleted from the
		mapping ("a=...") and from the list of indexes ("m=..."). 
		Returns TRUE if any deletion occurred otherwise
		it will	return FALSE. The second parameter is optional, 
		if it is not supplied any clockrate will match and all will be deleted.
		Parameters are CASE INSENSITIVE.
		</para>
   		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
		FAILURE_ROUTE, BRANCH_ROUTE and LOCAL_ROUTE.
		</para>
		<example>
		<title><function>codec_delete</function> usage</title>
		<programlisting format="linespecific">
...
codec_delete("speex");
or
codec_delete("GSM","8000");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">codec_move_up (name [,clock] )</function>
		</title>
		<para>
		This function can be used to move a codec up in the list
		of indexes ("m=..."). It will search for the codec inside all streams from all
		sdp sessions. If it is found anywhere it will be moved to the top
		of the index list. Returns TRUE if any moves occurred otherwise
		it will	return FALSE. The second parameter is optional,
		if it is not supplied any clockrate will match and all codecs
		will be moved to the front while preserving their original ordering.
		Parameters are CASE INSENSITIVE.
		</para>
   		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
		FAILURE_ROUTE, BRANCH_ROUTE and LOCAL_ROUTE.
		</para>
		<example>
		<title><function>codec_move_up</function> usage</title>
		<programlisting format="linespecific">
...
codec_move_up("speex");
or
codec_move_up("GSM","8000");
...
</programlisting>
		</example>
	</section>

		<section>
		<title>
		<function moreinfo="none">codec_move_down (name [,clock] )</function>
		</title>
		<para>
		This function can be used to move a codec down in the list
		of indexes ("m=..."). It will search for the codec inside all streams from all
		sdp sessions. If it is found anywhere it will be moved to the back
		of the index list. Returns TRUE if any moves occurred otherwise
		it will	return FALSE. The second parameter is optional,
		if it is not supplied any clockrate will match and all codecs
		will be moved to the back while preserving their original ordering.
		Parameters are CASE INSENSITIVE.
		</para>
   		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
		FAILURE_ROUTE, BRANCH_ROUTE and LOCAL_ROUTE.
		</para>
		<example>
		<title><function>codec_move_down</function> usage</title>
		<programlisting format="linespecific">
...
codec_move_down("speex");
or
codec_move_down("GSM","8000");
...
</programlisting>
		</example>

		<example>
		<title><function>codec_move_down</function> usage</title>
		<programlisting format="linespecific">
...
/*
  This example will move speex with 8000 codec to the back of the list,
  then it will erase GSM with 8000 clock, and then it will bring all
  speex codecs to the front of the list. Speex/8000 will be behind any
  other speex.
*/
codec_move_down("speex","8000");
codec_delete("GSM","8000");
codec_move_up("speex");
...
</programlisting>
		</example>
	</section>


	<section>
		<title>
		<function moreinfo="none">codec_exists_re ( regexp )</function>
		</title>
		<para>
		This function has the same effect as codec_exists ( without
		the clock parameter ) the only
		difference is that it takes a POSIX regular expression
		as a parameter.
		</para>
   		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
		FAILURE_ROUTE, BRANCH_ROUTE and LOCAL_ROUTE.
		</para>
		<example>
		<title><function>codec_exists_re</function> usage</title>
		<programlisting format="linespecific">
...
codec_exists_re("sp[a-z]*");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">codec_delete_re ( regexp )</function>
		</title>
		<para>
		This function has the same effect as codec_delete ( without
		the clock parameter ) the only
		difference is that it takes a POSIX regular expression
		as a parameter.
		</para>
   		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
		FAILURE_ROUTE, BRANCH_ROUTE and LOCAL_ROUTE.
		</para>
		<example>
		<title><function>codec_delete_re</function> usage</title>
		<programlisting format="linespecific">
...
codec_delete_re("PCMA|PCMU");
...

</programlisting>
		</example>
	</section>

        <section>
		<title>
		<function moreinfo="none">codec_delete_except_re ( regexp )</function>
		</title>
		<para>
		This function deletes all the codecs except those specified
                by the regular expression.
		</para>
   		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
		FAILURE_ROUTE, BRANCH_ROUTE and LOCAL_ROUTE.
		</para>
		<example>
		<title><function>codec_delete_except_re</function> usage</title>
		<programlisting format="linespecific">
...
codec_delete_except_re("PCMA|PCMU");#will delete all codecs except PCMA and PCMU
...

</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">codec_move_up_re ( regexp )</function>
		</title>
		<para>
		This function has the same effect as codec_move_up ( without
		the clock parameter ) the only
		difference is that it takes a POSIX regular expression
		as a parameter.
		</para>
   		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
		FAILURE_ROUTE, BRANCH_ROUTE and LOCAL_ROUTE.
		</para>
		<example>
		<title><function>codec_move_up_re</function> usage</title>
		<programlisting format="linespecific">
...
codec_move_up_re("sp[a-z]*");
...
</programlisting>
		</example>
	</section>

		<section>
		<title>
		<function moreinfo="none">codec_move_down_re ( regexp )</function>
		</title>
		<para>
		This function has the same effect as codec_move_down ( without
		the clock parameter ) the only
		difference is that it takes a POSIX regular expression
		as a parameter.
		</para>
   		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
		FAILURE_ROUTE, BRANCH_ROUTE and LOCAL_ROUTE.
		</para>
		<example>
		<title><function>codec_move_down_re</function> usage</title>
		<programlisting format="linespecific">
...
codec_move_down_re("sp[a-z]*");
...
</programlisting>
		</example>

		<example>
		<title><function>codec_move_down</function> usage</title>
		<programlisting format="linespecific">
...
/*
  This example will move speex with 8000 codec to the back of the list,
  then it will erase GSM with 8000 clock, and then it will bring all
  speex codecs to the front of the list. Speex/8000 will be behind any
  other speex.
*/
codec_move_down("speex","8000");
codec_delete("GSM","8000");
codec_move_up("speex");
...
</programlisting>
		</example>

	</section>


    <section id="change_reply_status">
	<title>
	    <function>change_reply_status(code, reason)</function>
	</title>
	<para>
		Intercept a SIP reply (in any onreply_route) and change its status code 
		and reason phrase prior to propogating it.
	</para>
	<para>Meaning of the parameters is as follows:</para>
	<itemizedlist>
	    <listitem>
		<para><emphasis>code</emphasis> - Status code.
		</para>
	    </listitem>
	    <listitem>
		<para><emphasis>reason</emphasis> - Reason phrase.
		</para>
	    </listitem>
	</itemizedlist>
   		<para>
		This function can be used from ONREPLY_ROUTE.
		</para>
	<example>
	    <title><function>change_reply_status</function> usage</title>
	    <programlisting>
...
onreply_route {
    if ($rs == "603") {
        change_reply_status("404", "Not Found");
        exit;
    }
}
...
	    </programlisting>
	</example>
    </section>

	<section>
		<title>
		<function moreinfo="none">stream_exists(regexp)</function>
		</title>
		<para>
		This function can be used to verify if a stream exists inside an 
		sdp payload. It will search for the stream inside all sdp sessions.
		If it is found anywhere it will return TRUE otherwise
		it will return FALSE.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
		<para><emphasis>regexp</emphasis> - a POSIX regular expression
		to match the stream media name.
		</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
		FAILURE_ROUTE, BRANCH_ROUTE and LOCAL_ROUTE.
		</para>
		<example>
		<title><function>stream_exists</function> usage</title>
		<programlisting format="linespecific">
...
# check for FAX
stream_exists("image");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">stream_delete(regexp)</function>
		</title>
		<para>
		This function can be used to delete a whole stream from inside an
		sdp payload. It will search for the stream inside all sdp sessions.
		If it is found anywhere it will be deleted along with all attributes 
		Returns TRUE if any deletion occurred otherwise
		it will return FALSE. 
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
		<para><emphasis>regexp</emphasis> - a POSIX regular expression
		to match the stream media name.
		</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
		FAILURE_ROUTE, BRANCH_ROUTE and LOCAL_ROUTE.
		</para>
		<example>
		<title><function>stream_delete</function> usage</title>
		<programlisting format="linespecific">
...
# prevent usage of video
stream_delete("video");
...
</programlisting>
		</example>
	</section>



	</section>
	<section>
		<title>Known Limitations</title>
		<para>
			Search functions are applied to the current message so
			modifications made to the sdp will be visible
			to the codec_exists functions( e.g. after
			calling codec_delete("speex") , codec_exists("speex")
			will return false ).
		</para>
	</section>
</chapter>

