<!-- Module User's Guide -->

<chapter>

	<title>&adminguide;</title>

	<section id="overview" xreflabel="Overview">
	<title>Overview</title>
	<para>
		This is a module to help with &nat; traversal. In particular,
		it helps symmetric &ua;s that don't advertise they are symmetric
		and are not able to determine their public address. fix_nated_contact
		rewrites Contact header field with request's source address:port pair.
		fix_nated_sdp adds the active direction indication to &sdp; (flag
		0x01) and updates source &ip; address too (flag 0x02).
	</para>
	<para>
		Since version 2.2, stateful ping(only SIP Pings) for nathelper is available.
		This allows you to remove contacts from usrloc location table when
		<emphasis>max_pings_lost</emphasis> pings are not responded to, each ping
		having a response timeout of <emphasis>ping_threshold</emphasis> seconds.
		In order to have this functionality, contacts must have
		<emphasis>remove_on_timeout_bflag</emphasis> flag set when inserted into
		the location table.
	</para>
	<para>
		Works with multipart messages that contain an SDP part,
		but not with multi-layered multipart messages.
	</para>
	</section>

	<section>
	<title>NAT pinging types</title>
	<para>
		Currently, the nathelper module supports two types of NAT pings:
	</para>
	<itemizedlist>
		<listitem>
			<para>
			<emphasis>UDP package</emphasis> - 4 bytes (zero filled) UDP
			packages are sent to the contact address.
			</para>
			<itemizedlist>
				<listitem>
				<para><emphasis>Advantages:</emphasis> low bandwitdh traffic,
				easy to generate by &osips;;
				</para>
				</listitem>
				<listitem>
				<para><emphasis>Disadvantages:</emphasis> unidirectional
				traffic through NAT (inbound - from outside to inside); As
				many NATs do update the bind timeout only on outbound traffic,
				the bind may expire and closed.
				</para>
				</listitem>
			</itemizedlist>
		</listitem>
		<listitem>
			<para>
			<emphasis>SIP request</emphasis> - a stateless SIP request is
			sent to the contact address.
			</para>
			<itemizedlist>
				<listitem>
				<para><emphasis>Advantages:</emphasis> bidirectional traffic
				through NAT, since each PING request from &osips; (inbound
				traffic) will force the SIP client to generate a SIP reply
				(outbound traffic) - the NAT bind will be surely kept open.
				Since version 2.2, one can also choose to remove contacts
				from the location table if a certain threshold is detected.
				</para>
				</listitem>
				<listitem>
				<para><emphasis>Disadvantages:</emphasis> higher bandwitdh
				traffic, more expensive (as time) to generate by &osips;;
				</para>
				</listitem>
			</itemizedlist>
		</listitem>
	</itemizedlist>
	</section>

	<section id="dependencies" xreflabel="Dependencies">
	<title>Dependencies</title>
	<section>
		<title>&osips; Modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>usrloc</emphasis> module - only if the NATed
				contacts are to be pinged.
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>clusterer</emphasis> - only if "cluster_id"
				option is enabled.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be installed before
		running &osips; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>None</emphasis>.
			</para>
			</listitem>
		</itemizedlist>
		</para>
	</section>
	</section>

	<section id="exported_parameters" xreflabel="Exported Parameters">
	<title>Exported Parameters</title>

	<section id="param_natping_interval" xreflabel="natping_interval">
		<title><varname>natping_interval</varname> (integer)</title>
		<para>
		Period of time in seconds between sending the NAT pings to all
		currently registered &ua;s to keep their &nat; bindings alive.
		Value of 0 disables this functionality.
		</para>
		<note><para>
		Enabling the NAT pinging functionality will force the module to
		bind itself to USRLOC module.
		</para></note>
		<para>
		<emphasis>
			Default value is 0.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>natping_interval</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("nathelper", "natping_interval", 10)
...
</programlisting>
		</example>
	</section>

	<section id="param_ping_nated_only" xreflabel="ping_nated_only">
		<title><varname>ping_nated_only</varname> (integer)</title>
		<para>
		If this variable is set then only contacts that have
		<quote>behind_NAT</quote> flag in user location database set will
		get ping.
		</para>
		<para>
		<emphasis>
			Default value is 0.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>ping_nated_only</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("nathelper", "ping_nated_only", 1)
...
</programlisting>
		</example>
	</section>

	<section id="param_natping_partitions" xreflabel="natping_partitions">
		<title><varname>natping_partitions</varname> (integer)</title>
		<para>
		How many partitions/chunks to be used for sending the pingings.
		One partition means sending all pingings together. Two partitions
		means to send half pings and second half at a time.
		</para>
		<para>
		<emphasis>
			Default value is 1.
		</emphasis>
		<emphasis>
			Maximum allowed value is 8.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>natping_partitions</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("nathelper", "natping_partitions", 4)
...
</programlisting>
		</example>
	</section>

	<section id="param_natping_socket" xreflabel="natping_socket">
		<title><varname>natping_socket</varname> (string)</title>
		<para>
		Spoof the natping's source-ip to this address. Works only for IPv4.
		</para>
		<para>
		<emphasis>
			Default value is NULL.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>natping_socket</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("nathelper", "natping_socket", "192.168.1.1:5006")
...
</programlisting>
		</example>
	</section>

	<section id="param_received_avp" xreflabel="received_avp">
		<title><varname>received_avp</varname> (str)</title>
		<para>
		The name of the Attribute-Value-Pair (AVP) used to store the URI
		containing the received IP, port, and protocol. The URI is created
		by fix_nated_register function of nathelper module and the attribute
		is then used by the registrar to store the received parameters. Do
		not forget to change the value of corresponding parameter in
		registrar module if you change the value of this parameter.
		</para>
		<note>
		<para>
		You must set this parameter if you use "fix_nated_register". In such
		case you must set the parameter with same name of "registrar"
		module to same value.
		</para>
		</note>
		<para>
		<emphasis>
			Default value is "NULL" (disabled).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>received_avp</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("nathelper", "received_avp", "$avp(received)")
...
</programlisting>
		</example>
	</section>

	<section id="param_force_socket" xreflabel="force_socket">
		<title><varname>force_socket</varname> (string)</title>
		<para>
		Sending socket to be used for pinging contacts without local socket
		information (the local socket information may be lost during a restart 
		or contact replication). If no one specified, OpenSIPS will choose the
		first listening interface matching the destination protocol and
		AF family.
		</para>
		<para>
		<emphasis>
			Default value is <quote>NULL</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>force_socket</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("nathelper", "force_socket", "localhost:33333")
...
</programlisting>
		</example>
	</section>

	<section id="param_sipping_bflag" xreflabel="sipping_bflag">
		<title><varname>sipping_bflag</varname> (string)</title>
		<para>
		What branch flag should be used by the module to identify NATed
		contacts for which it should perform NAT ping via a SIP request
		instead if dummy UDP package.
		</para>
		<para>
		<emphasis>
			Default value is NULL (disabled).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>sipping_bflag</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("nathelper", "sipping_bflag", "SIPPING_ENABLE")
...
</programlisting>
		</example>
	</section>

	<section id="param_remove_on_timeout_bflag" xreflabel="remove_on_timeout_bflag">
		<title><varname>remove_on_timeout_bflag</varname> (string)</title>
		<para>
		What branch flag to be used in order to activate usrloc contact removal when
		the <xref linkend="param_ping_threshold"/> is exceeded.
		</para>
		<para>
		<emphasis>
			Default value is NULL (disabled).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>remove_on_timeout_bflag</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("nathelper", "remove_on_timeout_bflag", "SIPPING_RTO")
...
</programlisting>
		</example>
	</section>

	<section id="param_sipping_latency_flag" xreflabel="sipping_latency_flag">
		<title><varname>sipping_latency_flag</varname> (string)</title>
		<para>
		The branch flag which will be used in order to enable contact pinging
		latency computation and reporting via the usrloc E_UL_LATENCY_UPDATE
		event.
		</para>
		<para>
		<emphasis>
			Default value is NULL (disabled).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>sipping_latency_flag</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("nathelper", "sipping_latency_flag", "SIPPING_CALC_LATENCY")
...
</programlisting>
		</example>
	</section>

	<section id="param_sipping_ignore_rpl_codes" xreflabel="sipping_ignore_rpl_codes">
		<title><varname>sipping_ignore_rpl_codes</varname> (CSV string)</title>
		<para>
		A comma-separated list of SIP reply status codes to contact pings which
		are to be discarded. This may be useful for "full-sharing" user
		location topologies, where the location nodes are not directly facing
		the UAs, hence the intermediary SIP component may generate replies to
		offline contact ping attempts (e.g. 408 - Request Timeout) -- such ping
		replies should be ignored.
		</para>
		<para>
		<emphasis>
			Default value is "NULL" (all reply status codes are accepted).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>sipping_ignore_rpl_codes</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("nathelper", "sipping_ignore_rpl_codes", "408, 480, 404")
...
</programlisting>
		</example>
	</section>

	<section id="param_sipping_from" xreflabel="sipping_from">
		<title><varname>sipping_from</varname> (string)</title>
		<para>
		The parameter sets the SIP URI to be used in generating the SIP
		requests for NAT ping purposes. To enable the SIP request pinging
		feature, you have to set this parameter. The SIP request pinging
		will be used only for requests marked so.
		</para>
		<para>
		<emphasis>
			Default value is <quote>NULL</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>sipping_from</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("nathelper", "sipping_from", "sip:pinger@siphub.net")
...
</programlisting>
		</example>
	</section>

	<section id="param_sipping_method" xreflabel="sipping_method">
		<title><varname>sipping_method</varname> (string)</title>
		<para>
		The parameter sets the SIP method to be used in generating the SIP
		requests for NAT ping purposes.
		</para>
		<para>
		<emphasis>
			Default value is <quote>OPTIONS</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>sipping_method</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("nathelper", "sipping_method", "INFO")
...
</programlisting>
		</example>
	</section>

	<section id="param_nortpproxy_str" xreflabel="nortpproxy_str">
		<title><varname>nortpproxy_str</varname> (string)</title>
		<para>
		The parameter sets the SDP attribute used by nathelper to mark
		the packet SDP informations have already been mangled.
		</para>
		<para>
		If empty string, no marker will be added or checked.
		</para>
		<note><para>
		The string must be a complete SDP line, including the EOH (\r\n).
		</para></note>
		<para>
		<emphasis>
			Default value is <quote>a=nortpproxy:yes\r\n</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>nortpproxy_str</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("nathelper", "nortpproxy_str", "a=sdpmangled:yes\r\n")
...
</programlisting>
		</example>
	</section>

	<section id="param_natping_tcp" xreflabel="natping_tcp">
		<title><varname>natping_tcp</varname> (integer)</title>
		<para>
		If the flag is set, TCP/TLS clients will also be pinged with
		SIP OPTIONS messages.
		</para>
		<para>
		<emphasis>
			Default value is 0 (not set).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>natping_tcp</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("nathelper", "natping_tcp", 1)
...
</programlisting>
		</example>
	</section>

	<section id="param_oldip_skip" xreflabel="oldip_skip">
		<title><varname>oldip_skip</varname> (string)</title>
		<para>
		Parameter which specifies whether old media ip and old origin ip
		shall be put in the sdp body. The parameter has two values :
		'o' ("a=oldoip" field shall be skipped) and 'c' ("a=oldcip" field
		shall be skipped).
		</para>
		<para>
		<emphasis>
			Default value is 0 (not set).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>oldip_skip</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("nathelper", "oldip_skip", "oc")
...
</programlisting>
		</example>
	</section>

	<section id="param_ping_threshold" xreflabel="ping_threshold">
		<title><varname>ping_threshold</varname> (int)</title>
		<para>
			If a contact does not respond in <emphasis>ping_threshold</emphasis>
			seconds since the ping has been sent, the contact shall be removed
			after <xref linkend="param_max_pings_lost"/> unresponded pings.
		</para>
		<para>
		<emphasis>
			Default value is 3 (seconds).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>ping_threshold</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("nathelper", "ping_threshold", 10)
...
</programlisting>
		</example>
	</section>

	<section id="param_max_pings_lost" xreflabel="max_pings_lost">
		<title><varname>max_pings_lost</varname> (int)</title>
		<para>
			Number of unresponded pings after which the contact shall be removed
		from the location table.
		</para>
		<para>
		<emphasis>
			Default value is 3 (pings).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>max_pings_lost</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("nathelper", "max_pings_lost", 5)
...
</programlisting>
		</example>
	</section>

	<section id="param_cluster_id" xreflabel="cluster_id">
		<title><varname>cluster_id</varname> (integer)</title>
		<para>
		The ID of the cluster the module is part of. The clustering support is 
		used by the nathelper module for controlling the pinging process. When 
		part of a cluster of multiple nodes, the nodes can agree upon which node
		is the one responsible for pinging.
		</para>
		<para>
		The clustering with sharing tag support may be used to control which 
		node in the cluster will perform the pinging/probing to the
		contacts. See the
		<xref linkend="param_cluster_sharing_tag"/> option.
		</para>
		<para>
		For more info on how to define and populate a cluster (with OpenSIPS 
		nodes) see the "clusterer" module.
		</para>
		<para>
		<emphasis>
			Default value is <quote>0 (none)</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>cluster_id</varname> parameter</title>
		<programlisting format="linespecific">
...
# Be part of cluster ID 9
modparam("nathelper", "cluster_id", 9)
...
</programlisting>
		</example>
	</section>

	<section id="param_cluster_sharing_tag" xreflabel="cluster_sharing_tag">
		<title><varname>cluster_sharing_tag</varname> (string)</title>
		<para>
		The name of the sharing tag (as defined per clusterer modules) to 
		control which node is responsible for perform pinging of the 
		contacts.
		If defined, only the node with active status of this tag will 
		perform the pinging.
		</para>
		<para>
		The <xref linkend="param_cluster_id"/> must be defined for this option
		to work.
		</para>
		<para>
		This is an optional parameter. If not set, all the nodes in the cluster
		will individually do the pinging.
		</para>
		<para>
		<emphasis>
			Default value is <quote>empty (none)</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>cluster_sharing_tag</varname> parameter</title>
		<programlisting format="linespecific">
...
# only the node with the active "vip" sharing tag will perform pinging
modparam("nathelper", "cluster_id", 9)
modparam("nathelper", "cluster_sharing_tag", "vip")
...
</programlisting>
		</example>
	</section>

</section>

	<section id="exported_functions" xreflabel="exported_functions">
	<title>Exported Functions</title>
	<section id="func_fix_nated_contact" xreflabel="fix_nated_contact()">
		<title>
		<function moreinfo="none">fix_nated_contact([uri_params])</function>
		</title>
		<para>
		Rewrites the URI Contact <acronym>HF</acronym> to contain request's
		source address:port. If a list of URI parameter is provided, it will
		be added to the modified contact;
		</para>
		<para>
		<emphasis>IMPORTANT NOTE: </emphasis> Changes made by this function shall
		not be seen in the async resume route. So make sure you call it in all the
		resume routes where you need the contact fixed.
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>uri_params (string, optional)</emphasis>
			</para></listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE, BRANCH_ROUTE.
		</para>
		<example>
		<title><function>fix_nated_contact</function> usage</title>
		<programlisting format="linespecific">
...
if (search("User-Agent: Cisco ATA.*") {
    fix_nated_contact(";ata=cisco");
} else {
    fix_nated_contact();
}
...
</programlisting>
		</example>
	</section>
	<section id="func_fix_nated_sdp" xreflabel="fix_nated_sdp()">
		<title>
		<function moreinfo="none">fix_nated_sdp(flags [, ip_address [, sdp_fields]])</function>
		</title>
		<para>
		Alters the SDP information in orer to facilitate NAT traversal. What
		changes to be performed may be controled via the
		<quote>flags</quote> parameter. Since version 1.12 the name of the old
		ip fields are "a=oldoip" for old origin ip and "a=oldcip" for old meda
		ip.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
			<listitem><para>
			<emphasis>flags (string)</emphasis> - the value may be a CSV of
			the following flags:
			</para>
			<itemizedlist>
				<listitem>
					<para><emphasis>add-dir-active</emphasis> - (old
					<emphasis>0x01</emphasis> flag) adds
					<quote>a=direction:active</quote> SDP line;
					</para>
				</listitem>
				<listitem>
					<para><emphasis>rewrite-media-ip</emphasis> - (old
					<emphasis>0x02</emphasis> flag) rewrite media
					&ip; address (c=) with source address of the message
					or the provided IP address (the provided IP address takes
					precedence over the source address).</para>
				</listitem>
				<listitem>
					<para><emphasis>add-no-rtpproxy</emphasis> - (old
					<emphasis>0x04</emphasis> flag) adds
						<quote>a=nortpproxy:yes</quote> SDP line;</para>
				</listitem>
				<listitem>
					<para><emphasis>rewrite-origin-ip</emphasis> - (old
					<emphasis>0x08</emphasis> flag) rewrite IP from
					origin description (o=) with source address of the message
					or the provided IP address (the provided IP address takes
					precedence over the source address).</para>
				</listitem>
				<listitem>
					<para><emphasis>rewrite-null-ips</emphasis> - (old
					<emphasis>0x10</emphasis> flag) force rewrite of
					null media IP and/or origin IP address.
					Without this flag, null IPs are left untouched.</para>
				</listitem>
			</itemizedlist>
			</listitem>
			<listitem><para>
			<emphasis>ip_address (string, optional)</emphasis> - IP to be used for
			rewriting SDP. If not specified, the received signalling IP will be used.
			NOTE: For the IP to be used, you need to use 0x02 or 0x08 flags,
			otherwise it will have no effect.
			</para>
			</listitem>
			<listitem><para>
			<emphasis>sdp_fields (string, optional)</emphasis> - SDP field(s) to be appended to SDP.
			Note: Each SDP field must be preceded by "\r\n".
			</para>
			</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
		FAILURE_ROUTE, BRANCH_ROUTE.
		</para>
		<example>
		<title><function>fix_nated_sdp</function> usage</title>
		<programlisting format="linespecific">
...
# Add "a=direction:active" SDP line
# Rewrite media IP (c= line)
# Add extra "a=x-attr1" SDP line
# Add extra "a=x-attr2" SDP line
if (search("User-Agent: Cisco ATA.*")
    {fix_nated_sdp(3,,"\r\na=x-attr1\r\na=x-attr2");};
...
</programlisting>
		</example>
	</section>
	<section id="func_add_rcv_param" xreflabel="add_rcv_param()">
		<title>
		<function moreinfo="none">add_rcv_param([flag])</function>,
		</title>
		<para>
		Add received parameter to Contact header fields or Contact URI.
		The parameter will
		contain URI created from the source IP, port, and protocol of the
		packet containing the SIP message. The parameter can be then
		processed by another registrar, this is useful, for example, when
		replicating register messages using t_replicate function to
		another registrar.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
			<listitem><para>
			<emphasis>flag (int, optional)</emphasis> - flags to indicate if
			the parameter should be added to Contact URI or Contact header.
			If the flag is non-zero, the parameter will be added to the Contact
			URI. If not used or equal to zero, the parameter will go to the
			Contact header.
			</para></listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function>add_rcv_paramer</function> usage</title>
		<programlisting format="linespecific">
...
add_rcv_param(); # add the parameter to the Contact header
....
add_rcv_param(1); # add the parameter to the Contact URI
...
</programlisting>
		</example>
	</section>
	<section id="func_fix_nated_register" xreflabel="fix_nated_register()">
		<title>
		<function moreinfo="none">fix_nated_register()</function>
		</title>
		<para>
		The function creates a URI consisting of the source IP, port, and
		protocol and stores the URI in an Attribute-Value-Pair. The URI will
		be appended as "received" parameter to Contact in 200 OK and
		registrar will store it in the user location database.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function>fix_nated_register</function> usage</title>
		<programlisting format="linespecific">
...
fix_nated_register();
...
</programlisting>
		</example>
	</section>
	<section id="func_nat_uac_test" xreflabel="nat_uac_test()">
		<title>
			<function>nat_uac_test(flags)</function>
		</title>
		<para>
			Determines whether the received SIP message originated behind a NAT,
			using one or more pre-defined checks.
		</para>
		<para>The <emphasis>flags</emphasis> (string) parameter denotes a
			comma-separated list of checks to be performed, as follows:</para>
		<itemizedlist>
			<listitem><para>
			<emphasis>private-contact</emphasis> - (old <emphasis>1</emphasis> flag)
			Contact header field is searched for occurrence of RFC1918 / RFC6598
			addresses
			</para></listitem>
			<listitem><para>
			<emphasis>diff-ip-src-via</emphasis> - (old <emphasis>2</emphasis> flag)
			the "received" test is used: address in Via is compared against source
			IP address of signaling
			</para></listitem>
			<listitem><para>
			<emphasis>private-via</emphasis> - (old <emphasis>4</emphasis> flag)
			Top Most VIA is searched for occurrence of RFC1918 / RFC6598 addresses
			</para></listitem>
			<listitem><para>
			<emphasis>private-sdp</emphasis> - (old <emphasis>8</emphasis> flag)
			SDP is searched for occurrence of RFC1918 / RFC6598 addresses
			</para></listitem>
			<listitem><para>
			<emphasis>diff-port-src-via</emphasis> - (old <emphasis>16</emphasis>
			flag) test if the source port is different from the port in Via
			</para></listitem>
			<listitem><para>
			<emphasis>diff-ip-src-contact</emphasis> - (old <emphasis>32</emphasis>
			flag) address in Contact is compared against source IP address of
			signaling
			</para></listitem>
			<listitem><para>
			<emphasis>diff-port-src-contact</emphasis> - (old <emphasis>64</emphasis>
			flag) Port in Contact is compared against source port of signaling
			</para></listitem>
			<listitem><para>
			<emphasis>carrier-grade-nat</emphasis> - (old <emphasis>128</emphasis>
			flag) also include RFC 6333 addresses in the checks for
			<emphasis>Contact</emphasis>, <emphasis>Via</emphasis> and
			<emphasis>SDP</emphasis>
			</para></listitem>
		</itemizedlist>
		<para>
			<emphasis role='bold'>Returns true if any of the tests passed</emphasis>.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE, FAILURE_ROUTE, BRANCH_ROUTE.
		</para>
		<example>
		<title><function>nat_uac_test</function> usage</title>
		<programlisting format="linespecific">
...
# check for private Contact or SDP media IP addresses
if (nat_uac_test("private-contact,private-sdp"))
	xlog("SIP message is NAT'ed (Call-ID: $ci)\n");
...
</programlisting>
		</example>
	</section>
	</section>

	<section id="exported_mi_functions" xreflabel="Exported MI Functions">
	<title>Exported MI Functions</title>
		<section id="mi_nh_enable_ping" xreflabel="nh_enable_ping">
			<title><function moreinfo="none">nh_enable_ping</function></title>
			<para>
			Gets or sets the natpinging status.
			</para>
			<para>Parameters:</para>
			<itemizedlist>
				<listitem><para>
					<emphasis>status</emphasis> (optional) - if not provided the function
					returns the current natping status. Otherwise, enables natping if
					parameter value greater than 0 or disables natping if parameter value is 0.
				</para></listitem>
			</itemizedlist>
			<example>
			<title><function moreinfo="none">nh_enable_ping</function> usage</title>
			<programlisting format="linespecific">
...
$ opensips-cli -x mi nh_enable_ping
Status:: 1
$
$ opensips-cli -x mi nh_enable_ping 0
$
$ opensips-cli -x mi nh_enable_ping
Status:: 0
$
...
			</programlisting>
			</example>
		</section>

	</section>

</chapter>

