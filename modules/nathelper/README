nathelper Module

Maxim Sobolev

   Sippy Software, Inc.

Edited by

Maxim Sobolev

Edited by

Bogdan-Andrei Iancu

   Copyright © 2003-2008 Sippy Software, Inc.

   Copyright © 2005 Voice Sistem SRL
   Revision History
   Revision $Revision: 8740 $ $Date$
     __________________________________________________________

   Table of Contents

   1. Admin Guide

        1.1. Overview
        1.2. NAT pinging types
        1.3. Dependencies

              1.3.1. OpenSIPS Modules
              1.3.2. External Libraries or Applications

        1.4. Exported Parameters

              1.4.1. natping_interval (integer)
              1.4.2. ping_nated_only (integer)
              1.4.3. natping_partitions (integer)
              1.4.4. natping_socket (string)
              1.4.5. received_avp (str)
              1.4.6. force_socket (string)
              1.4.7. sipping_bflag (string/integer)
              1.4.8. remove_on_timeout_bflag (string/integer)
              1.4.9. sipping_from (string)
              1.4.10. sipping_method (string)
              1.4.11. nortpproxy_str (string)
              1.4.12. natping_tcp (integer)
              1.4.13. oldip_skip (string)
              1.4.14. ping_threshold (int)
              1.4.15. max_pings_lost (int)

        1.5. Exported Functions

              1.5.1. fix_nated_contact([uri_params])
              1.5.2. fix_nated_sdp(flags [, ip_address])
              1.5.3. add_rcv_param([flag]),
              1.5.4. fix_nated_register()
              1.5.5. nat_uac_test(flags)
              1.5.6. MI Commands

   2. Frequently Asked Questions

   List of Examples

   1.1. Set natping_interval parameter
   1.2. Set ping_nated_only parameter
   1.3. Set natping_partitions parameter
   1.4. Set natping_socket parameter
   1.5. Set received_avp parameter
   1.6. Set force_socket parameter
   1.7. Set sipping_bflag parameter
   1.8. Set remove_on_timeout_bflag parameter
   1.9. Set sipping_from parameter
   1.10. Set sipping_method parameter
   1.11. Set nortpproxy_str parameter
   1.12. Set natping_interval parameter
   1.13. Set natping_interval parameter
   1.14. Set ping_threshold parameter
   1.15. Set ping_threshold parameter
   1.16. fix_nated_contact usage
   1.17. fix_nated_sdp usage
   1.18. add_rcv_paramer usage
   1.19. fix_nated_register usage
   1.20. nh_enable_ping usage

Chapter 1. Admin Guide

1.1. Overview

   This is a module to help with NAT traversal. In particular, it
   helps symmetric UAs that don't advertise they are symmetric and
   are not able to determine their public address.
   fix_nated_contact rewrites Contact header field with request's
   source address:port pair. fix_nated_sdp adds the active
   direction indication to SDP (flag 0x01) and updates source IP
   address too (flag 0x02).

   Since version 2.2, stateful ping(only SIP Pings) for nathelper
   is available. This allows you to remove contacts from usrloc
   location table when max_pings_lost pings are not responded to,
   each ping having a response timeout of ping_threshold seconds.
   In order to have this functionality, contacts must have
   remove_on_timeout_bflag flag set when inserted into the
   location table.

   Works with multipart messages that contain an SDP part, but not
   with multi-layered multipart messages.

1.2. NAT pinging types

   Currently, the nathelper module supports two types of NAT
   pings:
     * UDP package - 4 bytes (zero filled) UDP packages are sent
       to the contact address.
          + Advantages: low bandwitdh traffic, easy to generate by
            OpenSIPS;
          + Disadvantages: unidirectional traffic through NAT
            (inbound - from outside to inside); As many NATs do
            update the bind timeout only on outbound traffic, the
            bind may expire and closed.
     * SIP request - a stateless SIP request is sent to the
       contact address.
          + Advantages: bidirectional traffic through NAT, since
            each PING request from OpenSIPS (inbound traffic) will
            force the SIP client to generate a SIP reply (outbound
            traffic) - the NAT bind will be surely kept open.
            Since version 2.2, one can also choose to remove
            contacts from the location table if a certain
            threshold is detected.
          + Disadvantages: higher bandwitdh traffic, more
            expensive (as time) to generate by OpenSIPS;

1.3. Dependencies

1.3.1. OpenSIPS Modules

   The following modules must be loaded before this module:
     * usrloc module - only if the NATed contacts are to be
       pinged.

1.3.2. External Libraries or Applications

   The following libraries or applications must be installed
   before running OpenSIPS with this module loaded:
     * None.

1.4. Exported Parameters

1.4.1. natping_interval (integer)

   Period of time in seconds between sending the NAT pings to all
   currently registered UAs to keep their NAT bindings alive.
   Value of 0 disables this functionality.

Note

   Enabling the NAT pinging functionality will force the module to
   bind itself to USRLOC module.

   Default value is 0.

   Example 1.1. Set natping_interval parameter
...
modparam("nathelper", "natping_interval", 10)
...

1.4.2. ping_nated_only (integer)

   If this variable is set then only contacts that have
   “behind_NAT” flag in user location database set will get ping.

   Default value is 0.

   Example 1.2. Set ping_nated_only parameter
...
modparam("nathelper", "ping_nated_only", 1)
...

1.4.3. natping_partitions (integer)

   How many partitions/chunks to be used for sending the pingings.
   One partition means sending all pingings together. Two
   partitions means to send half pings and second half at a time.

   Default value is 1.

   Example 1.3. Set natping_partitions parameter
...
modparam("nathelper", "natping_partitions", 4)
...

1.4.4. natping_socket (string)

   Spoof the natping's source-ip to this address. Works only for
   IPv4.

   Default value is NULL.

   Example 1.4. Set natping_socket parameter
...
modparam("nathelper", "natping_socket", "192.168.1.1:5006")
...

1.4.5. received_avp (str)

   The name of the Attribute-Value-Pair (AVP) used to store the
   URI containing the received IP, port, and protocol. The URI is
   created by fix_nated_register function of nathelper module and
   the attribute is then used by the registrar to store the
   received parameters. Do not forget to change the value of
   corresponding parameter in registrar module if you change the
   value of this parameter.

Note

   You must set this parameter if you use "fix_nated_register". In
   such case you must set the parameter with same name of
   "registrar" module to same value.

   Default value is "NULL" (disabled).

   Example 1.5. Set received_avp parameter
...
modparam("nathelper", "received_avp", "$avp(received)")
...

1.4.6. force_socket (string)

   Socket to be forced when sending pings. It makes sense only for
   UDP communication. If no one specified, the OS will choose.

   Default value is “NULL”.

   Example 1.6. Set force_socket parameter
...
modparam("nathelper", "force_socket", "localhost:33333")
...

1.4.7. sipping_bflag (string/integer)

   What branch flag should be used by the module to identify NATed
   contacts for which it should perform NAT ping via a SIP request
   instead if dummy UDP package.

   WARNING: Setting INT flags is deprecated! Use quoted strings
   instead!

   Default value is "NULL" (disabled).

   Example 1.7. Set sipping_bflag parameter
...
modparam("nathelper", "sipping_bflag", "SIP_PING_FLAG")
...

1.4.8. remove_on_timeout_bflag (string/integer)

   What flag to be used in order to activate usrloc contact
   removal when ping_threshold is exceeded.

   WARNING: Setting INT flags is deprecated! Use quoted strings
   instead!

   Default value is "NULL" (disabled).

   Example 1.8. Set remove_on_timeout_bflag parameter
...
modparam("nathelper", "remove_on_timeout_bflag", "RM_ONTO_FLAG")
...

1.4.9. sipping_from (string)

   The parameter sets the SIP URI to be used in generating the SIP
   requests for NAT ping purposes. To enable the SIP request
   pinging feature, you have to set this parameter. The SIP
   request pinging will be used only for requests marked so.

   Default value is “NULL”.

   Example 1.9. Set sipping_from parameter
...
modparam("nathelper", "sipping_from", "sip:pinger@siphub.net")
...

1.4.10. sipping_method (string)

   The parameter sets the SIP method to be used in generating the
   SIP requests for NAT ping purposes.

   Default value is “OPTIONS”.

   Example 1.10. Set sipping_method parameter
...
modparam("nathelper", "sipping_method", "INFO")
...

1.4.11. nortpproxy_str (string)

   The parameter sets the SDP attribute used by nathelper to mark
   the packet SDP informations have already been mangled.

   If empty string, no marker will be added or checked.

Note

   The string must be a complete SDP line, including the EOH
   (\r\n).

   Default value is “a=nortpproxy:yes\r\n”.

   Example 1.11. Set nortpproxy_str parameter
...
modparam("nathelper", "nortpproxy_str", "a=sdpmangled:yes\r\n")
...

1.4.12. natping_tcp (integer)

   If the flag is set, TCP/TLS clients will also be pinged with
   SIP OPTIONS messages.

   Default value is 0 (not set).

   Example 1.12. Set natping_interval parameter
...
modparam("nathelper", "natping_tcp", 1)
...

1.4.13. oldip_skip (string)

   Parameter which specifies whether old media ip and old origin
   ip shall be put in the sdp body. The parameter has two values :
   'o' ("a=oldoip" field shall be skipped) and 'c' ("a=oldcip"
   field shall be skipped).

   Default value is 0 (not set).

   Example 1.13. Set natping_interval parameter
...
modparam("nathelper", "oldip_skip", "oc")
...

1.4.14. ping_threshold (int)

   If a contact does not respond in ping_threshold seconds since
   the ping has been sent, the contact shall be removed after
   max_pings_lost unresponded pings.

   Default value is 3 (seconds).

   Example 1.14. Set ping_threshold parameter
...
modparam("nathelper", "ping_threshold", 10)
...

1.4.15. max_pings_lost (int)

   Number of unresponded pings after which the contact shall be
   removed from the location table.

   Default value is 3 (pings).

   Example 1.15. Set ping_threshold parameter
...
modparam("nathelper", "max_pings_lost", 5)
...

1.5. Exported Functions

1.5.1.  fix_nated_contact([uri_params])

   Rewrites the URI Contact HF to contain request's source
   address:port. If a list of URI parameter is provided, it will
   be added to the modified contact;

   IMPORTANT NOTE: Changes made by this function shall not be seen
   in the async resume route. So make sure you call it in all the
   resume routes where you need the contact fixed.

   This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
   BRANCH_ROUTE.

   Example 1.16. fix_nated_contact usage
...
if (search("User-Agent: Cisco ATA.*") {
    fix_nated_contact(";ata=cisco");
} else {
    fix_nated_contact();
}
...

1.5.2.  fix_nated_sdp(flags [, ip_address])

   Alters the SDP information in orer to facilitate NAT traversal.
   What changes to be performed may be controled via the “flags”
   parameter. Since version 1.12 the name of the old ip fields are
   "a=oldoip" for old origin ip and "a=oldcip" for old meda ip.

   Meaning of the parameters is as follows:
     * flags - the value may be a bitwise OR of the following
       flags:
          + 0x01 - adds “a=direction:active” SDP line;
          + 0x02 - rewrite media IP address (c=) with source
            address of the message or the provided IP address (the
            provide IP address take precedence over the source
            address).
          + 0x04 - adds “a=nortpproxy:yes” SDP line;
          + 0x08 - rewrite IP from origin description (o=) with
            source address of the message or the provided IP
            address (the provide IP address take precedence over
            the source address).
     * ip_address - IP to be used for rewriting SDP. If not
       specified, the received signalling IP will be used. The
       parameter allows pseudo-variables usage. NOTE: For the IP
       to be used, you need to use 0x02 or 0x08 flags, otherwise
       it will have no effect.

   This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
   FAILURE_ROUTE, BRANCH_ROUTE.

   Example 1.17. fix_nated_sdp usage
...
if (search("User-Agent: Cisco ATA.*") {fix_nated_sdp("3");};
...

1.5.3.  add_rcv_param([flag]),

   Add received parameter to Contact header fields or Contact URI.
   The parameter will contain URI created from the source IP,
   port, and protocol of the packet containing the SIP message.
   The parameter can be then processed by another registrar, this
   is useful, for example, when replicating register messages
   using t_replicate function to another registrar.

   Meaning of the parameters is as follows:
     * flag - flags to indicate if the parameter should be added
       to Contact URI or Contact header. If the flag is non-zero,
       the parameter will be added to the Contact URI. If not used
       or equal to zero, the parameter will go to the Contact
       header.

   This function can be used from REQUEST_ROUTE.

   Example 1.18. add_rcv_paramer usage
...
add_rcv_param(); # add the parameter to the Contact header
....
add_rcv_param("1"); # add the parameter to the Contact URI
...

1.5.4.  fix_nated_register()

   The function creates a URI consisting of the source IP, port,
   and protocol and stores the URI in an Attribute-Value-Pair. The
   URI will be appended as "received" parameter to Contact in 200
   OK and registrar will store it in the user location database.

   This function can be used from REQUEST_ROUTE.

   Example 1.19. fix_nated_register usage
...
fix_nated_register();
...

1.5.5.  nat_uac_test(flags)

   Tries to guess if client's request originated behind a nat. The
   parameter determines what heuristics is used.

   Meaning of the flags is as follows:
     * 1 - Contact header field is searched for occurrence of
       RFC1918 / RFC6598 addresses.
     * 2 - the "received" test is used: address in Via is compared
       against source IP address of signaling
     * 4 - Top Most VIA is searched for occurrence of RFC1918 /
       RFC6598 addresses
     * 8 - SDP is searched for occurrence of RFC1918 / RFC6598
       addresses
     * 16 - test if the source port is different from the port in
       Via
     * 32 - address in Contact is compared against source IP
       address of signaling
     * 64 - Port in Contact is compared against source port of
       signaling

   All flags can be bitwise combined, the test returns true if any
   of the tests identified a NAT.

   This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
   FAILURE_ROUTE, BRANCH_ROUTE.

1.5.6. MI Commands

1.5.6.1. nh_enable_ping

   Enables natping if parameter value greater than 0. Disables
   natping if parameter value is 0. With no parameter, it returns
   the current natping status.

   The function may takean optional parameter (for set operations)
   - a number in decimal format.

   Example 1.20. nh_enable_ping usage
...
$ opensipsctl fifo nh_enable_ping
Status:: 1
$
$ opensipsctl fifo nh_enable_ping 0
$
$ opensipsctl fifo nh_enable_ping
Status:: 0
$
...

Chapter 2. Frequently Asked Questions

   2.1.

       Where can I find more about OpenSIPS?

       Take a look at http://www.opensips.org/.

   2.2.

       Where can I post a question about this module?

       First at all check if your question was already answered on one
       of our mailing lists:
         * User Mailing List -
           http://lists.opensips.org/cgi-bin/mailman/listinfo/users
         * Developer Mailing List -
           http://lists.opensips.org/cgi-bin/mailman/listinfo/devel

       E-mails regarding any stable OpenSIPS release should be sent to
       <users@lists.opensips.org> and e-mails regarding development
       versions should be sent to <devel@lists.opensips.org>.

       If you want to keep the mail private, send it to
       <users@lists.opensips.org>.

   2.3.

       How can I report a bug?

       Please follow the guidelines provided at:
       https://github.com/OpenSIPS/opensips/issues.
