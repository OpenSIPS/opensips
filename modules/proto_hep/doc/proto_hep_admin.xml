<!-- Module User's Guide -->

<chapter>

	<title>&adminguide;</title>

	<section>
	<title>Overview</title>
	<para>
		The <emphasis role='bold'>proto_hep</emphasis> module is a
		transport module which implements hepV1 and hepV2 UDP-based communication
		and hepV3 TCP-based communication. It also offers an API with which
		you can register callbacks which are called after the HEP header is
		parsed and also can pack sip messages to HEP messages.The unpacking
		part is done internally.</para>
	</section>
	<para>
		Once loaded, you will be able to define HEP listeners in your
		configuration file by adding their IP and, optionally, a listening port.
		You can define both TCP and UDP listeners. On UDP you will be able to
		receive HEP v1, v2 and v3 packets, on TCP only HEPv3.
	<para>
		<programlisting format="linespecific">
...
#HEPv3 listener
listen = hep_tcp:127.0.0.1:6061 		# change the listening IP
#HEPv1, v2, v3 listener
listen = hep_udp:127.0.0.1:6061 		# change the listening IP
...
</programlisting>
	</para>
	</para>

	<section>
	<title>Dependencies</title>
	<section>
		<title>&osips; Modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>None</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>

	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be installed before
		running &osips; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>None</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>

	<section>
	<title>Exported Parameters</title>
	<section>
		<title><varname>hep_port</varname> (integer)</title>
		<para>
			The default port to be used by all TCP/UDP listeners.
		</para>
		<para>
		<emphasis>
			Default value is 5656.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>hep_port</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("proto_hep", "hep_port", 6666)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>hep_send_timeout</varname> (integer)</title>
		<para>
		Time in milliseconds after a TCP connection will be closed if it is
		not available for blocking writing in this interval (and &osips; wants
		to send something on it).
		</para>
		<para>
		<emphasis>
			Default value is 100 ms.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>hep_send_timeout</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("proto_hep", "hep_send_timeout", 200)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>hep_max_msg_chunks</varname> (integer)</title>
		<para>
			The maximum number of chunks in which a HEP message is expected to
			arrive via TCP. If a received packet is more fragmented than this,
			the connection is dropped (either the connection is very
			overloaded and this leads to high fragmentation - or we are the
			victim of an ongoing attack where the attacker is sending very
			fragmented traffic in order to decrease server performance).
		</para>
		<para>
		<emphasis>
			Default value is 32.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>hep_max_msg_chunks</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("proto_hep", "hep_max_msg_chunks", 8)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>hep_async</varname> (integer)</title>
		<para>
			Specifies whether the TCP connect and write operations should be
			done in an asynchronous mode (non-blocking connect and
			write) or not. If disabled, OpenSIPS will block and wait for TCP
			operations like connect and write.
		</para>
		<para>
		<emphasis>
			Default value is 1 (enabled).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>hep_async</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("proto_bin", "hep_async", 0)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>hep_async_max_postponed_chunks</varname> (integer)</title>
		<para>
			If <emphasis>hep_async</emphasis> is enabled, this specifies the
			maximum number of HEP messages that can be stashed for later/async
			writing. If the connection pending writes exceed this number, the
			connection will be marked as broken and dropped.
		</para>
		<para>
		<emphasis>
			Default value is 32.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>hep_async_max_postponed_chunks</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("proto_hep", "hep_async_max_postponed_chunks", 16)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>hep_capture_id</varname> (integer)</title>
		<para>
			The parameter indicate the capture agent ID for HEPv2/v3 protocol.
		Limitation: 16-bit integer.
		</para>
		<para>
		<emphasis>
		Default value is "1".
		</emphasis>
		</para>
		<example>
		<title>Set <varname>hep_capture_id</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("proto_hep", "hep_capture_id", 234)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>hep_async_local_connect_timeout</varname> (integer)</title>
		<para>
			If <emphasis>hep_async</emphasis> is enabled, this specifies the
			number of milliseconds that a connect will be tried in blocking
			mode (optimization). If the connect operation lasts more than
			this, the connect will go to async mode and will be passed to TCP
			MAIN for polling.
		</para>
		<para>
		<emphasis>
			Default value is 100 ms.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>hep_async_local_connect_timeout</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("proto_hep", "hep_async_local_connect_timeout", 200)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>hep_async_local_write_timeout</varname> (integer)</title>
		<para>
			If <emphasis>hep_async</emphasis> is enabled, this specifies the
			number of milliseconds that a write op will be tried in blocking
			mode (optimization). If the write operation lasts more than this,
			the write will go to async mode and will be passed to bin MAIN for
			polling.
		</para>
		<para>
		<emphasis>
			Default value is 10 ms.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>hep_async_local_write_timeout</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("proto_hep", "tcp_async_local_write_timeout", 100)
...
</programlisting>
		</example>
	</section>
	</section>

</chapter>
