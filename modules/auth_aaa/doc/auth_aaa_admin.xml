<!-- Auth_aaa Module User's Guide -->

<chapter>
	
	<title>&adminguide;</title>
	
	<section id="overview" xreflabel="Overview">
	<title>Overview</title>
	<para>
		This module contains functions that are used to perform digest 
		authentication and some URI checks against an AAA server.
		In order to perform the authentication, the proxy will pass along the 
		credentials to the AAA server which will in turn send a reply 
		containing result of the authentication. So basically the whole
		authentication is done in the AAA server. Before sending the request 
		to the AAA server we perform some sanity checks over the 
		credentials to make sure that only well formed credentials will get to 
		the server.
	</para>
	</section>
	<section>
	<title>Additional Credentials</title>
	<para>
		When performing authentication, the AAA server may include in the
		response additional credentials. This scheme is very useful in fetching
		additional user information from the AAA server without making
		extra queries.
	</para>
	<para>
		The additional credentials are embedded in the AAA reply as AVPs 
		<quote>SIP-AVP</quote>. The syntax of the value is:
		<itemizedlist>
			<listitem><para><emphasis>
			value = SIP_AVP_NAME SIP_AVP_VALUE
			</emphasis></para></listitem>
			<listitem><para><emphasis>
			SIP_AVP_NAME = STRING_NAME | '#'ID_NUMBER
			</emphasis></para></listitem>
			<listitem><para><emphasis>
			SIP_AVP_VALUE = ':'STRING_VALUE | '#'NUMBER_VALUE
			</emphasis></para></listitem>
		</itemizedlist>
	</para>
	<para>
		All additional credentials will be stored as &osips; AVPs
		(SIP_AVP_NAME = SIP_AVP_VALUE).
	</para>
	<para>
		The RPID value may be fetch via this mechanism.
	</para>
	<example>
	<title><quote>SIP-AVP</quote> AAA AVP examples</title>
		<programlisting format="linespecific">
....
"email:joe@yahoo.com"
    - STRING NAME AVP (email) with STRING VALUE (joe@yahoo.com)
"#14:joe@yahoo.com"
    - ID AVP (14) with STRING VALUE (joe@yahoo.com)
"age#28"
    - STRING NAME AVP (age) with INTEGER VALUE (28)
"#14#28"
    - ID AVP (14) with INTEGER VALUE (28)
....
		</programlisting>
	</example>
	</section>

	<section id="dependencies" xreflabel="Dependencies">
	<title>Dependencies</title>
		<section>
			<title>&osips; Modules</title>
			<para>
			The module depends on the following modules (in the other words 
			the listed modules must be loaded before this module):
			<itemizedlist>
				<listitem>
				<para><emphasis>auth</emphasis> -- Authentication framework,
				only if the auth functions are used from script</para>
				</listitem>
				<listitem>
				<para><emphasis>an aaa implementing module</emphasis> -- for 
				example aaa_radius</para>
				</listitem>
			</itemizedlist>
			</para>
		</section>
		<section>
			<title>External Libraries or Applications</title>
			<para>
			This module does not depend on any external library.
			</para>
		</section>
	</section>

	<section id="exported_parameters" xreflabel="Exported Parameters">
	<title>Exported Parameters</title>
	<section id="param_aaa_url" xreflabel="aaa_url">
		<title><varname>aaa_url</varname> (string)</title>
		<para>
		This is the url representing the AAA protocol used and the location of the configuration file of this protocol.
		</para>
		<para>
		The syntax for the url is the following: "name_of_the_aaa_protocol_used:path_of_the_configuration_file"
		</para>
		<example>
		<title><varname>aaa_url</varname> parameter usage</title>
		<programlisting format="linespecific">
		
modparam("auth_aaa", "aaa_url", "radius:/etc/radiusclient-ng/radiusclient.conf")
		</programlisting>
		</example>
	</section>
	<section id="param_auth_service_type" xreflabel="auth_service_type">
		<title><varname>auth_service_type</varname> (integer)</title>
		<para>
		This is the value of the Service-Type aaa attribute to be used when
		performing an authentication operation.
		The default should be fine for most people. See your aaa client 
		include files for numbers to be put in this parameter if you need 
		to change it.
		</para>
		<para>
		Default value is <quote>15</quote>.
		</para>
		<example>
		<title><varname>auth_service_type</varname> parameter usage</title>
		<programlisting format="linespecific">
		
modparam("auth_aaa", "auth_service_type", 15)
		</programlisting>
		</example>
	</section>

	<section id="param_check_service_type" xreflabel="check_service_type">
		<title><varname>check_service_type</varname> (integer)</title>
		<para>
		AAA service type used by <function>aaa_does_uri_exist</function> and
		<function>aaa_does_uri_user_exist</function> checks.
		</para>
		<para>
		<emphasis>
			Default value is 10 (Call-Check).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>check_service_type</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("auth_aaa", "check_service_type", 11)
...
</programlisting>
		</example>
	</section>

	<section id="param_use_ruri_flag" xreflabel="use_ruri_flag">
		<title><varname>use_ruri_flag</varname> (string/integer)</title>
		<para>
		When this parameter is set to the value other than "NULL" and the
		request being authenticated has flag with matching number set
		via setflag() function, use Request URI instead of uri parameter
		value from the Authorization / Proxy-Authorization header field
		to perform AAA authentication.  This is intended to provide
		workaround for misbehaving NAT / routers / ALGs that alter request
		in the transit, breaking authentication.  At the time of this
		writing, certain versions of Linksys WRT54GL are known to do that.
		</para>
		<para>
		Default value is <quote>NULL</quote> (not set).
		</para>
		<example>
		<title><varname>use_ruri_flag</varname> parameter usage</title>
		<programlisting format="linespecific">
		
modparam("auth_aaa", "use_ruri_flag", "USE_RURI_FLAG")
		</programlisting>
		</example>
	</section>
	</section>

	<section id="exported_functions" xreflabel="exported_functions">
	<title>Exported Functions</title>
	<section id="func_aaa_www_authorize" xreflabel="aaa_www_authorize()">
		<title><function moreinfo="none">aaa_www_authorize(realm, [uri_user])</function></title>
		<para>
		The function verifies credentials according to 
		<ulink url="http://www.ietf.org/rfc/rfc2617.txt">RFC2617</ulink>. If 
		the credentials are verified successfully then the function will 
		succeed and mark the credentials as authorized (marked credentials can 
		be later used by some other functions). If the function was unable to 
		verify the credentials for some reason then it will fail and
		the script should call
		<function moreinfo="none">www_challenge</function>
		which will challenge the user again.
		</para>
		<para>Negative codes may be interpreted as follows:</para>
		<itemizedlist>
			<listitem><para>
			<emphasis>-5 (generic error)</emphasis> - some generic error
			occurred and no reply was sent out;
			</para></listitem>
			<listitem><para>
			<emphasis>-4 (no credentials)</emphasis> - credentials were not
			found in request;
			</para></listitem>
			<listitem><para>
			<emphasis>-3 (stale nonce)</emphasis> - stale nonce;
			</para></listitem>
		</itemizedlist>
		<para>
		This function will, in fact, perform sanity checks over the received 
		credentials and then pass them along to the aaa server which will 
		verify the credentials and return whether they are valid or not.
		</para>
		<para>Meaning of the parameter is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>realm (string)</emphasis> - Realm is a opaque string that 
			the user agent should present to the user so he can decide what 
			username and password to use. Usually this is domain of the host 
			the server is running on.
			</para>
			<para>
			If an empty string <quote></quote> is used then the server will 
			generate it from the request. In case of REGISTER requests To 
			header field domain will be used (because this header field 
			represents a user being registered), for all other messages From 
			header field domain will be used.
			</para>
			<para>
			The string may contain pseudo variables.
			</para>
		</listitem>
		<listitem>
			<para><emphasis>uri_user (string, optional)</emphasis> -
			value passed to the Radius server as value of the SIP-URI-User
			check item.  If this parameter is not present, the server will
			generate the SIP-URI-User check item value from the username part
			of the To header field URI.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function moreinfo="none">aaa_www_authorize</function> usage</title>
		<programlisting format="linespecific">
		
...
if (!aaa_www_authorize("siphub.net")) {
	www_challenge("siphub.net", "1");
};
...

</programlisting>
		</example>
	</section>

	<section id="func_aaa_proxy_authorize" xreflabel="aaa_proxy_authorize()">
		<title><function moreinfo="none">aaa_proxy_authorize(realm, [uri_user])</function></title>
		<para>
		The function verifies credentials according to 
		<ulink url="http://www.ietf.org/rfc/rfc2617.txt">RFC2617</ulink>. If 
		the credentials are verified successfully then the function will 
		succeed and mark the credentials as authorized (marked credentials can 
		be later used by some other functions). If the function was unable to 
		verify the credentials for some reason then it will fail and the script 
		should call <function moreinfo="none">proxy_challenge</function> which 
		will challenge the user again. For more about the negative return 
		codes, see the above function.
		</para>
		<para>
		This function will, in fact, perform sanity checks over the received 
		credentials and then pass them along to the aaa server which will 
		verify the credentials and return whether they are valid or not.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>realm (string)</emphasis> - Realm is a opaque string that
			the user agent should present to the user so he can decide what 
			username and password to use.  This is usually
			one of the domains the proxy is responsible for.
			If an empty string <quote></quote> is used then the server will 
			generate realm from host part of From header field URI.
			</para>
			<para>
			The string may contain pseudo variables.
			</para>
		</listitem>
		<listitem>
			<para><emphasis>uri_user (string, optional)</emphasis> -
			value passed to the Radius server as value of the SIP-URI-User
			check item.  If this parameter is not present, the server will
			generate the SIP-URI-User check item value from the username part
			of the To header field URI.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function moreinfo="none">proxy_authorize</function> usage</title>
		<programlisting format="linespecific">
		
...
if (!aaa_proxy_authorize("")) {   # Realm and URI user will be autogenerated
	proxy_challenge("", "1");
};
...
if (!aaa_proxy_authorize($pd, $pU)) { # Realm and URI user are taken
	proxy_challenge($pd, "1");         # from P-Preferred-Identity
};                                           # header field
...

</programlisting>
		</example>
	</section>

	<section id="func_aaa_does_uri_exist" xreflabel="aaa_does_uri_exist()">
		<title>
		<function moreinfo="none">aaa_does_uri_exist([sip_uri])</function>
		</title>
		<para>
		Checks from Radius if the SIP URI stored in the "sip_uri" parameter
		(or user@host part of the Request-&uri; if "sip_uri" is not given)
		belongs to a local user. Can be used to decide if 404 or 480 should
		be returned after lookup has failed.   If yes, loads AVP
		based on SIP-AVP reply items returned from Radius.  Each
		SIP-AVP reply item must have a string value of form:
		</para>
		<para>
		<itemizedlist>
			<listitem><para><emphasis>
			value = SIP_AVP_NAME SIP_AVP_VALUE
			</emphasis></para></listitem>
			<listitem><para><emphasis>
			SIP_AVP_NAME = STRING_NAME | '#'ID_NUMBER
			</emphasis></para></listitem>
			<listitem><para><emphasis>
			SIP_AVP_VALUE = ':'STRING_VALUE | '#'NUMBER_VALUE
			</emphasis></para></listitem>
		</itemizedlist>
		</para>
		<para>
		Returns 1 if Radius returns Access-Accept, -1 if Radius
		returns Access-Reject, and -2 in case of internal
		error.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function>aaa_does_uri_exist</function> usage</title>
		<programlisting format="linespecific">
...
if (aaa_does_uri_exist()) {
	...
};
...
</programlisting>
		</example>
	</section>

	<section id="func_aaa_does_uri_user_exist" xreflabel="aaa_does_uri_user_exist()">
		<title>
		<function moreinfo="none">aaa_does_uri_user_exist([sip_uri])</function>
		</title>
		<para>
		Similar to aaa_does_uri_exist, but check is done
		based only on Request-URI user part or user stored in "sip_uri".
		The user should thus be unique among all users, such as an
		E.164 number.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function>aaa_does_uri_user_exist</function> usage</title>
		<programlisting format="linespecific">
...
if (aaa_does_uri_user_exist()) {
	...
};
...
</programlisting>
		</example>
	</section>

	</section>
</chapter>

