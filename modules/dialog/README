dialog Module

Bogdan-Andrei Iancu

Edited by

Bogdan-Andrei Iancu

Edited by

Vladut-Stefan Paiu

   Copyright © 2006-2009 Voice Sistem SRL
   Revision History
   Revision $Revision: 8771 $ $Date$
     __________________________________________________________

   Table of Contents

   1. Admin Guide

        1.1. Overview
        1.2. How it works
        1.3. Dialog profiling
        1.4. Dialog replication
        1.5. Dependencies

              1.5.1. OpenSIPS Modules
              1.5.2. External Libraries or Applications

        1.6. Exported Parameters

              1.6.1. enable_stats (integer)
              1.6.2. hash_size (integer)
              1.6.3. log_profile_hash_size (integer)
              1.6.4. rr_param (string)
              1.6.5. default_timeout (integer)
              1.6.6. dlg_extra_hdrs (string)
              1.6.7. dlg_match_mode (integer)
              1.6.8. db_url (string)
              1.6.9. db_mode (integer)
              1.6.10. db_update_period (integer)
              1.6.11. options_ping_interval (integer)
              1.6.12. reinvite_ping_interval (integer)
              1.6.13. table_name (string)
              1.6.14. call_id_column (string)
              1.6.15. from_uri_column (string)
              1.6.16. from_tag_column (string)
              1.6.17. to_uri_column (string)
              1.6.18. to_tag_column (string)
              1.6.19. from_cseq_column (string)
              1.6.20. to_cseq_column (string)
              1.6.21. from_route_column (string)
              1.6.22. to_route_column (string)
              1.6.23. from_contact_column (string)
              1.6.24. to_contact_column (string)
              1.6.25. from_sock_column (string)
              1.6.26. to_sock_column (string)
              1.6.27. dlg_id_column (string)
              1.6.28. state_column (string)
              1.6.29. start_time_column (string)
              1.6.30. timeout_column (string)
              1.6.31. profiles_column (string)
              1.6.32. vars_column (string)
              1.6.33. sflags_column (string)
              1.6.34. mflags_column (string)
              1.6.35. flags_column (string)
              1.6.36. profiles_with_value (string)
              1.6.37. profiles_no_value (string)
              1.6.38. db_flush_vals_profiles (int)
              1.6.39. timer_bulk_del_no (int)
              1.6.40. cachedb_url (string)
              1.6.41. profile_value_prefix (string)
              1.6.42. profile_no_value_prefix (string)
              1.6.43. profile_size_prefix (string)
              1.6.44. profile_timeout (int)
              1.6.45. accept_replicated_dialogs (int)
              1.6.46. replicate_dialogs_to (int)
              1.6.47. accept_replicated_profiles (int)
              1.6.48. replicate_profiles_to (int)
              1.6.49. accept_replicated_profile_timeout (int)
              1.6.50. auth_check (int)
              1.6.51. replicate_profiles_buffer (string)
              1.6.52. replicate_profiles_check (string)
              1.6.53. replicate_profiles_timer (string)
              1.6.54. replicate_profiles_expire (string)

        1.7. Exported Functions

              1.7.1. create_dialog()
              1.7.2. match_dialog()
              1.7.3. validate_dialog()
              1.7.4. fix_route_dialog()
              1.7.5. get_dialog_info(attr,var,key,key_val)
              1.7.6. set_dlg_profile(profile,[value])
              1.7.7. unset_dlg_profile(profile,[value])
              1.7.8. is_in_profile(profile,[value])
              1.7.9. get_profile_size(profile,[value],size)
              1.7.10. set_dlg_flag(idx)
              1.7.11. test_and_set_dlg_flag(idx, value)
              1.7.12. reset_dlg_flag(idx)
              1.7.13. is_dlg_flag_set(idx)
              1.7.14. store_dlg_value(name,val)
              1.7.15. fetch_dlg_value(name,pvar)

        1.8. Exported statistics

              1.8.1. active_dialogs
              1.8.2. early_dialogs
              1.8.3. processed_dialogs
              1.8.4. expired_dialogs
              1.8.5. failed_dialogs
              1.8.6. create_sent
              1.8.7. update_sent
              1.8.8. delete_sent
              1.8.9. create_recv
              1.8.10. update_recv
              1.8.11. delete_recv

        1.9. Exported MI Functions

              1.9.1. dlg_list
              1.9.2. dlg_list_ctx
              1.9.3. dlg_end_dlg
              1.9.4. profile_get_size
              1.9.5. profile_list_dlgs
              1.9.6. profile_get_values
              1.9.7. profile_end_dlgs
              1.9.8. dlg_db_sync
              1.9.9. dlg_restore_db
              1.9.10. list_all_profiles
              1.9.11. profile_bin_status

        1.10. Exported pseudo-variables

              1.10.1. $DLG_count
              1.10.2. $DLG_status
              1.10.3. $DLG_lifetime
              1.10.4. $DLG_flags
              1.10.5. $DLG_dir
              1.10.6. $DLG_did
              1.10.7. $DLG_end_reason
              1.10.8. $DLG_timeout
              1.10.9. $dlg_val(name)

        1.11. Exported Events

              1.11.1. E_DLG_STATE_CHANGED

   2. Developer Guide

        2.1. Available Functions

              2.1.1. register_dlgcb (dialog, type, cb, param,
                      free_param_cb)

   3. Frequently Asked Questions

   List of Examples

   1.1. Set enable_stats parameter
   1.2. Set hash_size parameter
   1.3. Set hash_size parameter
   1.4. Set rr_param parameter
   1.5. Set default_timeout parameter
   1.6. Set dlf_extra_hdrs parameter
   1.7. Set dlg_match_mode parameter
   1.8. Set db_url parameter
   1.9. Set db_mode parameter
   1.10. Set db_update_period parameter
   1.11. Set options_ping_interval parameter
   1.12. Set reinvite_ping_interval parameter
   1.13. Set table_name parameter
   1.14. Set call_id_column parameter
   1.15. Set from_uri_column parameter
   1.16. Set from_tag_column parameter
   1.17. Set to_uri_column parameter
   1.18. Set to_tag_column parameter
   1.19. Set from_cseq_column parameter
   1.20. Set to_cseq_column parameter
   1.21. Set from_route_column parameter
   1.22. Set to_route_column parameter
   1.23. Set from_contact_column parameter
   1.24. Set to_contact_column parameter
   1.25. Set from_sock_column parameter
   1.26. Set to_sock_column parameter
   1.27. Set dlg_id_column parameter
   1.28. Set state_column parameter
   1.29. Set start_time_column parameter
   1.30. Set timeout_column parameter
   1.31. Set profiles_column parameter
   1.32. Set vars_column parameter
   1.33. Set sflags_column parameter
   1.34. Set mflags_column parameter
   1.35. Set flags_column parameter
   1.36. Set profiles_with_value parameter
   1.37. Set profiles_no_value parameter
   1.38. Set db_flush_vals_profiles parameter
   1.39. Set timer_bulk_del_no parameter
   1.40. Set cachedb_url parameter
   1.41. Set profile_value_prefix parameter
   1.42. Set profile_no_value_prefix parameter
   1.43. Set profile_size_prefix parameter
   1.44. Set profile_timeout parameter
   1.45. Set accept_replicated_dialogs parameter
   1.46. Set replicate_dialogs_to parameter
   1.47. Set accept_replicated_profiles parameter
   1.48. Set replicate_profiles_to parameter
   1.49. Set accept_replicated_profile_timeout parameter
   1.50. Set auth_check parameter
   1.51. Set replicate_profiles_buffer parameter
   1.52. Set replicate_profiles_check parameter
   1.53. Set replicate_profiles_timer parameter
   1.54. Set replicate_profiles_expire parameter
   1.55. create_dialog() usage
   1.56. match_dialog() usage
   1.57. validate_dialog() usage
   1.58. fix_route_dialog() usage
   1.59. get_dialog_info usage
   1.60. set_dlg_profile usage
   1.61. unset_dlg_profile usage
   1.62. is_in_profile usage
   1.63. get_profile_size usage
   1.64. set_dlg_flag usage
   1.65. test_and_set_dlg_flag usage
   1.66. reset_dlg_flag usage
   1.67. is_dlg_flag_set usage
   1.68. store_dlg_value usage
   1.69. fetch_dlg_value usage

Chapter 1. Admin Guide

1.1. Overview

   The dialog module provides dialog awareness to the OpenSIPS
   proxy. Its functionality is to keep trace of the current
   dialogs, to offer information about them (like how many dialogs
   are active).

   Aside tracking, the dialog module offers functionalities like
   flags and attributes per dialog (persistent data across
   dialog), dialog profiling and dialog termination (on timeout
   base or external triggered).

   The module, via an internal API, also provide the foundation to
   build on top of it more complex dialog-based functionalities
   via other OpenSIPS modules.

1.2. How it works

   To create the dialog associated to an initial request, you must
   call the create_dialog() function, with or without parameter..

   The dialog is automatically destroyed when a “BYE” is received.
   In case of no “BYE”, the dialog lifetime is controlled via the
   default timeout (see “default_timeout” - Section 1.6.5,
   “default_timeout (integer)”) and custom timeout (see
   “$DLG_timeout” - Section 1.10.8, “$DLG_timeout”).

1.3. Dialog profiling

   Dialog profiling is a mechanism that helps in classifying,
   sorting and keeping trace of certain types of dialogs, using
   whatever properties of the dialog (like caller, destination,
   type of calls, etc). Dialogs can be dynamically added in
   different (and several) profile tables - logically, each
   profile table can have a special meaning (like dialogs outside
   the domain, dialogs terminated to PSTN, etc).

   There are two types of profiles:
     * with no value - a dialog simply belongs to a profile. (like
       outbound calls profile). There is no other additional
       information to describe the dialog's belonging to the
       profile;
     * with value - a dialog belongs to a profile having a certain
       value (like in caller profile, where the value is the
       caller ID). The belonging of the dialog to the profile is
       strictly related to the value.

   A dialog can be added to multiple profiles in the same time.

   Profiles are visible (at the moment) in the request route (for
   initial and sequential requests) and in the branch, failure and
   reply routes of the original request.

   Dialog profiles can also be used in distributed systems, using
   the OpenSIPS CacheDB Interface. This feature allows you to
   share dialog profile information with multiple OpenSIPS
   instaces that use the same CacheDB backend. In order to do
   that, the cachedb_url parameter must be defined. Also, the
   profile must be marked as shared, by adding the '/s' suffix to
   the name of the profile in the profiles_with_value or
   profiles_no_value parameters.

1.4. Dialog replication

   Dialog replication is a mechanism used to mirror all dialog
   changes taking place in one OpenSIPS instance to one or more
   other different instances. The logic is simplified by using the
   core Binary Internal Interface to build and send the
   replication-related UDP packets.

   The feature is especially useful when dealing with very large
   systems, where failover through a database backend is no longer
   feasible, due to the high amount of time required for the
   backup instance to load the dialog information stored in a
   typical dialog table by the crashed instance.

   Configuring both receival and sending of dialog replication
   packets is trivial and can be done by using the
   accept_replicated_dialogs and replicate_dialogs_to parameters
   of the module. In addition to this, the module also exports
   several statistics regarding the number of replication packets
   sent/received.

   Profiles replication can also be achieved using the
   accept_replicated_profiles and replicate_profiles_to
   parameters.

1.5. Dependencies

1.5.1. OpenSIPS Modules

   The following modules must be loaded before this module:
     * TM - Transaction module
     * RR - Record-Route module

1.5.2. External Libraries or Applications

   The following libraries or applications must be installed
   before running OpenSIPS with this module loaded:
     * None.

1.6. Exported Parameters

1.6.1. enable_stats (integer)

   If the statistics support should be enabled or not. Via
   statistic variables, the module provide information about the
   dialog processing. Set it to zero to disable or to non-zero to
   enable it.

   Default value is “1 (enabled)”.

   Example 1.1. Set enable_stats parameter
...
modparam("dialog", "enable_stats", 0)
...

1.6.2. hash_size (integer)

   The size of the hash table internally used to keep the dialogs.
   A larger table is much faster but consumes more memory. The
   hash size must be a power of 2 number.

   IMPORTANT: If dialogs' information should be stored in a
   database, a constant hash_size should be used, otherwise the
   restored process will not take place. If you really want to
   modify the hash_size you must delete all table's rows before
   restarting OpenSIPS.

   Default value is “4096”.

   Example 1.2. Set hash_size parameter
...
modparam("dialog", "hash_size", 1024)
...

1.6.3. log_profile_hash_size (integer)

   The size of the hash table internally used to store
   profile->dialog associations. A larger table can provide more
   parallel operations but consumes more memory. The hash size is
   provided as the base 2 logarithm(e.g. log_profile_hash_size =4
   means the table has 2^4 entries).

   Default value is “4”.

   Example 1.3. Set hash_size parameter
...
modparam("dialog", "log_profile_hash_size", 5) #set a table size of 32
...

1.6.4. rr_param (string)

   Name of the Record-Route parameter to be added with the dialog
   cookie. It is used for fast dialog matching of the sequential
   requests.

   Default value is “did”.

   Example 1.4. Set rr_param parameter
...
modparam("dialog", "rr_param", "xyz")
...

1.6.5. default_timeout (integer)

   The default dialog timeout (in seconds) if no custom one is
   set.

   Default value is “43200 (12 hours)”.

   Example 1.5. Set default_timeout parameter
...
modparam("dialog", "default_timeout", 21600)
...

1.6.6. dlg_extra_hdrs (string)

   A string containing the extra headers (full format, with EOH)
   to be added in the requests generated by the module (like
   BYEs).

   Default value is “NULL”.

   Example 1.6. Set dlf_extra_hdrs parameter
...
modparam("dialog", "dlg_extra_hdrs", "Hint: credit expired\r\n")
...

1.6.7. dlg_match_mode (integer)

   How the seqential requests should be matched against the known
   dialogs. The modes are a combination between matching based on
   a cookie (DID) stored as cookie in Record-Route header and the
   matching based on SIP elements (as in RFC3261).

   The supported modes are:
     * 0 - DID_ONLY - the match is done exclusively based on DID;
     * 1 - DID_FALLBACK - the match is first tried based on DID
       and if not present, it will fallback to SIP matching;
     * 2 - DID_NONE - the match is done exclusively based on SIP
       elements; no DID information is added in RR.

   Default value is “0 (DID_ONLY)”.

   Example 1.7. Set dlg_match_mode parameter
...
modparam("dialog", "dlg_match_mode", 1)
...

1.6.8. db_url (string)

   If you want to store the information about the dialogs in a
   database a database url must be specified.

   Default value is
   “mysql://opensips:opensipsrw@localhost/opensips”.

   Example 1.8. Set db_url parameter
...
modparam("dialog", "db_url", "dbdriver://username:password@dbhost/dbname
")
...

1.6.9. db_mode (integer)

   Describe how to push into the DB the dialogs' information from
   memory.

   The supported modes are:
     * 0 - NO_DB - the memory content is not flushed into DB;
     * 1 - REALTIME - any dialog information changes will be
       reflected into the database immediately.
     * 2 - DELAYED - the dialog information changes will be
       flushed into the DB periodically, based on a timer routine.
     * 3 - SHUTDOWN - the dialog information will be flushed into
       DB only at shutdown - no runtime updates.

   Default value is “0”.

   Example 1.9. Set db_mode parameter
...
modparam("dialog", "db_mode", 1)
...

1.6.10. db_update_period (integer)

   The interval (seconds) at which to update dialogs' information
   if you chose to store the dialogs' info at a given interval. A
   too short interval will generate intensive database operations,
   a too large one will not notice short dialogs.

   Default value is “60”.

   Example 1.10. Set db_update_period parameter
...
modparam("dialog", "db_update_period", 120)
...

1.6.11. options_ping_interval (integer)

   The interval (seconds) at which OpenSIPS will generate
   in-dialog OPTIONS pings for dialogs.

   Default value is “30”.

   Example 1.11. Set options_ping_interval parameter
...
modparam("dialog", "options_ping_interval", 20)
...

1.6.12. reinvite_ping_interval (integer)

   The interval (seconds) at which OpenSIPS will generate
   in-dialog Re-INVITE pings for dialogs.

   Default value is “300”.

   Example 1.12. Set reinvite_ping_interval parameter
...
modparam("dialog", "reinvite_ping_interval", 600)
...

1.6.13. table_name (string)

   If you want to store the information about the dialogs in a
   database a table name must be specified.

   Default value is “dialog”.

   Example 1.13. Set table_name parameter
...
modparam("dialog", "table_name", "my_dialog")
...

1.6.14. call_id_column (string)

   The column's name in the database to store the dialogs' callid.

   Default value is “callid”.

   Example 1.14. Set call_id_column parameter
...
modparam("dialog", "call_id_column", "callid_c_name")
...

1.6.15. from_uri_column (string)

   The column's name in the database to store the caller's sip
   address.

   Default value is “from_uri”.

   Example 1.15. Set from_uri_column parameter
...
modparam("dialog", "from_uri_column", "from_uri_c_name")
...

1.6.16. from_tag_column (string)

   The column's name in the database to store the From tag from
   the Invite request.

   Default value is “from_tag”.

   Example 1.16. Set from_tag_column parameter
...
modparam("dialog", "from_tag_column", "from_tag_c_name")
...

1.6.17. to_uri_column (string)

   The column's name in the database to store the calee's sip
   address.

   Default value is “to_uri”.

   Example 1.17. Set to_uri_column parameter
...
modparam("dialog", "to_uri_column", "to_uri_c_name")
...

1.6.18. to_tag_column (string)

   The column's name in the database to store the To tag from the
   200 OK response to the Invite request, if present.

   Default value is “to_tag”.

   Example 1.18. Set to_tag_column parameter
...
modparam("dialog", "to_tag_column", "to_tag_c_name")
...

1.6.19. from_cseq_column (string)

   The column's name in the database to store the cseq from caller
   side.

   Default value is “caller_cseq”.

   Example 1.19. Set from_cseq_column parameter
...
modparam("dialog", "from_cseq_column", "from_cseq_c_name")
...

1.6.20. to_cseq_column (string)

   The column's name in the database to store the cseq from callee
   side.

   Default value is “callee_cseq”.

   Example 1.20. Set to_cseq_column parameter
...
modparam("dialog", "to_cseq_column", "to_cseq_c_name")
...

1.6.21. from_route_column (string)

   The column's name in the database to store the route records
   from caller side (proxy to caller).

   Default value is “caller_route_set”.

   Example 1.21. Set from_route_column parameter
...
modparam("dialog", "from_route_column", "from_route_c_name")
...

1.6.22. to_route_column (string)

   The column's name in the database to store the route records
   from callee side (proxy to callee).

   Default value is “callee_route_set”.

   Example 1.22. Set to_route_column parameter
...
modparam("dialog", "to_route_column", "to_route_c_name")
...

1.6.23. from_contact_column (string)

   The column's name in the database to store the caller's contact
   uri.

   Default value is “caller_contact”.

   Example 1.23. Set from_contact_column parameter
...
modparam("dialog", "from_contact_column", "from_contact_c_name")
...

1.6.24. to_contact_column (string)

   The column's name in the database to store the callee's contact
   uri.

   Default value is “callee_contact”.

   Example 1.24. Set to_contact_column parameter
...
modparam("dialog", "to_contact_column", "to_contact_c_name")
...

1.6.25. from_sock_column (string)

   The column's name in the database to store the information
   about the local interface receiving the traffic from caller.

   Default value is “caller_sock”.

   Example 1.25. Set from_sock_column parameter
...
modparam("dialog", "from_sock_column", "from_sock_c_name")
...

1.6.26. to_sock_column (string)

   The column's name in the database to store information about
   the local interface receiving the traffic from callee.

   Default value is “callee_sock”.

   Example 1.26. Set to_sock_column parameter
...
modparam("dialog", "to_sock_column", "to_sock_c_name")
...

1.6.27. dlg_id_column (string)

   The column's name in the database to store the dialogs' id
   information.

   Default value is “hash_id”.

   Example 1.27. Set dlg_id_column parameter
...
modparam("dialog", "dlg_id_column", "dlg_id_c_name")
...

1.6.28. state_column (string)

   The column's name in the database to store the dialogs' state
   information.

   Default value is “state”.

   Example 1.28. Set state_column parameter
...
modparam("dialog", "state_column", "state_c_name")
...

1.6.29. start_time_column (string)

   The column's name in the database to store the dialogs' start
   time information.

   Default value is “start_time”.

   Example 1.29. Set start_time_column parameter
...
modparam("dialog", "start_time_column", "start_time_c_name")
...

1.6.30. timeout_column (string)

   The column's name in the database to store the dialogs'
   timeout.

   Default value is “timeout”.

   Example 1.30. Set timeout_column parameter
...
modparam("dialog", "timeout_column", "timeout_c_name")
...

1.6.31. profiles_column (string)

   The column's name in the database to store the dialogs'
   profiles.

   Default value is “profiles”.

   Example 1.31. Set profiles_column parameter
...
modparam("dialog", "profiles_column", "profiles_c_name")
...

1.6.32. vars_column (string)

   The column's name in the database to store the dialogs' vars.

   Default value is “vars”.

   Example 1.32. Set vars_column parameter
...
modparam("dialog", "vars_column", "vars_c_name")
...

1.6.33. sflags_column (string)

   The column's name in the database to store the dialogs' script
   flags.

   Default value is “script_flags”.

   Example 1.33. Set sflags_column parameter
...
modparam("dialog", "sflags_column", "sflags_c_name")
...

1.6.34. mflags_column (string)

   The column's name in the database to store the dialogs' module
   flags.

   Default value is “module_flags”.

   Example 1.34. Set mflags_column parameter
...
modparam("dialog", "mflags_column", "mflags_c_name")
...

1.6.35. flags_column (string)

   The column's name in the database to store the dialogs' flags.

   Default value is “flags”.

   Example 1.35. Set flags_column parameter
...
modparam("dialog", "flags_column", "flags_c_name")
...

1.6.36. profiles_with_value (string)

   List of names for profiles with values. Flag /b allows
   replicating dialogs over the bin interface. Before, all of them
   were replicated.

   Default value is “empty”.

   Example 1.36. Set profiles_with_value parameter
...
modparam("dialog", "profiles_with_value", "caller ; my_profile; share/s;
 repl/b;")
...

1.6.37. profiles_no_value (string)

   List of names for profiles without values. Flag /b allows
   replicating dialogs over the bin interface. Before, all of them
   were replicated.

   Default value is “empty”.

   Example 1.37. Set profiles_no_value parameter
...
modparam("dialog", "profiles_no_value", "inbound ; outbound ; shared/s;
repl/b;")
...

1.6.38. db_flush_vals_profiles (int)

   Pushes dialog values, profiles and flags into the database
   along with other dialog state information (see db_mode 1 and
   2).

   Default value is “empty”.

   Example 1.38. Set db_flush_vals_profiles parameter
...
modparam("dialog", "db_flush_vals_profiles", 1)
...

1.6.39. timer_bulk_del_no (int)

   The number of dialogs that should be attempted to be deleted at
   the same time ( a single query ) from the DB back-end.

   Default value is “1”.

   Example 1.39. Set timer_bulk_del_no parameter
...
modparam("dialog", "timer_bulk_del_no", 10)
...

1.6.40. cachedb_url (string)

   Enables distributed dialog profiles and specifies the backend
   that should be used by the CacheDB interface.

   Default value is “empty”.

   Example 1.40. Set cachedb_url parameter
...
modparam("dialog", "cachedb_url", "redis://127.0.0.1:6379")
...

1.6.41. profile_value_prefix (string)

   Specifies what prefix should be added to the profiles with
   value when they are inserted into CacheDB backed. This is only
   used when distributed profiles are enabled.

   Default value is “dlg_val_”.

   Example 1.41. Set profile_value_prefix parameter
...
modparam("dialog", "profile_value_prefix", "dlgv_")
...

1.6.42. profile_no_value_prefix (string)

   Specifies what prefix should be added to the profiles without
   value when they are inserted into CacheDB backed. This is only
   used when distributed profiles are enabled.

   Default value is “dlg_noval_”.

   Example 1.42. Set profile_no_value_prefix parameter
...
modparam("dialog", "profile_no_value_prefix", "dlgnv_")
...

1.6.43. profile_size_prefix (string)

   Specifies what prefix should be added to the entity that holds
   the profiles with value size in CacheDB backed. This is only
   used when distributed profiles are enabled.

   Default value is “dlg_size_”.

   Example 1.43. Set profile_size_prefix parameter
...
modparam("dialog", "profile_size_prefix", "dlgs_")
...

1.6.44. profile_timeout (int)

   Specifies how long a dialog profile should be kept in the
   CacheDB until it expires. This is only used when distributed
   profiles are enabled.

   Default value is “86400”.

   Example 1.44. Set profile_timeout parameter
...
modparam("dialog", "profile_timeout", "43200")
...

1.6.45. accept_replicated_dialogs (int)

   Registers the dialog module to the OpenSIPS Binary Internal
   Interface. It specifies the instances, that belong to a certain
   cluster, from which we should expect incoming packets.

   Default value is 0 (not registered).

   Example 1.45. Set accept_replicated_dialogs parameter
...
modparam("dialog", "accept_replicated_dialogs", 1)
...

1.6.46. replicate_dialogs_to (int)

   Adds dialog replication destinations,that belong to the
   specified cluster id. The destination will receive all
   dialog-related events (creation, updating and deletion) over
   TCP, using the Binary Internal Interface.

   Default value is “0” (no replication destinations).

   Example 1.46. Set replicate_dialogs_to parameter
...
modparam("dialog", "replicate_dialogs_to", 1)
...

1.6.47. accept_replicated_profiles (int)

   Registers the dialog module to the OpenSIPS Binary Internal
   Interface for profiles replication. It specifies the instances,
   that belong to a certain cluster, from which we should expect
   incoming packets.

   Default value is 0 (not registered).

   Example 1.47. Set accept_replicated_profiles parameter
...
modparam("dialog", "accept_replicated_profiles", 1)
...

1.6.48. replicate_profiles_to (int)

   Adds profiles replication destinations, that belong to the
   specified cluster id. The destination will receive all
   dialog-related events (creation, updating and deletion) over
   TCP, using the Binary Internal Interface.

   Default value is “0” (no replication destinations).

   Example 1.48. Set replicate_profiles_to parameter
...
modparam("dialog", "replicate_profiles_to", 1)
...

1.6.49. accept_replicated_profile_timeout (int)

   The time between two succesive incoming packets.

   Default value is “10”.

   Example 1.49. Set accept_replicated_profile_timeout parameter
...
modparam("dialog", "accept_replicated_profile_timeout", 30)
...

1.6.50. auth_check (int)

   Authentication check for incoming packets.

   Default value is “0” (disabled).

   Example 1.50. Set auth_check parameter
...
modparam("dialog", "auth_check", 1)
...

1.6.51. replicate_profiles_buffer (string)

   Used to specify the length of the buffer used by the binary
   replication, in bytes. Usually this should be big enough to
   hold as much data as possible, but small enough to avoid UDP
   fragmentation. The recommended value is the smallest MTU
   between all the replication instances.

   Default value is 1400 bytes.

   Example 1.51. Set replicate_profiles_buffer parameter
...
modparam("dialog", "replicate_profiles_buffer", 500)
...

1.6.52. replicate_profiles_check (string)

   Timer in seconds, used to specify how often the module should
   check whether old, replicated profiles values are obsolete and
   should be removed. should replicate its profiles to the other
   instances.

   Default value is 10 s.

   Example 1.52. Set replicate_profiles_check parameter
...
modparam("dialog", "replicate_profiles_check", 100)
...

1.6.53. replicate_profiles_timer (string)

   Timer in milliseconds, used to specify how often the module
   should replicate its profiles to the other instances.

   Default value is 10 ms.

   Example 1.53. Set replicate_profiles_timer parameter
...
modparam("dialog", "replicate_profiles_timer", 100)
...

1.6.54. replicate_profiles_expire (string)

   Timer in seconds, used to specify when the profiles counters
   received from a different instance should no longer be taken
   into account. This is used to prevent obsolete values, in case
   an instance stops replicating its counters.

   Default value is 10 s.

   Example 1.54. Set replicate_profiles_expire parameter
...
modparam("dialog", "replicate_profiles_expire", 10)
...

1.7. Exported Functions

1.7.1.  create_dialog()

   The function creats the dialog for the currently processed
   request. The request must be an initial request. Optionally,the
   function also receives a string parameter, which specifies
   whether the dialog end-points should be pinged via SIP options
   messages. The parameter can be "P" to specify to only ping the
   caller, "p" to only ping the callee or "Pp" to ping both dialog
   sides. If the extra string parameter is provided and one
   end-point fails to respond to a options ping, OpenSIPS will
   terminate the dialog from the middle. Also, the end-points can
   be pinged via in-dialog Re-INVITE SIP messages. This behaviour
   is controlled via the "R" flags for pinging the caller side,
   and the "r" flag for re-invite pinging the callee side. If one
   end-points fails to re-negociate the session via the Re-INVITE
   pings, OpenSIPS will terminate the dialog from the middle The
   string parameter can also contain "B" to activate the bye on
   timeout behavior.

   The function returns true if the dialog was successfully
   created or if the dialog was previously created.

   This function can be used from REQUEST_ROUTE.

   Example 1.55. create_dialog() usage
...
create_dialog();
...
#ping caller
create_dialog("P");
...
#ping caller and callee
create_dialog("Pp");

#bye on timeout
create_dialog("B");
...

1.7.2.  match_dialog()

   This function is to be used to match a sequential (in-dialog)
   request to an existing dialog. In other words, the function
   will try to match the current request to an known ongoing
   dialog.

   The function tries to use (for dialog matching) the DID (Dialog
   ID) from Route header and also falls back to SIP-wise matching.

   As sequential requests are automatically matched to the dialog
   when doing "loose_route()" from script, this function is
   intended to: (A) control the place in your script where the
   dialog matching is done and (B) to cope with bogus sequential
   requests that do not have Route headers, so they are not
   handled by loose_route().

   The function returns true if a dialog exists for the request.

   This function can be used from REQUEST_ROUTE.

   Example 1.56. match_dialog() usage
...
    if (has_totag()) {
        loose_route();
        if ($DLG_status==NULL && !match_dialog() ) {
            xlog(" cannot match request to a dialog \n");
        }
    }
...

1.7.3.  validate_dialog()

   The function checks the current received requests against the
   dialog (internal data) it belongs to. Performing several tests,
   the function will help to detect the bogus injected in-dialog
   requests (like malicious BYEs).

   The performed tests are related to CSEQ sequence checking and
   routing information checking (contact and route set).

   The function returns true if a dialog exists for the request
   and if the request is valid (according to dialog data). If the
   request is invalid, the following return codes are returned :
     * -1 - invalid cseq
     * -2 - invalid remote target
     * -3 - invalid route set
     * -4 - other errors ( parsing, no dlg, etc )

   This function can be used from REQUEST_ROUTE.

   Example 1.57. validate_dialog() usage
...
    if (has_totag()) {
        loose_route();
        if ($DLG_status!=NULL && !validate_dialog() ) {
            xlog(" in-dialog bogus request \n");
        } else {
            xlog(" in-dialog valid request - $DLG_dir !\n");
        }
    }
...

1.7.4.  fix_route_dialog()

   The function forces an in dialog SIP message to contain the
   ruri, route headers and dst_uri, as specified by the internal
   data of the dialog it belongs to. The function will prevent the
   existence of bogus injected in-dialog requests ( like malicious
   BYEs )

   This function can be used from REQUEST_ROUTE.

   Example 1.58. fix_route_dialog() usage
...
    if (has_totag()) {
        loose_route();
        if ($DLG_status!=NULL)
            if (!validate_dialog())
                fix_route_dialog();
    }
...

1.7.5.  get_dialog_info(attr,var,key,key_val)

   The function extracts a dialog value from another dialog. It
   first searches through all existing (ongoing) dialogs for a
   dialog that has a dialog variable named "key" with the value
   "key_val" (so a dialog where $dlg_val(key)=="key_val"). If
   found, it returns the value of the dialog variable "attr" from
   the found dialog in the "var" pseudo-variable, otherwise
   nothing is written in "var", and a negative error code is
   returned.

   NOTE: the function does not require to be called in the context
   of a dialog - you can use it whenever / whereever for searching
   for other dialogs.

   Meaning of the parameters is as follows:
     * attr - the name of the dialog variable (from the found
       dialog) to be returned;
     * var - a pvar where to store the value of the "attr" dialog
       variable
     * key - name of a dialog variable to be used a search key
       (when looking after the target dialog)
     * key_val - the value of the dialog variable that is used as
       key in searching the target dialog.

   This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
   REPLY_ROUTE, FAILURE_ROUTE and LOCAL_ROUTE.

   Example 1.59. get_dialog_info usage
...
if ( get_dialog_info("callee","$var(x)","caller","$fu") ) {
        xlog("caller $fU has another ongoing, talking to callee $var(x)\
n")
}

# create dialog for current call and place the caller and callee attribu
tes
create_dialog();
$dlg_val(caller) = $fu;
$dlg_val(callee) = $ru;
...

1.7.6.  set_dlg_profile(profile,[value])

   Inserts the current dialog into a profile. Note that if the
   profile does not support values, this will be silently
   discarded. A dialog may be inserted in the same profile
   multiple times.

   NOTE: the dialog must be created before using this function
   (use create_dialog() function before).

   Meaning of the parameters is as follows:
     * profile - name of the profile to be added to;
     * value (optional) - string value to define the belonging of
       the dialog to the profile - note that the profile must
       support values. Pseudo-variables are supported.

   This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
   REPLY_ROUTE and FAILURE_ROUTE.

   Example 1.60. set_dlg_profile usage
...
set_dlg_profile("inbound_call");
set_dlg_profile("caller","$fu");
...

1.7.7.  unset_dlg_profile(profile,[value])

   Removes the current dialog from a profile.

   NOTE: the dialog must be created before using this function
   (use create_dialog() function before).

   Meaning of the parameters is as follows:
     * profile - name of the profile to be removed from;
     * value (optional) - string value to define the belonging of
       the dialog to the profile - note that the profile must
       support values. Pseudo-variables are supported.

   This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
   REPLY_ROUTE and FAILURE_ROUTE.

   Example 1.61. unset_dlg_profile usage
...
unset_dlg_profile("inbound_call");
unset_dlg_profile("caller","$fu");
...

1.7.8.  is_in_profile(profile,[value])

   Checks if the current dialog belongs to a profile. If the
   profile supports values, the check can be reinforced to take
   into account a specific value - if the dialog was inserted into
   the profile for a specific value. If no value is passed, only
   simply belonging of the dialog to the profile is checked. Note
   that if the profile does not support values, this will be
   silently discarded.

   NOTE: the dialog must be created before using this function
   (use create_dialog() function before).

   Meaning of the parameters is as follows:
     * profile - name of the profile to be checked against;
     * value (optional) - string value to toughen the check.
       Pseudo-variables are supported.

   This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
   REPLY_ROUTE and FAILURE_ROUTE.

   Example 1.62. is_in_profile usage
...
if (is_in_profile("inbound_call")) {
        log("this request belongs to a inbound call\n");
}
...
if (is_in_profile("caller","XX")) {
        log("this request belongs to a call of user XX\n");
}
...

1.7.9.  get_profile_size(profile,[value],size)

   Returns the number of dialogs belonging to a profile. If the
   profile supports values, the check can be reinforced to take
   into account a specific value - how many dialogs were inserted
   into the profile with a specific value. If not value is passed,
   only simply belonging of the dialog to the profile is checked.
   Note that the profile does not supports values, this will be
   silently discarded.

   Meaning of the parameters is as follows:
     * profile - name of the profile to get the size for;
     * value (optional) - string value to toughen the check.
       Pseudo-variables are supported;
     * size - an AVP or script variable to return the profile size
       in.

   This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
   REPLY_ROUTE and FAILURE_ROUTE.

   Example 1.63. get_profile_size usage
...
get_profile_size("inbound_call","$avp(size)");
xlog("currently there are $avp(size) inbound calls\n");
...
get_profile_size("caller","$fu");
xlog("currently, the user %fu has $avp(size) active outgoing calls\n");
...

1.7.10.  set_dlg_flag(idx)

   Sets the dialog flag index idx to true. The dialog flags are
   dialog persistent and they can be accessed (set and test) for
   all requests belonging to the dialog.

   The flag index can be between 0 and 31.

   NOTE: the dialog must be created before using this function
   (use create_dialog() function before).

   This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
   REPLY_ROUTE and FAILURE_ROUTE.

   Example 1.64. set_dlg_flag usage
...
set_dlg_flag("3");
...

1.7.11.  test_and_set_dlg_flag(idx, value)

   Atomically checks if the dialog flag index idx is equal to
   value. If true, changes the value with the opposite one. This
   operation is done under the dialog lock.

   The flag index can be between 0 and 31.

   The value should be 0 (false) or 1 (true).

   NOTE: the dialog must be created before using this function
   (use create_dialog() function before).

   This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
   REPLY_ROUTE and FAILURE_ROUTE.

   Example 1.65. test_and_set_dlg_flag usage
...
test_and_set_dlg_flag("3", "0");
...

1.7.12.  reset_dlg_flag(idx)

   Resets the dialog flag index idx to false. The dialog flags are
   dialog persistent and they can be accessed (set and test) for
   all requests belonging to the dialog.

   The flag index can be between 0 and 31.

   NOTE: the dialog must be created before using this function
   (use create_dialog() function before).

   This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
   REPLY_ROUTE and FAILURE_ROUTE.

   Example 1.66. reset_dlg_flag usage
...
reset_dlg_flag("16");
...

1.7.13.  is_dlg_flag_set(idx)

   Returns true if the dialog flag index idx is set. The dialog
   flags are dialog persistent and they can be accessed (set and
   test) for all requests belonging to the dialog.

   The flag index can be between 0 and 31.

   NOTE: the dialog must be created before using this function
   (use create_dialog() function before).

   This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
   REPLY_ROUTE and FAILURE_ROUTE.

   Example 1.67. is_dlg_flag_set usage
...
if (is_dlg_flag_set("16")) {
        xlog("dialog flag 16 is set\n");
}
...

1.7.14.  store_dlg_value(name,val)

   Attaches to the dialog the value val under the name name. The
   values attached to dialogs are dialog persistent and they can
   be accessed (read and write) for all requests belonging to the
   dialog.

   Parameter val may contain pseudo-variables.

   NOTE: the dialog must be created before using this function
   (use create_dialog() function before).

   Same functionality may be obtain by assigning a value to pseudo
   variable $dlg_val(name).

   This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
   REPLY_ROUTE and FAILURE_ROUTE.

   Example 1.68. store_dlg_value usage
...
store_dlg_value("inv_src_ip","$si");
store_dlg_value("account type","prepaid");
# or
$dlg_val(account_type) = "prepaid";
...

1.7.15.  fetch_dlg_value(name,pvar)

   Fetches from the dialog the value of attribute named name. The
   values attached to dialogs are dialog persistent and they can
   be accessed (read and write) for all requests belonging to the
   dialog.

   Parameter pvar may be a script var ($var) or and avp ($avp).

   NOTE: the dialog must be created before using this function
   (use create_dialog() function before).

   Same functionality may be obtain by reading the pseudo variable
   $dlg_val(name).

   This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
   REPLY_ROUTE and FAILURE_ROUTE.

   Example 1.69. fetch_dlg_value usage
...
fetch_dlg_value("inv_src_ip","$avp(2)");
fetch_dlg_value("account type","$var(account)");
# or
$var(account) = $dlg_val(account_type);
...

1.8. Exported statistics

1.8.1. active_dialogs

   Returns the number of current active dialogs (may be confirmed
   or not).

1.8.2. early_dialogs

   Returns the number of early dialogs.

1.8.3. processed_dialogs

   Returns the total number of processed dialogs (terminated,
   expired or active) from the startup.

1.8.4. expired_dialogs

   Returns the total number of expired dialogs from the startup.

1.8.5. failed_dialogs

   Returns the number of failed dialogs ( dialogs were never
   established due to whatever reasons - internal error, negative
   reply, cancelled, etc )

1.8.6. create_sent

   Returns the number of replicated dialog create requests send to
   other OpenSIPS instances.

1.8.7. update_sent

   Returns the number of replicated dialog update requests send to
   other OpenSIPS instances.

1.8.8. delete_sent

   Returns the number of replicated dialog delete requests send to
   other OpenSIPS instances.

1.8.9. create_recv

   Returns the number of dialog create events received from other
   OpenSIPS instances.

1.8.10. update_recv

   Returns the number of dialog update events received from other
   OpenSIPS instances.

1.8.11. delete_recv

   Returns the number of dialog delete events received from other
   OpenSIPS instances.

1.9. Exported MI Functions

1.9.1. dlg_list

   Lists the description of the dialogs (calls). If no parameter
   is given, all dialogs will be listed. If a dialog identifier is
   passed as parameter (callid and fromtag), only that dialog will
   be listed. If a index and conter parameter is passed, it will
   list only a number of "counter" dialogs starting with index (as
   offset) - this is used to get only section of dialogs.

   Name: dlg_list

   Parameters (with dialog idetification):
     * callid (optional) - callid if a single dialog to be listed.
     * from_tag (optional, but cannot be present without the
       callid parameter) - fromtag (as per initial request) of the
       dialog to be listed. entry

   Parameters (with dialog counting):
     * index - offset where the dialog listing should start.
     * counter - how many dialogs should be listed (starting from
       the offset)

   MI FIFO Command Format:
                :dlg_list:_reply_fifo_file_
                _empty_line_

                :dlg_list:_reply_fifo_file_
                abcdrssfrs122444@192.168.1.1
                AAdfeEFF33

                :dlg_list:_reply_fifo_file_
                40
                10

1.9.2. dlg_list_ctx

   The same as the “dlg_list” but including in the dialog
   description the associated context from modules sitting on top
   of the dialog module. This function also prints the dialog's
   values. In case of binary values, the non-printable chars are
   represented in hex (e.g. \x00)

   Name: dlg_list_ctx

   Parameters: see “dlg_list”

   MI FIFO Command Format:
                :dlg_list_ctx:_reply_fifo_file_
                _empty_line_

1.9.3. dlg_end_dlg

   Terminates an ongoing dialog. If dialog is established, BYEs
   are sent in both directions. If dialog is in unconfirmed or
   early state, a CANCEL will be sent to the callee side, that
   will trigger a 487 from the callee, which, when relayed, will
   also end the dialog on the caller's side.

   Name: dlg_end_dlg

   Parameters:
     * h_entry - hash entry of the dialog in the internal dialog
       table
     * h_id - hash id of the dialog on the hash entry
     * extra_hdrs - (optional) string containg extra headers (full
       format) to be added to the BYE requests.

   The values for the h_entry and h_id can be get via the dlg_list
   MI command.

   MI FIFO Command Format:
                :dlg_end_dlg:_reply_fifo_file_
                342
                56
                _empty_line_

1.9.4. profile_get_size

   Returns the number of dialogs belonging to a profile. If the
   profile supports values, the check can be reinforced to take
   into account a specific value - how many dialogs were inserted
   into the profile with a specific value. If not value is passed,
   only simply belonging of the dialog to the profile is checked.
   Note that the profile does not supports values, this will be
   silently discarded.

   Name: profile_get_size

   Parameters:
     * profile - name of the profile to get the value for.
     * value (optional)- string value to toughen the check;

   MI FIFO Command Format:
                :profile_get_size:_reply_fifo_file_
                inbound_calls
                _empty_line_

1.9.5. profile_list_dlgs

   Lists all the dialogs belonging to a profile. If the profile
   supports values, the check can be reinforced to take into
   account a specific value - list only the dialogs that were
   inserted into the profile with that specific value. If not
   value is passed, all dialogs belonging to the profile will be
   listed. Note that the profile does not supports values, this
   will be silently discarded. Also, when using shared profiles
   using the CacheDB interface, this command will only display the
   local dialogs.

   Name: profile_list_dlgs

   Parameters:
     * profile - name of the profile to list the dialog for.
     * value (optional)- string value to toughen the check;

   MI FIFO Command Format:
                :profile_list_dlgs:_reply_fifo_file_
                inbound_calls
                _empty_line_

1.9.6. profile_get_values

   Lists all the values belonging to a profile along with their
   count. If the profile does not support values a total count
   will be returned. Note that this function does not work for
   shared profiles over the CacheDB interface.

   Name: profile_get_values

   Parameters:
     * profile - name of the profile to list the dialog for.

   MI FIFO Command Format:
                :profile_get_values:_reply_fifo_file_
                inbound_calls
                _empty_line_

1.9.7. profile_end_dlgs

   Terminate all ongoing dialogs from a specified profile, on a
   single dialog it performs the same operations as the command
   dlg_end_dlg

   Name: profile_end_dlgs

   Parameters:
     * profile - name of the profile that will have its dialogs
       termianted
     * value - (optional) if the profile supports values terminate
       only the dialogs with the specified value

   MI FIFO Command Format:
                :profile_end_dlgs:_reply_fifo_file_
                inbound_calls
                _empty_line_

1.9.8. dlg_db_sync

   Will synchronize the information about the dialogs from the
   database with the OpenSIPS internal memory. To be used mainly
   for transferring OpenSIPS dialog information from one server to
   another.

   Name: dlg_db_sync

   It takes no parameters

   MI FIFO Command Format:
                :dlg_db_sync:_reply_fifo_file_
                _empty_line_

1.9.9. dlg_restore_db

   Restores the dialog table after a potential desynchronization
   event. The table is truncated, then populated with CONFIRMED
   dialogs from memory.

   Name: dlg_restore_db

   It takes no parameters

   MI FIFO Command Format:
                :dlg_restore_db:_reply_fifo_file_
                _empty_line_

1.9.10. list_all_profiles

   Lists all the dialog profiles, along with 1 or 0 if the given
   profile has/does not have an associated value.

   Name: list_all_profiles

   Parameters: It takes no parameters

   MI FIFO Command Format:
                :list_all_profiles:_reply_fifo_file_
                _empty_line_

1.9.11.  profile_bin_status

   Dumps each destination used for profiles replication, as well
   as the timestamp of the last message received from them.

   Name: profile_bin_status

   Parameters: none

   MI FIFO Command Format:
                :profile_bin_status:_reply_fifo_file_
                _empty_line_

1.10. Exported pseudo-variables

1.10.1. $DLG_count

   Returns the number of current active dialogs (may be confirmed
   or not).

1.10.2. $DLG_status

   Returns the status of the dialog corresponding to the processed
   sequential request. This PV will be available only for
   sequential requests, after doing loose_route().

   Value may be:
     * NULL - Dialog not found.
     * 1 - Dialog unconfirmed (created but no reply received at
       all)
     * 2 - Dialog in early state (created provisional reply
       received, but no final reply received yet)
     * 3 - Confirmed by a final reply but no ACK received yet.
     * 4 - Confirmed by a final reply and ACK received.
     * 5 - Dialog ended.

1.10.3. $DLG_lifetime

   Returns the duration (in seconds) of the dialog corresponding
   to the processed sequential request. The duration is calculated
   from the dialog confirmation and the current moment. This PV
   will be available only for sequential requests, after doing
   loose_route().

   NULL will be returned if there is no dialog for the request.

1.10.4. $DLG_flags

   Returns the dialog flags array (as a single integer value) of
   the dialog corresponding to the processed sequential request.
   This PV will be available only for sequential requests, after
   doing loose_route().

   NULL will be returned if there is no dialog for the request.

1.10.5. $DLG_dir

   Returns the direction of the request in dialog (as "UPSTREAM"
   or "DOWNSTREAM" string) - to be used for sequential request.
   This PV will be available only for sequential requests (on
   replies), after doing loose_route().

   NULL will be returned if there is no dialog for the request.

1.10.6. $DLG_did

   Returns the id of the dialog corresponding to the processed
   sequential request. The output format is entry ':' id (as
   returned by the dlg_list MI function). This PV will be
   available only for sequential requests, after doing
   loose_route().

   NULL will be returned if there is no dialog for the request.

1.10.7. $DLG_end_reason

   Returns the reason for the dialog termination. It can be one of
   the following :
     * Upstream BYE - Callee has sent a BYE
     * Downstream BYE - Caller has sent a BYE
     * Lifetime Timeout - Dialog lifetime expired
     * MI Termination - Dialog ended via the MI interface
     * Ping Timeout - Dialog ended because no reply to in-dialog
       pings
     * RTPProxy Timeout - Media timeout signaled by RTPProxy

   NULL will be returned if there is no dialog for the request, or
   if the dialog is not ended in the current context.

1.10.8. $DLG_timeout

   Used to set the dialog lifetime (in seconds). When read, the
   variable returns the number of seconds until the dialog expires
   and is destroyed. Note that reading the variable is only
   possible after the dialog is created (for initial requests) or
   after doing loose_route() (for sequential requests). Important
   notice: using this variable with a REALTIME db_mode is very
   inefficient, because every time the dialog value is changed, a
   database update is done.

   NULL will be returned if there is no dialog for the request,
   otherwise the number of seconds until the dialog expiration.

1.10.9. $dlg_val(name)

   This is a read/write variable that allows access to the dialog
   attribute named name. This PV will be available only for
   sequential requests, after doing loose_route().

   NULL will be returned if there is no dialog for the request.

1.11. Exported Events

1.11.1.  E_DLG_STATE_CHANGED

   This event is raised when the dialog state is changed.

   Parameters:
     * ostate - the old state of the dialog.
     * nstate - the new state of the dialog.

Chapter 2. Developer Guide

2.1. Available Functions

2.1.1.  register_dlgcb (dialog, type, cb, param, free_param_cb)

   Register a new callback to the dialog.

   Meaning of the parameters is as follows:
     * struct dlg_cell* dlg - dialog to register callback to. If
       maybe NULL only for DLG_CREATED callback type, which is not
       a per dialog type.
     * int type - types of callbacks; more types may be register
       for the same callback function; only DLG_CREATED must be
       register alone. Possible types:
          + DLGCB_LOADED
          + DLGCB_SAVED
          + DLG_CREATED - called when a new dialog is created -
            it's a global type (not associated to any dialog)
          + DLG_FAILED - called when the dialog was negatively
            replied (non-2xx) - it's a per dialog type.
          + DLG_CONFIRMED - called when the dialog is confirmed
            (2xx replied) - it's a per dialog type.
          + DLG_REQ_WITHIN - called when the dialog matches a
            sequential request - it's a per dialog type.
          + DLG_TERMINATED - called when the dialog is terminated
            via BYE - it's a per dialog type.
          + DLG_EXPIRED - called when the dialog expires without
            receiving a BYE - it's a per dialog type.
          + DLGCB_EARLY - called when the dialog is created in an
            early state (18x replied) - it's a per dialog type.
          + DLGCB_RESPONSE_FWDED - called when the dialog matches
            a reply to the initial INVITE request - it's a per
            dialog type.
          + DLGCB_RESPONSE_WITHIN - called when the dialog matches
            a reply to a subsequent in dialog request - it's a per
            dialog type.
          + DLGCB_MI_CONTEXT - called when the mi dlg_list_ctx
            command is invoked - it's a per dialog type.
          + DLGCB_DESTROY
     * dialog_cb cb - callback function to be called. Prototype
       is: “void (dialog_cb) (struct dlg_cell* dlg, int type,
       struct dlg_cb_params * params); ”
     * void *param - parameter to be passed to the callback
       function.
     * param_free callback_param_free - callback function to be
       called to free the param. Prototype is: “void
       (param_free_cb) (void *param);”

Chapter 3. Frequently Asked Questions

   3.1.

       What happened with “topology_hiding()” function?

       The respective functionality was moved into the topology_hiding
       module. Function prototype has remained the same.

   3.2.

       What happened with “use_tight_match” parameter?

       The parameter was removed with version 1.3 as the option of
       tight matching became mandatory and not configurable. Now, the
       tight matching is done all the time (when using DID matching).

   3.3.

       What happened with “bye_on_timeout_flag” parameter?

       The parameter was removed in a dialog module parameter
       restructuring. To keep the bye on timeout behavior, you need to
       provide a "B" string parameter to the create_dialog() function.

   3.4.

       What happened with “dlg_flag” parameter?

       The parameter is considered obsolete. The only way to create a
       dialog is to call the create_dialog() function

   3.5.

       Where can I find more about OpenSIPS?

       Take a look at http://www.opensips.org/.

   3.6.

       Where can I post a question about this module?

       First at all check if your question was already answered on one
       of our mailing lists:
         * User Mailing List -
           http://lists.opensips.org/cgi-bin/mailman/listinfo/users
         * Developer Mailing List -
           http://lists.opensips.org/cgi-bin/mailman/listinfo/devel

       E-mails regarding any stable OpenSIPS release should be sent to
       <users@lists.opensips.org> and e-mails regarding development
       versions should be sent to <devel@lists.opensips.org>.

       If you want to keep the mail private, send it to
       <users@lists.opensips.org>.

   3.7.

       How can I report a bug?

       Please follow the guidelines provided at:
       https://github.com/OpenSIPS/opensips/issues.
