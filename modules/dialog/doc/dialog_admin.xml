<!-- Module User's Guide -->

<chapter>

	<title>&adminguide;</title>

	<section>
	<title>Overview</title>
	<para>
	The dialog module provides dialog awareness to the &osips; proxy. Its
	functionality is to keep trace of the current dialogs, to offer information
	about them (like how many dialogs are active).
	</para>
	<para>
	Aside tracking, the dialog module offers functionalities like flags and
	attributes per dialog (persistent data across dialog), dialog profiling
	and dialog termination (on timeout base or external triggered).
	</para>
	<para>
	The module, via an internal API, also provide the foundation to build on
	top of it more complex dialog-based functionalities via other &osips;
	modules.
	</para>
	</section>

	<section>
	<title>How it works</title>
	<para>
	To create the dialog associated to an initial request, you must call
	the create_dialog() function, with or without parameter..
	</para>
	<para>
	The dialog is automatically destroyed when a <quote>BYE</quote> is
	received. In case of no <quote>BYE</quote>, the dialog lifetime is
	controlled via the default timeout (see <quote>default_timeout</quote>
	- <xref linkend="default-timeout-id"/>) and custom timeout (see
	<quote>$DLG_timeout</quote> - <xref linkend="timeout-pvar-id"/>).
	</para>
	</section>

	<section>
	<title>Dialog profiling</title>
	<para>
	Dialog profiling is a mechanism that helps in classifying, sorting and
	keeping trace of certain types of dialogs, using whatever properties of
	the dialog (like caller, destination, type of calls, etc).
	Dialogs can be dynamically added in different (and several) profile
	tables - logically, each profile table can have a special meaning (like
	dialogs outside the domain, dialogs terminated to PSTN, etc).
	</para>
	<para>
	There are two types of profiles:
	<itemizedlist>
		<listitem>
		<para>
			<emphasis>with no value</emphasis> - a dialog simply belongs
			to a profile. (like outbound calls profile). There is no other
			additional information to describe the dialog's belonging to the
			profile;
		</para>
		</listitem>
		<listitem>
		<para>
			<emphasis>with value</emphasis> - a dialog belongs to a profile
			having a certain value (like in caller profile, where the value
			is the caller ID). The belonging of the dialog to the profile is
			strictly related to the value.
		</para>
		</listitem>
	</itemizedlist>
	</para>
	<para>
	A dialog can be added to multiple profiles in the same time.
	</para>
	<para>
	Profiles are visible (at the moment) in the request route (for initial
	and sequential requests) and in the branch, failure and reply routes of
	the original request.
	</para>
	<para>
	Dialog profiles can also be used in distributed systems, using the &osips;
	CacheDB Interface. This feature allows you to share dialog profile
	information with multiple &osips; instaces that use the same CacheDB
	backend. In order to do that, the <emphasis>cachedb_url</emphasis> parameter
	must be defined. Also, the profile must be marked as shared, by adding the
	<emphasis>'/s'</emphasis> suffix to the name of the profile in the
	<emphasis>profiles_with_value</emphasis> or
	<emphasis>profiles_no_value</emphasis> parameters.
	</para>
	</section>

	<section>
	<title>Dialog replication</title>
	<para>
	<emphasis role='bold'>Dialog replication</emphasis> is a mechanism used to
	mirror all dialog changes taking place in one OpenSIPS instance to one or
	more other different instances. The logic is simplified by using the core
	<emphasis>Binary Internal Interface</emphasis> to build and send the
	replication-related UDP packets.
	</para>
	<para>
		The feature is especially useful when dealing with very large systems,
	where failover through a database backend is no longer feasible, due to the
	high amount of time required for the backup instance to load the dialog
	information stored in a typical <emphasis>dialog</emphasis> table by the
	crashed instance.
	</para>
	<para>
		Configuring both receival and sending of dialog replication packets is
	trivial and can be done by using the
	<emphasis role='bold'>accept_replicated_dialogs</emphasis> and
	<emphasis role='bold'>replicate_dialogs_to</emphasis> parameters of the
	module. In addition to this, the module also exports several statistics
	regarding the number of replication packets sent/received.
	</para>
	<para>
		Profiles replication can also be achieved using the
	<emphasis role='bold'>accept_replicated_profiles</emphasis> and
	<emphasis role='bold'>replicate_profiles_to</emphasis> parameters.
	</para>
	</section>

	<section>
	<title>Dependencies</title>
	<section>
		<title>&osips; Modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>TM</emphasis> - Transaction module
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>RR</emphasis> - Record-Route module
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>


	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be installed before
		running &osips; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>None</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>


	<section>
	<title>Exported Parameters</title>
	<section>
		<title><varname>enable_stats</varname> (integer)</title>
		<para>
		If the statistics support should be enabled or not. Via statistic
		variables, the module provide information about the dialog processing.
		Set it to zero to disable or to non-zero to enable it.
		</para>
		<para>
		<emphasis>
			Default value is <quote>1 (enabled)</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>enable_stats</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "enable_stats", 0)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>hash_size</varname> (integer)</title>
		<para>
		The size of the hash table internally used to keep the dialogs. A
		larger table is much faster but consumes more memory. The hash size
		must be a power of 2 number.
		</para>
		<para>
		IMPORTANT: If dialogs' information should be stored in a database,
		a constant hash_size should be used, otherwise the restored process
		will not take place. If you really want to modify the hash_size you
		must delete all table's rows before restarting &osips;.
		</para>
		<para>
		<emphasis>
			Default value is <quote>4096</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>hash_size</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "hash_size", 1024)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>log_profile_hash_size</varname> (integer)</title>
		<para>
		The size of the hash table internally used to store  profile->dialog
		associations. A larger table can provide more
		parallel operations but consumes more memory. The hash size
		is provided as the base 2 logarithm(e.g. log_profile_hash_size =4
		means the table has 2^4 entries).
		</para>

		<para>
		<emphasis>
			Default value is <quote>4</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>hash_size</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "log_profile_hash_size", 5) #set a table size of 32
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>rr_param</varname> (string)</title>
		<para>
		Name of the Record-Route parameter to be added with the dialog cookie.
		It is used for fast dialog matching of the sequential requests.
		</para>
		<para>
		<emphasis>
			Default value is <quote>did</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>rr_param</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "rr_param", "xyz")
...
</programlisting>
		</example>
	</section>

	<section id="default-timeout-id">
		<title><varname>default_timeout</varname> (integer)</title>
		<para>
		The default dialog timeout (in seconds) if no custom one is set.
		</para>
		<para>
		<emphasis>
			Default value is <quote>43200 (12 hours)</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>default_timeout</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "default_timeout", 21600)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>dlg_extra_hdrs</varname> (string)</title>
		<para>
		A string containing the extra headers (full format, with EOH)
		to be added in the requests generated by the module (like BYEs).
		</para>
		<para>
		<emphasis>
			Default value is <quote>NULL</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>dlf_extra_hdrs</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "dlg_extra_hdrs", "Hint: credit expired\r\n")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>dlg_match_mode</varname> (integer)</title>
		<para>
		How the seqential requests should be matched against the known dialogs.
		The modes are a combination between matching based on a cookie (DID)
		stored as cookie in Record-Route header and the matching based on SIP
		elements (as in RFC3261).
		</para>
		<para>
		The supported modes are:
		</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>0 - DID_ONLY</emphasis> - the match is done
				exclusively based on DID;
			</para></listitem>
			<listitem><para>
				<emphasis>1 - DID_FALLBACK</emphasis> - the match is first
				tried based on DID and if not present, it will fallback to
				SIP matching;
			</para></listitem>
			<listitem><para>
				<emphasis>2 - DID_NONE</emphasis> - the match is done
				exclusively based on SIP elements; no DID information is added
				in RR.
			</para></listitem>
		</itemizedlist>
		<para>
		<emphasis>
			Default value is <quote>0 (DID_ONLY)</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>dlg_match_mode</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "dlg_match_mode", 1)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>db_url</varname> (string)</title>
		<para>
		If you want to store the information about the dialogs in a database
		a database url must be specified.
		</para>
		<para>
		<emphasis>
			Default value is <quote>&defaultdb;</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>db_url</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "db_url", "&exampledb;")
...
</programlisting>
		</example>
	</section>

<section>
		<title><varname>db_mode</varname> (integer)</title>
		<para>
		Describe how to push into the DB the dialogs' information from memory.
		</para>
		<para>
		The supported modes are:
		</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>0 - NO_DB</emphasis> - the memory content is not
				flushed into DB;
			</para></listitem>
			<listitem><para>
				<emphasis>1 - REALTIME</emphasis> - any dialog information
				changes will be reflected into the database immediately.
			</para></listitem>
			<listitem><para>
				<emphasis>2 - DELAYED</emphasis> - the dialog information
				changes will be flushed into the DB periodically, based on a
				timer routine.
			</para></listitem>
			<listitem><para>
				<emphasis>3 - SHUTDOWN</emphasis> - the dialog information
				will be flushed into DB only at shutdown - no runtime updates.
			</para></listitem>
		</itemizedlist>
		<para>
		<emphasis>
			Default value is <quote>0</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>db_mode</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "db_mode", 1)
...
</programlisting>
		</example>
	</section>

<section>
		<title><varname>db_update_period</varname> (integer)</title>
		<para>
			The interval (seconds) at which to update dialogs' information if you chose to store the dialogs' info at a given interval.
			A too short interval will generate intensive database operations, a too large one will not notice short dialogs.
		</para>
		<para>
		<emphasis>
			Default value is <quote>60</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>db_update_period</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "db_update_period", 120)
...
</programlisting>
		</example>
	</section>

<section>
		<title><varname>options_ping_interval</varname> (integer)</title>
		<para>
			The interval (seconds) at which OpenSIPS will generate in-dialog OPTIONS pings for dialogs.
		</para>
		<para>
		<emphasis>
			Default value is <quote>30</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>options_ping_interval</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "options_ping_interval", 20)
...
</programlisting>
		</example>
	</section>

<section>
		<title><varname>reinvite_ping_interval</varname> (integer)</title>
		<para>
			The interval (seconds) at which OpenSIPS will generate in-dialog Re-INVITE pings for dialogs.
		</para>
		<para>
		<emphasis>
			Default value is <quote>300</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>reinvite_ping_interval</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "reinvite_ping_interval", 600)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>table_name</varname> (string)</title>
		<para>
		If you want to store the information about the dialogs in a
		database a table name must be specified.
		</para>
		<para>
		<emphasis>
			Default value is <quote>dialog</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>table_name</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "table_name", "my_dialog")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>call_id_column</varname> (string)</title>
		<para>
			The column's name in the database to store the dialogs' callid.
		</para>
		<para>
		<emphasis>
			Default value is <quote>callid</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>call_id_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "call_id_column", "callid_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>from_uri_column</varname> (string)</title>
		<para>
			The column's name in the database to store the caller's
			sip address.
		</para>
		<para>
		<emphasis>
			Default value is <quote>from_uri</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>from_uri_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "from_uri_column", "from_uri_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>from_tag_column</varname> (string)</title>
		<para>
			The column's name in the database to store the From tag from
			the Invite request.
		</para>
		<para>
		<emphasis>
			Default value is <quote>from_tag</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>from_tag_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "from_tag_column", "from_tag_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>to_uri_column</varname> (string)</title>
		<para>
			The column's name in the database to store the calee's sip address.
		</para>
		<para>
		<emphasis>
			Default value is <quote>to_uri</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>to_uri_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "to_uri_column", "to_uri_c_name")
...
</programlisting>
		</example>
	</section>


	<section>
		<title><varname>to_tag_column</varname> (string)</title>
		<para>
			The column's name in the database to store the To tag from
			the 200 OK response to the Invite request, if present.
		</para>
		<para>
		<emphasis>
			Default value is <quote>to_tag</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>to_tag_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "to_tag_column", "to_tag_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>from_cseq_column</varname> (string)</title>
		<para>
			The column's name in the database to store the cseq from caller
			side.
		</para>
		<para>
		<emphasis>
			Default value is <quote>caller_cseq</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>from_cseq_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "from_cseq_column", "from_cseq_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>to_cseq_column</varname> (string)</title>
		<para>
			The column's name in the database to store the cseq from callee
			side.
		</para>
		<para>
		<emphasis>
			Default value is <quote>callee_cseq</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>to_cseq_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "to_cseq_column", "to_cseq_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>from_route_column</varname> (string)</title>
		<para>
			The column's name in the database to store the route records from
			caller side (proxy to caller).
		</para>
		<para>
		<emphasis>
			Default value is <quote>caller_route_set</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>from_route_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "from_route_column", "from_route_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>to_route_column</varname> (string)</title>
		<para>
			The column's name in the database to store the route records from
			callee side (proxy to callee).
		</para>
		<para>
		<emphasis>
			Default value is <quote>callee_route_set</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>to_route_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "to_route_column", "to_route_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>from_contact_column</varname> (string)</title>
		<para>
			The column's name in the database to store the caller's contact
			uri.
		</para>
		<para>
		<emphasis>
			Default value is <quote>caller_contact</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>from_contact_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "from_contact_column", "from_contact_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>to_contact_column</varname> (string)</title>
		<para>
			The column's name in the database to store the callee's contact
			uri.
		</para>
		<para>
		<emphasis>
			Default value is <quote>callee_contact</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>to_contact_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "to_contact_column", "to_contact_c_name")
...
</programlisting>
		</example>
	</section>

<section>
		<title><varname>from_sock_column</varname> (string)</title>
		<para>
			The column's name in the database to store the information about
			the local interface receiving the traffic from caller.
		</para>
		<para>
		<emphasis>
			Default value is <quote>caller_sock</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>from_sock_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "from_sock_column", "from_sock_c_name")
...
</programlisting>
		</example>
	</section>

<section>
		<title><varname>to_sock_column</varname> (string)</title>
		<para>
			The column's name in the database to store information about the
			local interface receiving the traffic from callee.
		</para>
		<para>
		<emphasis>
			Default value is <quote>callee_sock</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>to_sock_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "to_sock_column", "to_sock_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>dlg_id_column</varname> (string)</title>
		<para>
			The column's name in the database to store the dialogs'
			id information.
		</para>
		<para>
		<emphasis>
			Default value is <quote>hash_id</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>dlg_id_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "dlg_id_column", "dlg_id_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>state_column</varname> (string)</title>
		<para>
			The column's name in the database to store the
			dialogs' state information.
		</para>
		<para>
		<emphasis>
			Default value is <quote>state</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>state_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "state_column", "state_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>start_time_column</varname> (string)</title>
		<para>
			The column's name in the database to store the
			dialogs' start time information.
		</para>
		<para>
		<emphasis>
			Default value is <quote>start_time</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>start_time_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "start_time_column", "start_time_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>timeout_column</varname> (string)</title>
		<para>
			The column's name in the database to store the dialogs' timeout.
		</para>
		<para>
		<emphasis>
			Default value is <quote>timeout</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>timeout_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "timeout_column", "timeout_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>profiles_column</varname> (string)</title>
		<para>
			The column's name in the database to store the dialogs' profiles.
		</para>
		<para>
		<emphasis>
			Default value is <quote>profiles</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>profiles_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "profiles_column", "profiles_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>vars_column</varname> (string)</title>
		<para>
			The column's name in the database to store the dialogs' vars.
		</para>
		<para>
		<emphasis>
			Default value is <quote>vars</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>vars_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "vars_column", "vars_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>sflags_column</varname> (string)</title>
		<para>
			The column's name in the database to store the dialogs' script flags.
		</para>
		<para>
		<emphasis>
			Default value is <quote>script_flags</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>sflags_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "sflags_column", "sflags_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>mflags_column</varname> (string)</title>
		<para>
			The column's name in the database to store the dialogs' module flags.
		</para>
		<para>
		<emphasis>
			Default value is <quote>module_flags</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>mflags_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "mflags_column", "mflags_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>flags_column</varname> (string)</title>
		<para>
			The column's name in the database to store the dialogs' flags.
		</para>
		<para>
		<emphasis>
			Default value is <quote>flags</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>flags_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "flags_column", "flags_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>profiles_with_value</varname> (string)</title>
		<para>
			List of names for profiles with values. Flag
			<emphasis>/b</emphasis> allows replicating dialogs over the bin
			interface. Before, all of them were replicated.

		</para>
		<para>
		<emphasis>
			Default value is <quote>empty</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>profiles_with_value</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "profiles_with_value", "caller ; my_profile; share/s; repl/b;")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>profiles_no_value</varname> (string)</title>
		<para>
			List of names for profiles without values. Flag
			<emphasis>/b</emphasis> allows replicating dialogs over the bin
			interface. Before, all of them were replicated.
		</para>
		<para>
		<emphasis>
			Default value is <quote>empty</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>profiles_no_value</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "profiles_no_value", "inbound ; outbound ; shared/s; repl/b;")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>db_flush_vals_profiles</varname> (int)</title>
		<para>
			Pushes dialog values, profiles and flags into the database
			along with other dialog state information (see db_mode 1 and 2).
		</para>
		<para>
		<emphasis>
			Default value is <quote>empty</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>db_flush_vals_profiles</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "db_flush_vals_profiles", 1)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>timer_bulk_del_no</varname> (int)</title>
		<para>
			The number of dialogs that should be attempted to be
			deleted at the same time ( a single query ) from the
			DB back-end.
		</para>
		<para>
		<emphasis>
			Default value is <quote>1</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>timer_bulk_del_no</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "timer_bulk_del_no", 10)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>cachedb_url</varname> (string)</title>
		<para>
			Enables distributed dialog profiles and specifies the
			backend that should be used by the CacheDB interface.
		</para>
		<para>
		<emphasis>
			Default value is <quote>empty</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>cachedb_url</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "cachedb_url", "redis://127.0.0.1:6379")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>profile_value_prefix</varname> (string)</title>
		<para>
			Specifies what prefix should be added to the profiles with
			value when they are inserted into CacheDB backed. This is
			only used when distributed profiles are enabled.
		</para>
		<para>
		<emphasis>
			Default value is <quote>dlg_val_</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>profile_value_prefix</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "profile_value_prefix", "dlgv_")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>profile_no_value_prefix</varname> (string)</title>
		<para>
			Specifies what prefix should be added to the profiles without
			value when they are inserted into CacheDB backed. This is
			only used when distributed profiles are enabled.
		</para>
		<para>
		<emphasis>
			Default value is <quote>dlg_noval_</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>profile_no_value_prefix</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "profile_no_value_prefix", "dlgnv_")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>profile_size_prefix</varname> (string)</title>
		<para>
			Specifies what prefix should be added to the entity that holds
			the profiles with value size in CacheDB backed. This is
			only used when distributed profiles are enabled.
		</para>
		<para>
		<emphasis>
			Default value is <quote>dlg_size_</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>profile_size_prefix</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "profile_size_prefix", "dlgs_")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>profile_timeout</varname> (int)</title>
		<para>
			Specifies how long a dialog profile should be kept in the CacheDB
			until it expires. This is only used when distributed profiles are
			enabled.
		</para>
		<para>
		<emphasis>
			Default value is <quote>86400</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>profile_timeout</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "profile_timeout", "43200")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>accept_replicated_dialogs</varname> (int)</title>
		<para>
		Registers the <emphasis>dialog</emphasis> module to the &osips; Binary
		Internal Interface. It specifies the instances, that belong
                to a certain cluster, from which we should expect incoming packets.
		</para>
		<para>
		<emphasis>
			Default value is 0 (not registered).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>accept_replicated_dialogs</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "accept_replicated_dialogs", 1)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>replicate_dialogs_to</varname> (int)</title>
		<para>
			Adds dialog replication destinations,that belong to the
		specified cluster id. The destination will receive all dialog-related events
		(creation, updating and deletion) over TCP, using the Binary Internal Interface.
		</para>
		<para>
		<emphasis>
			Default value is <quote>0</quote> (no replication destinations).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>replicate_dialogs_to</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "replicate_dialogs_to", 1)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>accept_replicated_profiles</varname> (int)</title>
		<para>
		Registers the <emphasis>dialog</emphasis> module to the &osips; Binary
		Internal Interface for profiles replication. It specifies the
                instances, that belong to a certain cluster, from which we should expect
                incoming packets.
		</para>
		<para>
		<emphasis>
			Default value is 0 (not registered).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>accept_replicated_profiles</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "accept_replicated_profiles", 1)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>replicate_profiles_to</varname> (int)</title>
		<para>
			Adds profiles replication destinations, that belong  to the
		specified cluster id. The destination will receive all dialog-related events
		(creation, updating and deletion) over TCP, using the Binary Internal Interface.
		</para>
		<para>
		<emphasis>
			Default value is <quote>0</quote> (no replication destinations).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>replicate_profiles_to</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "replicate_profiles_to", 1)
...
</programlisting>
		</example>
	</section>

        <section>
		<title><varname>accept_replicated_profile_timeout</varname> (int)</title>
		<para>
			The time between two succesive incoming packets.
		</para>
		<para>
		<emphasis>
			Default value is <quote>10</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>accept_replicated_profile_timeout</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "accept_replicated_profile_timeout", 30)
...
</programlisting>
		</example>
	</section>

         <section>
		<title><varname>auth_check</varname> (int)</title>
		<para>
			Authentication check for incoming packets.
		</para>
		<para>
		<emphasis>
			Default value is <quote>0</quote> (disabled).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>auth_check</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "auth_check", 1)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>replicate_profiles_buffer</varname> (string)</title>
		<para>
		Used to specify the length of the buffer used by the binary
		replication, in bytes. Usually this should be big enough to hold
		as much data as possible, but small enough to avoid UDP
		fragmentation. The recommended value is the smallest MTU between
		all the replication instances.
		</para>
		<para>
		<emphasis>
			Default value is 1400 bytes.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>replicate_profiles_buffer</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "replicate_profiles_buffer", 500)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>replicate_profiles_check</varname> (string)</title>
		<para>
		Timer in seconds, used to specify how often the module should check
		whether old, replicated profiles values are obsolete and should be removed.
		should replicate its profiles to the other instances.
		</para>
		<para>
		<emphasis>
			Default value is 10 s.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>replicate_profiles_check</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "replicate_profiles_check", 100)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>replicate_profiles_timer</varname> (string)</title>
		<para>
		Timer in milliseconds, used to specify how often the module
		should replicate its profiles to the other instances.
		</para>
		<para>
		<emphasis>
			Default value is 10 ms.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>replicate_profiles_timer</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "replicate_profiles_timer", 100)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>replicate_profiles_expire</varname> (string)</title>
		<para>
		Timer in seconds, used to specify when the profiles counters received
		from a different instance should no longer be taken into account.
		This is used to prevent obsolete values, in case an instance stops
		replicating its counters.
		</para>
		<para>
		<emphasis>
			Default value is 10 s.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>replicate_profiles_expire</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "replicate_profiles_expire", 10)
...
</programlisting>
		</example>
	</section>

	</section>


	<section>
	<title>Exported Functions</title>

	<section>
		<title>
		<function moreinfo="none">create_dialog()</function>
		</title>
		<para>
		The function creats the dialog for the currently processed request. The
		request must be an initial request.

		Optionally,the function also receives a string parameter, which specifies
		whether the dialog end-points should be pinged via SIP options
		messages. The parameter can be "P" to specify to only ping the
		caller, "p" to only ping the callee or "Pp" to ping both dialog
		sides. If the extra string parameter is provided and one
		end-point fails to respond to a options ping, OpenSIPS will
		terminate the dialog from the middle.
		Also, the end-points can be pinged via in-dialog Re-INVITE SIP messages. This
		behaviour is controlled via the "R" flags for pinging the caller side, and
		the "r" flag for re-invite pinging the callee side. If one end-points fails
		to re-negociate the session via the Re-INVITE pings, OpenSIPS will terminate
		the dialog from the middle

		The string parameter can also contain "B" to activate the bye on
		timeout behavior.

		</para>
		<para>
		The function returns true if the dialog was successfully created or
		if the dialog was previously created.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function>create_dialog()</function> usage</title>
		<programlisting format="linespecific">
...
create_dialog();
...
#ping caller
create_dialog("P");
...
#ping caller and callee
create_dialog("Pp");

#bye on timeout
create_dialog("B");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">match_dialog()</function>
		</title>
		<para>
		This function is to be used to match a sequential (in-dialog) request
		to an existing dialog. In other words, the function will try to match
		the current request to an known ongoing dialog.
		</para>
		<para>
		The function tries to use (for dialog matching) the DID (Dialog ID)
		from Route header and also falls back to SIP-wise matching.
		</para>
		<para>
		As sequential requests are automatically matched to the dialog when
		doing "loose_route()" from script, this function is intended to:
		(A) control the place in your script where the dialog matching is done
		and (B) to cope with bogus sequential requests that do not have Route
		headers, so they are not handled by loose_route().
		</para>
		<para>
		The function returns true if a dialog exists for the request.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function>match_dialog()</function> usage</title>
		<programlisting format="linespecific">
...
    if (has_totag()) {
        loose_route();
        if ($DLG_status==NULL &amp;&amp; !match_dialog() ) {
            xlog(" cannot match request to a dialog \n");
        }
    }
...
</programlisting>
		</example>
	</section>


	<section>
		<title>
		<function moreinfo="none">validate_dialog()</function>
		</title>
		<para>
		The function checks the current received requests against the dialog
		(internal data) it belongs to.
		Performing several tests, the function will help to detect the bogus
		injected in-dialog requests (like malicious BYEs).
		</para>
		<para>
		The performed tests are related to CSEQ sequence checking and routing
		information checking (contact and route set).
		</para>
		<para>
		The function returns true if a dialog exists for the request and if
		the request is valid (according to dialog data). If the request is invalid,
		the following return codes are returned :
		<itemizedlist>
		<listitem>
			<para><emphasis>-1</emphasis> - invalid cseq
			</para>
		</listitem>
		<listitem>
			<para><emphasis>-2</emphasis> - invalid remote target
			</para>
		</listitem>
		<listitem>
			<para><emphasis>-3</emphasis> - invalid route set
			</para>
		</listitem>
		<listitem>
			<para><emphasis>-4</emphasis> - other errors ( parsing, no dlg, etc )
			</para>
		</listitem>
		</itemizedlist>

		</para>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function>validate_dialog()</function> usage</title>
		<programlisting format="linespecific">
...
    if (has_totag()) {
        loose_route();
        if ($DLG_status!=NULL &amp;&amp; !validate_dialog() ) {
            xlog(" in-dialog bogus request \n");
        } else {
            xlog(" in-dialog valid request - $DLG_dir !\n");
        }
    }
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">fix_route_dialog()</function>
		</title>
		<para>
			The function forces an in dialog SIP message to contain the ruri, route headers and
			dst_uri, as specified by the internal data of the dialog it belongs to.
			The function will prevent the existence of bogus injected in-dialog
			requests ( like malicious BYEs )
		</para>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function>fix_route_dialog()</function> usage</title>
		<programlisting format="linespecific">
...
    if (has_totag()) {
        loose_route();
        if ($DLG_status!=NULL)
            if (!validate_dialog())
                fix_route_dialog();
    }
...
</programlisting>
		</example>
	</section>


	<section>
		<title>
		<function moreinfo="none">get_dialog_info(attr,var,key,key_val)</function>
		</title>
		<para>
		The function extracts a dialog value from another dialog. It first searches
		through all existing (ongoing) dialogs for a dialog that has a dialog
		variable named "key" with the value "key_val"
		(so a dialog where $dlg_val(key)=="key_val"). If found, it returns
		the value of the dialog variable "attr" from the
		found dialog in the "var" pseudo-variable, otherwise nothing is written
		in "var", and a negative error code is returned.
		</para>
		<para>
		NOTE: the function does not require to be called in the context of
		a dialog - you can use it whenever / whereever for searching for other
		dialogs.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>attr</emphasis> - the name of the dialog variable
			(from the found dialog) to be returned;
			</para>
		</listitem>
		<listitem>
			<para><emphasis>var</emphasis> - a pvar where to store the value of
			the "attr" dialog variable
			</para>
		</listitem>
		<listitem>
			<para><emphasis>key</emphasis> - name of a dialog variable to be
			used a search key (when looking after the target dialog)
			</para>
		</listitem>
		<listitem>
			<para><emphasis>key_val</emphasis> - the value of the dialog
			variable that is used as key in searching the target dialog.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
			REPLY_ROUTE, FAILURE_ROUTE and LOCAL_ROUTE.
		</para>
		<example>
		<title><function>get_dialog_info</function> usage</title>
		<programlisting format="linespecific">
...
if ( get_dialog_info("callee","$var(x)","caller","$fu") ) {
	xlog("caller $fU has another ongoing, talking to callee $var(x)\n")
}

# create dialog for current call and place the caller and callee attributes
create_dialog();
$dlg_val(caller) = $fu;
$dlg_val(callee) = $ru;
...
</programlisting>
		</example>
	</section>


	<section>
		<title>
		<function moreinfo="none">set_dlg_profile(profile,[value])</function>
		</title>
		<para>
		Inserts the current dialog into a profile. Note that if the profile does
		not support values, this will be silently discarded. A dialog may be
		inserted in the same profile multiple times.
		</para>
		<para>
		NOTE: the dialog must be created before using this function (use
		create_dialog() function before).
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>profile</emphasis> - name of the profile to be
			added to;
			</para>
		</listitem>
		<listitem>
			<para><emphasis>value</emphasis> (optional) - string value to
			define the belonging of the dialog to the profile - note that the
			profile must support values.
			Pseudo-variables are supported.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
			REPLY_ROUTE and FAILURE_ROUTE.
		</para>
		<example>
		<title><function>set_dlg_profile</function> usage</title>
		<programlisting format="linespecific">
...
set_dlg_profile("inbound_call");
set_dlg_profile("caller","$fu");
...
</programlisting>
		</example>
	</section>


	<section>
		<title>
		<function moreinfo="none">unset_dlg_profile(profile,[value])</function>
		</title>
		<para>
		Removes the current dialog from a profile.
		</para>
		<para>
		NOTE: the dialog must be created before using this function (use
		create_dialog() function before).
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>profile</emphasis> - name of the profile to be
			removed from;
			</para>
		</listitem>
		<listitem>
			<para><emphasis>value</emphasis> (optional) - string value to
			define the belonging of the dialog to the profile - note that the
			profile must support values.
			Pseudo-variables are supported.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
			REPLY_ROUTE and FAILURE_ROUTE.
		</para>
		<example>
		<title><function>unset_dlg_profile</function> usage</title>
		<programlisting format="linespecific">
...
unset_dlg_profile("inbound_call");
unset_dlg_profile("caller","$fu");
...
</programlisting>
		</example>
	</section>


	<section>
		<title>
		<function moreinfo="none">is_in_profile(profile,[value])</function>
		</title>
		<para>
		Checks if the current dialog belongs to a profile. If the profile
		supports values, the check can be reinforced to take into account a
		specific value - if the dialog was inserted into the profile for a
		specific value. If no value is passed, only simply belonging of the
		dialog to the profile is checked. Note that if the profile does not
		support values, this will be silently discarded.
		</para>
		<para>
		NOTE: the dialog must be created before using this function (use
		create_dialog() function before).
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>profile</emphasis> - name of the profile to be
			checked against;
			</para>
		</listitem>
		<listitem>
			<para><emphasis>value</emphasis> (optional) - string value to
			toughen  the check. Pseudo-variables are supported.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
			REPLY_ROUTE and FAILURE_ROUTE.
		</para>
		<example>
		<title><function>is_in_profile</function> usage</title>
		<programlisting format="linespecific">
...
if (is_in_profile("inbound_call")) {
	log("this request belongs to a inbound call\n");
}
...
if (is_in_profile("caller","XX")) {
	log("this request belongs to a call of user XX\n");
}
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">get_profile_size(profile,[value],size)</function>
		</title>
		<para>
		Returns the number of dialogs belonging to a profile. If the profile
		supports values, the check can be reinforced to take into account a
		specific value - how many dialogs were inserted into the profile with
		a specific value. If not value is passed, only simply belonging of the
		dialog to the profile is checked. Note that the profile does not
		supports values, this will be silently discarded.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>profile</emphasis> - name of the profile to get
			the size for;
			</para>
		</listitem>
		<listitem>
			<para><emphasis>value</emphasis> (optional) - string value to
			toughen  the check. Pseudo-variables are supported;
			</para>
		</listitem>
		<listitem>
			<para><emphasis>size</emphasis> - an AVP or script variable to
			return the profile size in.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
			REPLY_ROUTE and FAILURE_ROUTE.
		</para>
		<example>
		<title><function>get_profile_size</function> usage</title>
		<programlisting format="linespecific">
...
get_profile_size("inbound_call","$avp(size)");
xlog("currently there are $avp(size) inbound calls\n");
...
get_profile_size("caller","$fu");
xlog("currently, the user %fu has $avp(size) active outgoing calls\n");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">set_dlg_flag(idx)</function>
		</title>
		<para>
		Sets the dialog flag index <emphasis>idx</emphasis> to true. The dialog
		flags are dialog persistent and they can be accessed (set and test)
		for all requests belonging to the dialog.
		</para>
		<para>
		The flag index can be between 0 and 31.
		</para>
		<para>
		NOTE: the dialog must be created before using this function (use
		create_dialog() function before).
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
			REPLY_ROUTE and FAILURE_ROUTE.
		</para>
		<example>
		<title><function>set_dlg_flag</function> usage</title>
		<programlisting format="linespecific">
...
set_dlg_flag("3");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">test_and_set_dlg_flag(idx, value)</function>
		</title>
		<para>
		Atomically checks if the dialog flag index <emphasis>idx</emphasis> is
		equal to <emphasis>value</emphasis>. If true, changes the value with the
		opposite one. This operation is done under the dialog lock.
		</para>
		<para>
		The flag index can be between 0 and 31.
		</para>
		<para>
		The value should be 0 (false) or 1 (true).
		</para>
		<para>
		NOTE: the dialog must be created before using this function (use
		create_dialog() function before).
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
			REPLY_ROUTE and FAILURE_ROUTE.
		</para>
		<example>
		<title><function>test_and_set_dlg_flag</function> usage</title>
		<programlisting format="linespecific">
...
test_and_set_dlg_flag("3", "0");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">reset_dlg_flag(idx)</function>
		</title>
		<para>
		Resets the dialog flag index <emphasis>idx</emphasis> to false.
		The dialog flags are dialog persistent and they can be accessed
		(set and test) for all requests belonging to the dialog.
		</para>
		<para>
		The flag index can be between 0 and 31.
		</para>
		<para>
		NOTE: the dialog must be created before using this function (use
		create_dialog() function before).
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
			REPLY_ROUTE and FAILURE_ROUTE.
		</para>
		<example>
		<title><function>reset_dlg_flag</function> usage</title>
		<programlisting format="linespecific">
...
reset_dlg_flag("16");
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">is_dlg_flag_set(idx)</function>
		</title>
		<para>
		Returns true if the dialog flag index <emphasis>idx</emphasis> is set.
		The dialog flags are dialog persistent and they can be accessed
		(set and test) for all requests belonging to the dialog.
		</para>
		<para>
		The flag index can be between 0 and 31.
		</para>
		<para>
		NOTE: the dialog must be created before using this function (use
		create_dialog() function before).
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
			REPLY_ROUTE and FAILURE_ROUTE.
		</para>
		<example>
		<title><function>is_dlg_flag_set</function> usage</title>
		<programlisting format="linespecific">
...
if (is_dlg_flag_set("16")) {
	xlog("dialog flag 16 is set\n");
}
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">store_dlg_value(name,val)</function>
		</title>
		<para>
		Attaches to the dialog the value <emphasis>val</emphasis> under the
		name <emphasis>name</emphasis>. The values attached to dialogs are
		dialog persistent and they can be accessed (read and write) for all
		requests belonging to the dialog.
		</para>
		<para>
		Parameter <emphasis>val</emphasis> may contain pseudo-variables.
		</para>
		<para>
		NOTE: the dialog must be created before using this function (use
		create_dialog() function before).
		</para>
		<para>
		Same functionality may be obtain by assigning a value to pseudo
		variable <emphasis>$dlg_val(name)</emphasis>.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
			REPLY_ROUTE and FAILURE_ROUTE.
		</para>
		<example>
		<title><function>store_dlg_value</function> usage</title>
		<programlisting format="linespecific">
...
store_dlg_value("inv_src_ip","$si");
store_dlg_value("account type","prepaid");
# or
$dlg_val(account_type) = "prepaid";
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">fetch_dlg_value(name,pvar)</function>
		</title>
		<para>
		Fetches from the dialog the value of attribute named
		<emphasis>name</emphasis>. The values attached to dialogs are
		dialog persistent and they can be accessed (read and write) for all
		requests belonging to the dialog.
		</para>
		<para>
		Parameter <emphasis>pvar</emphasis> may be a script var ($var) or
		and avp ($avp).
		</para>
		<para>
		NOTE: the dialog must be created before using this function (use
		create_dialog() function before).
		</para>
		<para>
		Same functionality may be obtain by reading the pseudo
		variable <emphasis>$dlg_val(name)</emphasis>.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, BRANCH_ROUTE,
			REPLY_ROUTE and FAILURE_ROUTE.
		</para>
		<example>
		<title><function>fetch_dlg_value</function> usage</title>
		<programlisting format="linespecific">
...
fetch_dlg_value("inv_src_ip","$avp(2)");
fetch_dlg_value("account type","$var(account)");
# or
$var(account) = $dlg_val(account_type);
...
</programlisting>
		</example>
	</section>

	</section>


	<section>
	<title>Exported statistics</title>
		<section>
			<title><varname>active_dialogs</varname></title>
			<para>
			Returns the number of current active dialogs (may be confirmed or
			not).
			</para>
		</section>
		<section>
			<title><varname>early_dialogs</varname></title>
			<para>
			Returns the number of early dialogs.
			</para>
		</section>		<section>
			<title><varname>processed_dialogs</varname></title>
			<para>
			Returns the total number of processed dialogs (terminated,
			expired or active) from the startup.
			</para>
		</section>
		<section>
			<title><varname>expired_dialogs</varname></title>
			<para>
			Returns the total number of expired dialogs from the startup.
			</para>
		</section>
		<section>
			<title><varname>failed_dialogs</varname></title>
			<para>
			Returns the number of failed dialogs ( dialogs were
			never established due to whatever reasons - internal error,
			negative reply, cancelled, etc )
			</para>
		</section>
		<section>
			<title><varname>create_sent</varname></title>
			<para>
				Returns the number of replicated dialog
			<emphasis role='bold'>create</emphasis> requests send to other OpenSIPS
			instances.
			</para>
		</section>
		<section>
			<title><varname>update_sent</varname></title>
			<para>
				Returns the number of replicated dialog
			<emphasis role='bold'>update</emphasis> requests send to other OpenSIPS
			instances.
			</para>
		</section>
		<section>
			<title><varname>delete_sent</varname></title>
			<para>
				Returns the number of replicated dialog
			<emphasis role='bold'>delete</emphasis> requests send to other OpenSIPS
			instances.
			</para>
		</section>
		<section>
			<title><varname>create_recv</varname></title>
			<para>
				Returns the number of dialog
			<emphasis role='bold'>create</emphasis> events received from other
			OpenSIPS instances.
			</para>
		</section>
		<section>
			<title><varname>update_recv</varname></title>
			<para>
				Returns the number of dialog
			<emphasis role='bold'>update</emphasis> events received from other
			OpenSIPS instances.
			</para>
		</section>
		<section>
			<title><varname>delete_recv</varname></title>
			<para>
				Returns the number of dialog
			<emphasis role='bold'>delete</emphasis> events received from other
			OpenSIPS instances.
			</para>
		</section>
	</section>


	<section>
	<title>Exported MI Functions</title>

		<section>
		<title><varname>dlg_list</varname></title>
		<para>
		Lists the description of the dialogs (calls). If no parameter is given,
		all dialogs will be listed. If a dialog identifier is passed
		as parameter (callid and fromtag), only that dialog will be listed. If
		a index and conter parameter is passed, it will list only a number of
		"counter" dialogs starting with index (as offset) - this is used to
		get only section of dialogs.
		</para>
		<para>
		Name: <emphasis>dlg_list</emphasis>
		</para>
		<para>Parameters (with dialog idetification):</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>callid</emphasis> (optional) - callid if a single
				dialog to be listed.
			</para></listitem>
			<listitem><para>
				<emphasis>from_tag</emphasis> (optional, but cannot be present
				without the callid parameter) - fromtag (as per initial request)
				of the dialog to be listed.
				entry
			</para></listitem>
		</itemizedlist>
		<para>Parameters (with dialog counting):</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>index</emphasis> - offset where the dialog listing
				should start.
			</para></listitem>
			<listitem><para>
				<emphasis>counter</emphasis> - how many dialogs should be
				listed (starting from the offset)
			</para></listitem>
		</itemizedlist>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:dlg_list:_reply_fifo_file_
		_empty_line_
		</programlisting>
		<programlisting  format="linespecific">
		:dlg_list:_reply_fifo_file_
		abcdrssfrs122444@192.168.1.1
		AAdfeEFF33
		</programlisting>
		<programlisting  format="linespecific">
		:dlg_list:_reply_fifo_file_
		40
		10
		</programlisting>
		</section>

		<section>
		<title><varname>dlg_list_ctx</varname></title>
		<para>
		The same as the <quote>dlg_list</quote> but including in the
		dialog description
		the associated context from modules sitting on top of
		the dialog module.
		This function also prints the dialog's values. In case of
		binary values, the non-printable chars are represented in hex
		(e.g. \x00)
		</para>
		<para>
		Name: <emphasis>dlg_list_ctx</emphasis>
		</para>
		<para>Parameters: <emphasis>see <quote>dlg_list</quote></emphasis>
		</para>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:dlg_list_ctx:_reply_fifo_file_
		_empty_line_
		</programlisting>
		</section>

		<section  id='dlg_end_dlg' xreflabel="dlg_end_dlg">
			<title><varname>dlg_end_dlg</varname></title>
			<para>
				Terminates an ongoing dialog.
				If dialog is established, BYEs are sent in both directions.
				If dialog is in unconfirmed or early state, a CANCEL will be sent
				to the callee side, that will trigger a 487 from the callee,
				which, when relayed, will also end the dialog on the caller's side.
			</para>
		<para>
		Name: <emphasis>dlg_end_dlg</emphasis>
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>h_entry</emphasis> - hash entry of the dialog in the
				internal dialog table
			</para></listitem>
			<listitem><para>
				<emphasis>h_id</emphasis> - hash id of the dialog on the hash
				entry
			</para></listitem>
			<listitem><para>
				<emphasis>extra_hdrs</emphasis> - (optional) string containg
				extra headers (full format) to be added to the BYE requests.
			</para></listitem>
		</itemizedlist>
		<para>
		The values for the h_entry and h_id can be get via the dlg_list
		MI command.
		</para>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:dlg_end_dlg:_reply_fifo_file_
		342
		56
		_empty_line_
		</programlisting>
		</section>

		<section>
		<title><varname>profile_get_size</varname></title>
		<para>
		Returns the number of dialogs belonging to a profile. If the profile
		supports values, the check can be reinforced to take into account a
		specific value - how many dialogs were inserted into the profile with
		a specific value. If not value is passed, only simply belonging of the
		dialog to the profile is checked. Note that the profile does not
		supports values, this will be silently discarded.
		</para>
		<para>
		Name: <emphasis>profile_get_size</emphasis>
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>profile</emphasis> - name of the profile to get the
				value for.
			</para></listitem>
			<listitem><para>
				<emphasis>value</emphasis> (optional)- string value to
				toughen the check;
			</para></listitem>
		</itemizedlist>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:profile_get_size:_reply_fifo_file_
		inbound_calls
		_empty_line_
		</programlisting>
		</section>

		<section>
		<title><varname>profile_list_dlgs</varname></title>
		<para>
		Lists all the dialogs belonging to a profile. If the profile
		supports values, the check can be reinforced to take into account a
		specific value - list only the dialogs that were inserted into the
		profile with that specific value. If not value is passed, all dialogs
		belonging to the profile will be listed. Note that the profile does
		not supports values, this will be silently discarded. Also, when using
		shared profiles using the CacheDB interface, this command will only
		display the local dialogs.
		</para>
		<para>
		Name: <emphasis>profile_list_dlgs</emphasis>
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>profile</emphasis> - name of the profile to list the
				dialog for.
			</para></listitem>
			<listitem><para>
				<emphasis>value</emphasis> (optional)- string value to
				toughen the check;
			</para></listitem>
		</itemizedlist>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:profile_list_dlgs:_reply_fifo_file_
		inbound_calls
		_empty_line_
		</programlisting>
		</section>

		<section>
		<title><varname>profile_get_values</varname></title>
		<para>
		Lists all the values belonging to a profile along with their
		count. If the profile does not support values a total count
		will be returned. Note that this function does not work for shared
		profiles over the CacheDB interface.
		</para>
		<para>
		Name: <emphasis>profile_get_values</emphasis>
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>profile</emphasis> - name of the profile to list the
				dialog for.
			</para></listitem>
		</itemizedlist>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:profile_get_values:_reply_fifo_file_
		inbound_calls
		_empty_line_
		</programlisting>
		</section>
		<section>
		<title><varname>profile_end_dlgs</varname></title>
		<para>
		Terminate all ongoing dialogs from a specified profile, on a single dialog it
		performs the same operations as the command <emphasis role='bold'><xref linkend="dlg_end_dlg"/></emphasis>
		</para>
		<para>
		Name: <emphasis>profile_end_dlgs</emphasis>
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>profile</emphasis> - name of the profile that will have its dialogs termianted
			</para></listitem>
			<listitem><para>
				<emphasis>value</emphasis> - (optional) if the profile supports values terminate only the dialogs
				with the specified value
			</para></listitem>
		</itemizedlist>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:profile_end_dlgs:_reply_fifo_file_
		inbound_calls
		_empty_line_
		</programlisting>
		</section>
		<section>
		<title><varname>dlg_db_sync</varname></title>
		<para>
		Will synchronize the information about the dialogs from the database
		with the OpenSIPS internal memory. To be used mainly for transferring
		OpenSIPS dialog information from one server to another.
		</para>
		<para>
		Name: <emphasis>dlg_db_sync</emphasis>
		</para>
		<para>It takes no parameters</para>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:dlg_db_sync:_reply_fifo_file_
		_empty_line_
		</programlisting>
		</section>

		<section>
		<title><varname>dlg_restore_db</varname></title>
		<para>
		Restores the dialog table after a potential desynchronization event.
		The table is truncated, then populated with CONFIRMED dialogs from memory.
		</para>
		<para>
		Name: <emphasis>dlg_restore_db</emphasis>
		</para>
		<para>It takes no parameters</para>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:dlg_restore_db:_reply_fifo_file_
		_empty_line_
		</programlisting>
		</section>

		<section>
		<title><varname>list_all_profiles</varname></title>
		<para>
		Lists all the dialog profiles, along with 1 or 0 if
		the given profile has/does not have an associated value.
		</para>
		<para>
		Name: <emphasis>list_all_profiles</emphasis>
		</para>
		<para>Parameters: <emphasis>It takes no parameters</emphasis>
		</para>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:list_all_profiles:_reply_fifo_file_
		_empty_line_
		</programlisting>
		</section>
		<section>
		<title>
		<function moreinfo="none">profile_bin_status</function>
		</title>
		<para>
		Dumps each destination used for profiles replication, as well as
		the timestamp of the last message received from them.
		</para>
		<para>
		Name: <emphasis>profile_bin_status</emphasis>
		</para>
		<para>Parameters: <emphasis>none</emphasis></para>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:profile_bin_status:_reply_fifo_file_
		_empty_line_
		</programlisting>
		</section>
	</section>


	<section>
	<title>Exported pseudo-variables</title>

		<section>
			<title><varname>$DLG_count</varname></title>
			<para>
			Returns the number of current active dialogs (may be confirmed or
			not).
			</para>
		</section>

		<section>
			<title><varname>$DLG_status</varname></title>
			<para>
			Returns the status of the dialog corresponding to the processed
			sequential request. This PV will be available only for sequential
			requests, after doing loose_route().
			</para>
			<para>
			Value may be:
			</para>
			<itemizedlist>
				<listitem><para>
					<emphasis>NULL</emphasis> - Dialog not found.
				</para></listitem>
				<listitem><para>
					<emphasis>1</emphasis> - Dialog unconfirmed (created
					but no reply received at all)
				</para></listitem>
				<listitem><para>
					<emphasis>2</emphasis> - Dialog in early state (created
					provisional reply received, but no final reply received
					yet)
				</para></listitem>
				<listitem><para>
					<emphasis>3</emphasis> - Confirmed by a final reply but
					no ACK received yet.
				</para></listitem>
				<listitem><para>
					<emphasis>4</emphasis> - Confirmed by a final reply and
					ACK received.
				</para></listitem>
				<listitem><para>
					<emphasis>5</emphasis> - Dialog ended.
				</para></listitem>
			</itemizedlist>
		</section>

		<section>
			<title><varname>$DLG_lifetime</varname></title>
			<para>
			Returns the duration (in seconds) of the dialog corresponding to
			the processed sequential request. The duration is calculated from
			the dialog confirmation and the current moment. This PV will be
			available only for sequential requests, after doing loose_route().
			</para>
			<para>
			NULL will be returned if there is no dialog for the request.
			</para>
		</section>

		<section>
			<title><varname>$DLG_flags</varname></title>
			<para>
			Returns the dialog flags array (as a single integer value)
			of the dialog corresponding to the processed sequential request.
			This PV will be available only for sequential requests,
			after doing loose_route().
			</para>
			<para>
			NULL will be returned if there is no dialog for the request.
			</para>
		</section>

		<section>
			<title><varname>$DLG_dir</varname></title>
			<para>
			Returns the direction of the request in dialog (as "UPSTREAM" or
			"DOWNSTREAM" string) - to be used for sequential request.
			This PV will be available only for sequential requests (on
			replies), after doing loose_route().
			</para>
			<para>
			NULL will be returned if there is no dialog for the request.
			</para>
		</section>

		<section>
			<title><varname>$DLG_did</varname></title>
			<para>
			Returns the id of the dialog corresponding to
			the processed sequential request. The output format is
			entry ':' id (as returned by the dlg_list MI function). This PV will be
			available only for sequential requests, after doing loose_route().
			</para>
			<para>
			NULL will be returned if there is no dialog for the request.
			</para>
		</section>

		<section>
			<title><varname>$DLG_end_reason</varname></title>
			<para>
				Returns the reason for the dialog termination. It can be
				one of the following :

				<itemizedlist>
					<listitem>
						<para><emphasis>Upstream BYE</emphasis> - Callee has sent a BYE
						</para>
					</listitem>
					<listitem>
						<para><emphasis>Downstream BYE</emphasis> - Caller has sent a BYE
						</para>
					</listitem>
					<listitem>
						<para><emphasis>Lifetime Timeout</emphasis> - Dialog lifetime expired
						</para>
					</listitem>
					<listitem>
						<para><emphasis>MI Termination</emphasis> - Dialog ended via the MI interface
						</para>
					</listitem>
					<listitem>
						<para><emphasis>Ping Timeout</emphasis> - Dialog ended because no reply to in-dialog pings
						</para>
					</listitem>
					<listitem>
						<para><emphasis>RTPProxy Timeout</emphasis> - Media timeout signaled by RTPProxy
						</para>
					</listitem>
				</itemizedlist>
			</para>
			<para>
				NULL will be returned if there is no dialog for the request,
				or if the dialog is not ended in the current context.
			</para>
		</section>

		<section id="timeout-pvar-id">
			<title><varname>$DLG_timeout</varname></title>
			<para>
				Used to set the dialog lifetime (in seconds). When read, the variable
				returns the number of seconds until the dialog expires and is destroyed.
				Note that reading the variable is only possible after the dialog is created
				(for initial requests) or after doing loose_route() (for sequential requests).
				Important notice: using this variable with a REALTIME db_mode is very inefficient,
				because every time the dialog value is changed, a database update is done.
			</para>
			<para>
				NULL will be returned if there is no dialog for the request, otherwise the
				number of seconds until the dialog expiration.
			</para>
		</section>

		<section>
			<title><varname>$dlg_val(name)</varname></title>
			<para>
			This is a read/write variable that allows access to the dialog
			attribute named <emphasis>name</emphasis>.
			This PV will be available only for sequential requests,
			after doing loose_route().
			</para>
			<para>
			NULL will be returned if there is no dialog for the request.
			</para>
		</section>

	</section>

	<section>
	<title>Exported Events</title>
	<section>
		<title>
		<function moreinfo="none">E_DLG_STATE_CHANGED</function>
		</title>
		<para>
			This event is raised when the dialog state is changed.
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>ostate</emphasis> - the old state of the dialog.
			</para></listitem>
			<listitem><para>
				<emphasis>nstate</emphasis> - the new state of the dialog.
			</para></listitem>
		</itemizedlist>
	</section>
	</section>


</chapter>

