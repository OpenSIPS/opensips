<!-- Module User's Guide -->

<chapter>

	<title>&adminguide;</title>

	<section>
	<title>Overview</title>
	<para>
		This module implements rate limiting for SIP requests. In contrast to
		the PIKE module this limits the flow based on a per SIP request type
		basis and not per source IP. The latest sources allow you to
		dynamically group several messages into some entities and limit the
		traffic based on them. The MI interface can be used to change
		tunables while running OpenSIPS.
	</para>
	<para>
		This module is also integrated with the &osips; Key-Value Interface,
		providing support for distributed rate limiting using Redis or Memcached
		CacheDB backends.
	</para>
	<para>
		To achieve a distributed ratelimit feature, the module can replicate
		its pipes counters to different &osips; interfaces using the binary replicate
		interface (BIN). To do that, define the <emphasis>repl_*</emphasis> parameters
		in your configuration script.
	</para>
	</section>
	<section>
	<title>Use Cases</title>
	<para>
		Limiting the rate messages are processed on a system directly
		influences the load. The ratelimit module can be used to protect a
		single host or to protect an OpenSIPS cluster when run on the
		dispatching box in front.
	</para>
	<para>
		Distributed limiting is useful when the rate limit should be
		performed not only on a specific node, but on the entire platform.
		The internal limiting data will no longer be kept on each &osips;
		instance. It will be stored in a distributed Key-Value database and
		queried by each instance before deciding if a SIP message
		should be blocked or not.
	</para>
	<para>
		NOTE: that this behavior only makes sense when the pipe algorithm
		used is TAILDROP or RED.
	</para>
	<para>
		A sample configuration snippet might look like this:
	</para>
	<programlisting format="linespecific">
...
	if (!rl_check("$rU", "50", "TAILDROP")) {
		sl_send_reply("503", "Server Unavailable");
		exit;
	};
...
	</programlisting>
	<para>
		Upon every incoming request listed above rl_check is invoked and
		the entity identified by the R-URI user is checked. It
		returns an OK code if the current per request load is below the
		configured threshold. If the load is exceeded the function returns an
		error and an administrator can discard requests with a stateless
		response.
	</para>
	</section>
	<section>
	<title>Static Rate Limiting Algorithms</title>
	<para>
		The ratelimit module supports two different static algorithms
		to be used by rl_check to determine whether a message should be
		blocked or not.
	</para>
	<section>
		<title>Tail Drop Algorithm (TAILDROP)</title>
		<para>
		This is a trivial algorithm that imposes some risks when used in
		conjunction with long timer intervals. At the start of each interval
		an internal counter is reset and incremented for each incoming
		message. Once the counter hits the configured limit rl_check returns
		an error.
		</para>
		<para>
		The downside of this algorithm is that it can lead to SIP client
		synchronization. During a relatively long interval only the first
		requests (i.e. REGISTERs) would make it through. Following messages
		(i.e. RE-REGISTERs) will all hit the SIP proxy at the same time when a
		common Expire timer expired. Other requests will be retransmissed
		after given time, the same on all devices with the same firmware/by
		the same vendor.
		</para>
	</section>
	<section>
		<title>Random Early Detection Algorithm (RED)</title>
		<para>
		Random Early Detection tries to circumvent the synchronization problem
		imposed by the tail drop algorithm by measuring the average load and
		adapting the drop rate dynamically. When running with the RED
		algorithm OpenSIPS will return errors to the OpenSIPS
		routing engine every n'th packet trying to evenly spread the measured
		load of the last timer interval onto the current interval. As a
		negative side effect OpenSIPS might drop messages although the limit might
		not be reached within the interval. Decrease the timer interval if you
		encounter this.
		</para>
	</section>
	<section>
		<title>Slot Based Taildropping (SBT) </title>
		<para>
			SBT holds a window consisting of one or more slots. You can set the
			<emphasis>window_size</emphasis> parameter(seconds) which means for
			how long we should look back to count the calls and
			<emphasis>slot_period</emphasis> parameter(miliseconds) which tells
			how granular the algorithm should be. The number of slots will be
			<emphasis>window_size</emphasis>/<emphasis>slot_period</emphasis>.
			If, for example, you have <emphasis>window_size</emphasis>=
			<emphasis>slot_period</emphasis>=1 second, then after each second
			you shall lose the call count, but if you set the
			<emphasis>slot_period</emphasis> to 100 microseconds, then when your
			call will be outside the window, the calls in the first 100 microseconds
			shall be dropped, and the rest in the next 900 shall be kept.
		</para>
	</section>
	<section>
		<title>Network Algorithm (NETWORK)</title>
		<para>
		This algorithm relies on information provided by network interfaces.
		The total amount of bytes waiting to be consumed on all the network
		interfaces is retrieved once every timer_interval seconds.
		If the returned amount exceeds the limit specified in the modparam,
		rl_check returns an error.
		</para>
	</section>
	</section>
	<section>
	<title>Dynamic Rate Limiting Algorithms</title>
	<para>
		When running &osips; on different machines, one has to adjust the drop
		rates for the static algorithms to maintain a sub 100% load average or
		packets start getting dropped in the network stack.  While this is not
		in itself difficult, it isn't neither accurate nor trivial: another
		server taking a notable fraction of the cpu time will require re-tuning
		the parameters.
	</para>
	<para>
		While tuning the drop rates from the outside based on a certain factor
		is possible, having the algorithm run inside ratelimit permits tuning
		the rates based on internal server parameters and is somewhat more
		flexible (or it will be when support for external load factors - as
		opposed to cpu load - is added).
	</para>
	<section>
		<title>Feedback Algorithm (FEEDBACK)</title>
		<para>
		Using the PID Controller model
		(see <ulink url='http://en.wikipedia.org/wiki/PID_controller'>Wikipedia page</ulink>),
		the drop rate is adjusted dynamically based on the load factor so that
		the load factor always drifts towards the specified limit (or setpoint,
		in PID terms).
		</para>
		<para>
		As reading the cpu load average is relatively expensive (opening /proc/stat,
		parsing it, etc), this only happens once every timer_interval seconds and
		consequently the FEEDBACK value is only at these intervals recomputed. This
		in turn makes it difficult for the drop rate to adjust quickly.  Worst case
		scenarios are request rates going up/down instantly by thousands - it takes
		up to 20 seconds for the controller to adapt to the new request rate.
		</para>
		<para>
		Generally though, as real life request rates drift by less, adapting should
		happen much faster.
		</para>
	</section>
	</section>
	<section>
	<title>Dependencies</title>
	<section>
		<title>&osips; Modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>No dependencies on other &osips; modules</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be installed before
		running &osips; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>None</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>
	<section>
	<title>Exported Parameters</title>
	<section>
		<title><varname>timer_interval</varname> (integer)</title>
		<para>
		The initial length of a timer interval in seconds. All amounts of
		messages have to be divided by this timer to get a messages per second
		value.
		</para>
		<para>
		IMPORTANT: A too small value may lead to performance penalties due to
		timer process overloading.
		</para>
		<para>
		<emphasis>
			Default value is 10.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>timer_interval</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("ratelimit", "timer_interval", 5)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>expire_time</varname> (integer)</title>
		<para>
		This parameter specifies how long a pipe should be kept in memory
		until deleted.
		</para>
		<para>
		<emphasis>
			Default value is 3600.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>expire_time</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("ratelimit", "expire_time", 1800)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>hash_size</varname> (integer)</title>
		<para>
		The size of the hash table internally used to keep the pipes.
		A larger table is much faster but consumes more memory. The hash size
		must be a power of 2 number.
		</para>
		<para>
		<emphasis>
			Default value is 1024.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>hash_size</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("ratelimit", "hash_size", 512)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>default_algorithm</varname> (string)</title>
		<para>
		Specifies which algorithm should be assumed in case it isn't
		explicitly specified in the <emphasis>rl_check</emphasis> function.
		</para>
		<para>
		<emphasis>
			Default value is "TAILDROP".
		</emphasis>
		</para>
		<example>
		<title>Set <varname>default_algorithm</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("ratelimit", "default_algorithm", "RED")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>cachedb_url</varname> (string)</title>
		<para>
		Enables distributed rate limiting and specifies the backend
		that should be used by the CacheDB interface.
		</para>
		<para>
		<emphasis>
			Default value is "disabled".
		</emphasis>
		</para>
		<example>
		<title>Set <varname>cachedb_url</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("ratelimit", "cachedb_url", "redis://root:root@127.0.0.1/")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>db_prefix</varname> (string)</title>
		<para>
		Specifies what prefix should be added to the pipe name. This is
		only used when distributed rate limiting is enabled.
		</para>
		<para>
		<emphasis>
			Default value is "rl_pipe_".
		</emphasis>
		</para>
		<example>
		<title>Set <varname>db_prefix</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("ratelimit", "db_prefix", "ratelimit_")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>repl_buffer_threshold</varname> (string)</title>
		<para>
		Used to specify the length of the buffer used by the binary
		replication, in bytes. Usually this should be big enough to hold
		as much data as possible, but small enough to avoid UDP
		fragmentation. The recommended value is the smallest MTU between
		all the replication instances.
		</para>
		<para>
		<emphasis>
			Default value is 1400 bytes.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>repl_buffer_threshold</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("ratelimit", "repl_buffer_threshold", 500)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>repl_timer_interval</varname> (string)</title>
		<para>
		Timer in milliseconds, used to specify how often the module
		should replicate its counters to the other instances.
		</para>
		<para>
		<emphasis>
			Default value is 10 ms.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>repl_timer_interval</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("ratelimit", "repl_timer_interval", 100)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>repl_timer_expire</varname> (string)</title>
		<para>
		Timer in seconds, used to specify when the counter received
		from a different instance should no longer be taken into account.
		This is used to prevent obsolete values, in case an instance stops
		replicating its counters.
		</para>
		<para>
		<emphasis>
			Default value is 10 s.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>repl_timer_expire</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("ratelimit", "repl_timer_expire", 10)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>replicate_pipes_to</varname> (integer)</title>
		<para>
                   Used to specify the instances, that belong to a certain cluster,
                where the pipes should be replicated.
		</para>
		<para>
		<emphasis>
			Default value is 0. (no replication destinations)
		</emphasis>
		</para>
		<example>
		<title>Set <varname>replicate_pipes_to</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("ratelimit", "replicate_pipes_to", 1)
...
</programlisting>
		</example>
	</section>

        <section>
		<title><varname>accept_pipes_from</varname> (integer)</title>
		<para>
                   Used to specify the instances, that belong to a certain cluster,
                from which we should expect incoming packets.
		</para>
		<para>
		<emphasis>
			Default value is 0. (disabled)
		</emphasis>
		</para>
		<example>
		<title>Set <varname>accept_pipes_from</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("ratelimit", "accept_pipes_from", 1)
...
</programlisting>
		</example>
	</section>

        <section>
		<title><varname>accept_pipes_timeout</varname> (integer)</title>
		<para>
                   The time between two succesive incoming packets.
		</para>
		<para>
		<emphasis>
			Default value is 10.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>accept_pipes_timeout</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("ratelimit", "accept_pipes_timeout", 1)
...
</programlisting>
		</example>
	</section>

        <section>
		<title><varname>repl_pipes_auth_check</varname> (int)</title>
		<para>
			Authentication check for incoming packets.
		</para>
		<para>
		<emphasis>
			Default value is <quote>0</quote> (disabled).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>repl_pipes_auth_check</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "repl_pipes_auth_check", 1)
...
</programlisting>
		</example>
	</section>

        <section>
		<title><varname>window_size</varname> (int)</title>
		<para>
			How long the history in SBT should be in seconds.
		</para>
		<para>
		<emphasis>
			Default value is <quote>10</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>window_size</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "window_size", 5)
...
</programlisting>
		</example>
	</section>

        <section>
		<title><varname>slot_period</varname> (int)</title>
		<para>
			Value of one slot in microseconds. This parameter determines
		how granular the algorithm should be. The number of slots will be
		determined by window_size/slot_period.
		</para>
		<para>
		<emphasis>
			Default value is <quote>200</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>slot_period</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "window_size", 5)
#we will have 50 slots of 100 microseconds
modparam("dialog", "slot_period", 100)
...
</programlisting>
		</example>
	</section>



	</section>
	<section>
	<title>Exported Functions</title>
	<section>
		<title>
			<function moreinfo="none">rl_check(name, limit[, algorithm])
			</function>
		</title>
		<para>
		Check the current request against the pipe identified by name and
		changes/updates the limit. If no pipe is found, then a new one is
		created with the specified limit and algorithm, if specified. If the
		algorithm parameter doesn't exist, the default one is used.
		</para>
		<para>
		NOTE: A pipe's algorithm cannot be dynamically changed. Only the one
		specified when the pipe was created will be considered.
		</para>
		<para>
		The method will return an error code if the limit for the
		matched pipe is reached.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
			<listitem>
				<para>
				<emphasis>name</emphasis> - this is the name that identifies
				the pipe which should be checked. This parameter accepts both
				strings and pseudovariables.
				</para>
			</listitem>
			<listitem>
				<para>
				<emphasis>limit</emphasis> - this specifies the threshold
				limit of the pipe. It is strongly related to the algorithm
				used. This parameter accepts an integer or a pseudovariable.
				Note that the limit should be specified as per-second, not
				per-timer_interval.
				</para>
			</listitem>
			<listitem>
				<para>
				<emphasis>algorithm</emphasis> - this is parameter is optional
				and reffers to the algorithm used to check the pipe. If it is
				not set, the default value is used. It accepts a string or a
				pseudovariable.
				</para>
			</listitem>

		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function>rl_check</function> usage</title>
		<programlisting format="linespecific">
...
	# perform a pipe match for all INVITE methods using RED algorithm
	if (is_method("INVITE")) {
		if (!rl_check("pipe_INVITE", "100", "RED")) {
			sl_send_reply("503", "Server Unavailable");
			exit;
		};
	};
...
	# use default algorithm for each different gateway
	$var(limit) = 10;
	if (!rl_check("gw_$ru", "$var(limit)")) {
		sl_send_reply("503", "Server Unavailable");
		exit;
	};
...
</programlisting>
		</example>
	</section>
	<section>
		<title>
		<function moreinfo="none">rl_dec_count(name)</function>
		</title>
		<para>
		This function decreases a counter that could have been previously
		increased by <emphasis>rl_check</emphasis> function.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
			<listitem><para>
			<emphasis>name</emphasis> - identifies the name of the pipe.
			</para>
			</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function>rl_dec_count</function> usage</title>
		<programlisting format="linespecific">
...
	if (!rl_check("gw_$ru", "100", "TAILDROP")) {
		exit;
	} else {
		rl_dec_count("gw_$ru");
	};
...
</programlisting>
		</example>
	</section>
	<section>
		<title>
		<function moreinfo="none">rl_reset_count(name)</function>
		</title>
		<para>
		This function resets a counter that could have been previously
		increased by <emphasis>rl_check</emphasis> function.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
			<listitem><para>
			<emphasis>name</emphasis> - identifies the name of the pipe.
			</para>
			</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function>rl_reset_count</function> usage</title>
		<programlisting format="linespecific">
...
	if (!rl_check("gw_$ru", "100", "TAILDROP")) {
		exit;
	} else {
		rl_reset_count("gw_$ru");
	};
...
</programlisting>
		</example>
	</section>

	</section>

	<section>
	<title>Exported MI Functions</title>
	<section>
		<title>
		<function moreinfo="none">rl_list</function>
		</title>
		<para>
		Lists the parameters and variabiles in the ratelimit module.
		</para>
		<para>
		Name: <emphasis>rl_list</emphasis>
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem><para>
			<emphasis>pipe</emphasis> - indicates the name of the pipe. This
			parameter is optional. If it doesn't exist, all the active pipes
			are listed. Otherwise only the one specified.
			</para></listitem>
		</itemizedlist>
 		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:rl_list:_reply_fifo_file_
		gw_10.0.0.1
		_empty_line_
		</programlisting>
		<programlisting  format="linespecific">
		:rl_list:_reply_fifo_file_
		_empty_line_
		</programlisting>
	</section>
	<section>
		<title>
		<function moreinfo="none">rl_reset_pipe</function>
		</title>
		<para>
		Resets the counter of a specified pipe.
		</para>
		<para>
		Name: <emphasis>rl_reset_pipe</emphasis>
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem><para>
			<emphasis>pipe</emphasis> - indicates the name of the pipe whose
			couter should be reset.
			</para></listitem>
		</itemizedlist>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:rl_reset_pipe:_reply_fifo_file_
		gw_10.0.0.1
		_empty_line_
		</programlisting>
	</section>
	<section>
		<title>
		<function moreinfo="none">rl_set_pid</function>
		</title>
		<para>
		Sets the PID Controller parameters for the Feedback Algorithm.
		</para>
		<para>
		Name: <emphasis>rl_set_pid</emphasis>
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem><para>
			<emphasis>ki</emphasis> - the integral parameter.
			</para></listitem>
			<listitem><para>
			<emphasis>kp</emphasis> - the proportional parameter.
			</para></listitem>
			<listitem><para>
			<emphasis>kd</emphasis> - the derivative parameter.
			</para></listitem>
		</itemizedlist>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:rl_set_pid:_reply_fifo_file_
		0.5
		0.5
		0.5
		_empty_line_
		</programlisting>
	</section>
	<section>
		<title>
		<function moreinfo="none">rl_get_pid</function>
		</title>
		<para>
		Gets the list of in use PID Controller parameters.
		</para>
		<para>
		Name: <emphasis>rl_get_pid</emphasis>
		</para>
		<para>Parameters: <emphasis>none</emphasis></para>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:rl_get_pid:_reply_fifo_file_
		_empty_line_
		</programlisting>
	</section>
	<section>
		<title>
		<function moreinfo="none">rl_bin_status</function>
		</title>
		<para>
		Dumps each destination used for replication, as well as
		the timestamp of the last message received from them.
		</para>
		<para>
		Name: <emphasis>rl_bin_status</emphasis>
		</para>
		<para>Parameters: <emphasis>none</emphasis></para>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:rl_bin_status:_reply_fifo_file_
		_empty_line_
		</programlisting>
	</section>
	</section>

	<section>
	<title>Exported pseudo-variables</title>

		<section>
			<title><varname>$rl_count(name)</varname></title>
			<para>
			Returns the counter of a pipe. The variable is read-only.
			</para>
			<para>
			NULL will be returned if the pipe does not exist.
			</para>
		</section>

	</section>
</chapter>

