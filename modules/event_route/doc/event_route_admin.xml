<!-- Module User's Guide -->

<chapter>
	
	<title>&adminguide;</title>
	
	<section>
	<title>Overview</title>
	<para>
		This module provides a simple way for handling different events,
		triggered through the &osips; Event Interface, directly from the &osips;
		script. For a specific event, a special route
		(<emphasis>event_route</emphasis>) has to be declared in the script, and
		should contain the code that handles the event. The route is executed by
		the module when the corresponding event is raised by the &osips; Event
		Interface.Since version 1.12, the way an event is handlend (sync/async)
		should be specified from the configuration script with the desired keyword
		following the name of the event (<emphasis>event_route[e, sync]</emphasis>).
	</para>
	</section>

	<section id="event-route-parameters">
	<title>ROUTE events parameters</title>
	<para>
		In order to retrieve the parameters of an event, the 
		<emphasis>fetch_event_params(pvar_list)</emphasis> function is used. It
		receives a single parameter, that consists of a list of parameters names
		(optional) and the pseudo-variable where the values will be stored. The
		grammar is:
		<para>
			<emphasis>[ param_name= ] pvar [; [ param_name= ] pvar ]*</emphasis>
		</para>

		Example:
		<programlisting format="linespecific">
fetch_event_params("$avp(first_param)");
fetch_event_params("ip=$avp(pike_ip)");
fetch_event_params("source=$avp(src);destination=$avp(dst)");
</programlisting>

		If the name of the parameter is not specified, the avp will be populated
		according to the order of the parameters, as exported by the event. The
		following code will populate the <emphasis>$avp(first)</emphasis> avp
		with the first parameter of the event, <emphasis>$avp(second)</emphasis>
		with the second one and so on.

		<para>
			fetch_event_params("$avp(first);$avp(second);$avp(third)");
		</para>

		<emphasis>NOTE:</emphasis> An event may be triggered within a different event, leading
		to nested processing. This function will retrieve the parameters of the currently processed
		event.
	</para>
	<para>The event name can contain any non-quoted string character, but
		it is recommended to follow the syntax:
		E_<emphasis>MODULE_NAME</emphasis>_<emphasis>EXTRA_NAME</emphasis>
	</para>
	</section>

	<section>
		<title>EVENT_ROUTE usage</title>
		<para>
			In order to handle the <emphasis>E_PIKE_BLOCKED</emphasis> event,
			the following snippet can be used:

			<para>
				<example>
					<title>EVENT_ROUTE usage</title>
					<programlisting format="linespecific">
	event_route[E_PIKE_BLOCKED] {
		fetch_event_params("ip=$avp(pike-ip)");
		xlog("IP $avp(pike-ip) has been blocked\n");
	}
					</programlisting>
				</example>
			</para>
		</para>
	</section>
	
	<section>
	<title>EVENT_ROUTE socket syntax</title>
	<para>
		As the &osips; Event Interface requires, the <emphasis>event_route</emphasis>
		module uses a specific socket syntax:
		<para><emphasis>'route:' event_name</emphasis></para>
	</para>
	<para>
		Example:
		<para>
			<emphasis>route:E_PIKE_BLOCKED</emphasis>
		</para>
	</para>
	</section>

	<section>
	<title>Dependencies</title>
	<section>
		<title>&osips; Modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>No dependencies on other &osips; modules</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be installed before 
		running &osips; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>none</emphasis>
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>

	<section>
	<title>Exported Parameters</title>
	<para>The module does not export parameters to be used in configuration script.</para>
	</section>

	<section>
	<title>Exported Functions</title>

	<section>
		<title>
		<function moreinfo="none">fetch_event_params(pvar_list)</function>
		</title>
		<para>
			Retrieves the parameters of the event. For more information, please 
			read <xref linkend="event-route-parameters"/>.
		</para>
		<para>
			The the pseudo variables list as described in <xref linkend="event-route-parameters"/>.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE and EVENT_ROUTE.
		</para>
		<example>
		<title><function>fetch_event_params</function> usage</title>
		<programlisting format="linespecific">
...
fetch_event_params("$avp(first_param)"); # fetch the first parameter of an event
fetch_event_params("ip=$avp(pike_ip)");  # fetch the ip parameter
fetch_event_params("source=$avp(src);destination=$avp(dst)"); # fetch the source and destination parameters
...
</programlisting>
		</example>
	</section>

	</section>

</chapter>

