<!-- Module User's Guide -->

<chapter>
	<title>&adminguide;</title>

	<section>
		<title>Overview</title>
		<para>
		TLS, as defined in SIP RFC 3261, is a mandatory feature for proxies
		and can be used to secure the SIP signalling on a hop-by-hop basis
		(not end-to-end). TLS works on top of TCP. DTLS, or TLS over UDP is
		already defined by IETF and may become available in the future.
		</para>
	</section>

	<section>
		<title>History</title>
		<para>
		The TLS support was originally developed by Peter Griffiths and posted
		as a patch on SER development mailing list. Thanks to Cesc
		Santasusana, several problems were fixed and some improvements were
		added.
		</para>
		<para>
		The TLS support was simultaneously added in both projects. In SER,
		the support was committed in a separate <quote>experimental</quote>
		CVS tree, as patch to the main CVS tree. In OpenSIPS, the support was
		integrated directly into the CVS tree, as a built-in component, and is
		part of stable OpenSIPS since release >=1.0.0.
		</para>
		<para>
		Starting with OpenSIPS 2.1, the TLS has been moved to a separate
		transport module, that implements the more generic Transport
		Interface.
		</para>
	</section>

	<section>
		<title>Scenario</title>
		<para>
		By the increased number of providers the SIP world is continuously
		growing. More users means more calls and more calls means a high
		probability for a user to receive calls from totally unknown people
		or, in the worst case, to receive unwanted calls. To prevent this, a
		defense mechanism must be adopted by the SIP provider. Since only the
		called user is fully able to classify a call as being unwanted, the
		SIP server, based on all information regarding the call should notify
		the user about the desirability of the call. Information like the
		caller domain, the received source or the incoming protocol can be
		very useful for a SIP server to establish the nature of the call.
		</para>
		<para>
		As this information is quite limited, is very improbable for a server
		to be able detect the unwanted calls - there are many calls that it
		cannot predict anything about its status (neutral calls). So, instead
		on alerting the called user about unwanted calls, the server can
		notify the user about calls that are considered trusted - calls for
		which the server is 100% sure there are not unwanted.
		</para>
		<para>
		So, a trust concept must be defined for SIP servers. Which calls
		are trusted and which are not? A call is trusted if the caller can
		be identify as a trustable user - a user about we have reliable
		information.
		</para>
		<para>
		Since all the user from its domain are authenticated (or should be),
		a SIP server can consider all the calls generated by its user as
		trusted. Now we have to extend the trust concept to the multi-domain
		level. A mutual agreement, between several domains, can establish a
		trusting relationship. So, a domain (called A) will consider also as
		trusted calls all the calls generated by user from a different domain
		(called B) and vice-versa. But just an agreement is not enough; since
		the authentication information is strictly limited to a domain
		(a domain can authenticate only its own user, not the user from other
		domains), there is still the problem of checking the authenticity of
		the caller - he can impersonate (by a false FROM header) a user from
		a domain that is trusted.
		</para>
		<para>
		The answer to this problem is TLS (Transport Layer Security). All
		calls via domain A and domain B will be done via TLS. Authentication
		in origin domain plus TLS transport between domains will make the
		call 100% trusted for the target domain.
		</para>
		<para>
		For such a mechanism to work, the following requirements must be met:
		</para>
		<itemizedlist>
			<listitem>
			<para>
			all UA must have set as outbound proxy their home server.
			</para>
			</listitem>
			<listitem>
			<para>
			all SIP servers must authenticated all the calls generated by
			their own users.
			</para>
			</listitem>
			<listitem>
			<para>all SIP servers must relay the calls generated be their
			user to a trusted domain via TLS.
			</para>
			</listitem>
		</itemizedlist>
		<para>
		Based on this, a server can classify as trusted a call for one of
		its user only if the call is also generated by one of its users or
		is the call is received from a trusted domain ( which is equivalent
		with a call received via TLS). Untrusted call will be calls received
		from users belonging to untrusted domains or from users from trusted
		domains, but whose calls are not routed via their home server
		(so, they are not authenticated by there home servers).
		</para>
		<para>
		Once the server is able to tell if the call is trusted or not, the
		still open issue is about the mechanism used by server to notify the
		called user about the nature of the incoming call.
		</para>
		<para>
		One way to do it is by remotely changing the ringing type of the
		called user's phone. This can be done by inserting special header
		into the INVITE request. Such feature is supported by now by several
		hardphones like CISCO ATA, CISCO 7960 and SNOM. This phones can
		change their ringing tone based on the present or content of the
		"Alert-Info" SIP header as follows:
		</para>
		<itemizedlist>
			<listitem>
			<para><emphasis>CISCO ATA</emphasis> - it has 4 pre-defined
			ringing types. The Alert-Info header must look like
			<quote>Alert-info: Bellcore-drX EOH</quote> where X can be
			between 1 and 4. Note that 1 is the phone default ringing tone.
			</para>
			</listitem>
			<listitem>
			<para><emphasis>CISCO 7960</emphasis> - it has 2 pre-defined
			ringing types and the possibility of uploading new ones.
			The <quote>Alert-Info</quote> header must look like
			<quote>Alert-info: X EOH</quote> where X can be whatever number.
			When this header is present, the phones will not change the
			ringing tone, but the ringing pattern. Normally, the phone rings
			like [ring.........ring..........ring] where [ring] is the
			ringing tone; if the header is present, the ringing pattern will
			be [ring.ring.........ring.ring........]. So, to be able to hear
			some difference between the two patterns (and not only as length),
			its strongly recommended to have a highly asymmetric ringing type
			(as the pre-defined are not!!).
			</para>
			</listitem>
			<listitem>
			<para><emphasis>SNOM</emphasis> - The <quote>Alert-Info</quote>
			header must look like <quote>Alert-info: URL EOH"</quote> where
			URL can be a HTTP URL (for example) from where the phone can
			retrieve a ringing tone.
			</para>
			</listitem>
		</itemizedlist>
	</section>

	<section>
	<title>Dependencies</title>
	<section>
		<title>&osips; Modules</title>
		<para>
		The following modules must be loaded before this module:
                    <itemizedlist>
			<listitem>
			<para>
				<emphasis>tls_mgm</emphasis>.
			</para>
			</listitem>
                    </itemizedlist>
		</para>
	</section>
	<section>
		<title>Dependencies of external libraries</title>
		<para>
			&osips; TLS v1.0 support requires the following packages:
			<itemizedlist>
				<listitem>
				<para><emphasis>openssl</emphasis> or
					<emphasis>libssl</emphasis> >= 0.9.6
				</para>
				</listitem>
				<listitem>
				<para><emphasis>openssl-dev</emphasis> or
					<emphasis>libssl-dev</emphasis>
				</para>
				</listitem>
			</itemizedlist>
		</para>
		<para>
			&osips; TLS v1.1/1.2 support requires the following packages:
			<itemizedlist>
				<listitem>
				<para><emphasis>openssl</emphasis> or
					<emphasis>libssl</emphasis> >= 1.0.1e
				</para>
				</listitem>
				<listitem>
				<para><emphasis>openssl-dev</emphasis> or
					<emphasis>libssl-dev</emphasis>
				</para>
				</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>

	<section>
		<title>&osips; Exported parameters</title>
		<para>
		All these parameters can be used from the opensips.cfg file,
		to configure the behavior of &osips;-TLS.
		</para>

		<section>
			<title><varname>listen</varname>=interface</title>
			<para>
			Not specific to TLS. Allows to specify the protocol
			(udp, tcp, tls), the IP address and the port where the
			listening server will be.
			</para>
			<example>
				<title>Set <varname>listen</varname> variable</title>
				<programlisting format="linespecific">
...
listen = tls:1.2.3.4:5061
...
				</programlisting>
			</example>
		</section>

		<section>
			<title><varname>tls_port</varname> (integer)</title>
			<para>
			Sets the default TLS listening port.
			</para>
			<para><emphasis>
				Default value is 5061.
			</emphasis></para>
			<example>
				<title>Set <varname>tls_port</varname> variable</title>
				<programlisting format="linespecific">
...
modparam("proto_tls", "tls_port", 5062)
...
				</programlisting>
			</example>
		</section>

	<section>
		<title><varname>tls_crlf_pingpong</varname> (integer)</title>
		<para>
			Send CRLF pong (\r\n) to incoming CRLFCRLF ping messages over TLS.
			By default it is enabled (1).
		</para>
		<para>
		<emphasis>
			Default value is 1 (enabled).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>tls_crlf_pingpong</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("proto_tls", "tls_crlf_pingpong", 0)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>tls_crlf_drop</varname> (integer)</title>
		<para>
			Drop CRLF (\r\n) ping messages. When this parameter is enabled,
			the TLS layer drops packets that contains a single CRLF message.
			If a CRLFCRLF message is received, it is handled according to the
			<emphasis>tls_crlf_pingpong</emphasis> parameter.
		</para>
		<para>
		<emphasis>
			Default value is 0 (disabled).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>tls_crlf_drop</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("proto_tls", "tls_crlf_drop", 1)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>tls_max_msg_chunks</varname> (integer)</title>
		<para>
			The maximum number of chunks that a SIP message is expected to
			arrive via TLS. If a packet is received more fragmented than this,
			the connection is dropped (either the connection is very
			overloaded and this leads to high fragmentation - or we are the
			victim of an ongoing attack where the attacker is sending the
			traffic very fragmented in order to decrease server performance).
		</para>
		<para>
		<emphasis>
			Default value is 4.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>tls_max_msg_chunks</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("proto_tls", "tls_max_msg_chunks", 8)
...
</programlisting>
		</example>
	</section>
	</section>

</chapter>
