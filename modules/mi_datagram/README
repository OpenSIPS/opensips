mi_datagram Module
     __________________________________________________________

   Table of Contents

   1. Admin Guide

        1.1. Overview
        1.2. DATAGRAM command syntax
        1.3. Dependencies

              1.3.1. OpenSIPS Modules
              1.3.2. External Libraries or Applications

        1.4. Exported Parameters

              1.4.1. socket_name (string)
              1.4.2. children_count (string)
              1.4.3. unix_socket_mode (integer)
              1.4.4. unix_socket_group (integer) unix_socket_group
                      (string)

              1.4.5. unix_socket_user (integer) unix_socket_group
                      (string)

              1.4.6. socket_timeout (integer)
              1.4.7. trace_destination (string)
              1.4.8. trace_bwlist (string)
              1.4.9. pretty_printing (int)

        1.5. Exported Functions
        1.6. Example

   2. Frequently Asked Questions
   3. Contributors

        3.1. By Commit Statistics
        3.2. By Commit Activity

   4. Documentation

        4.1. Contributors

   List of Tables

   3.1. Top contributors by DevScore^(1), authored commits^(2) and
          lines added/removed^(3)

   3.2. Most recently active contributors^(1) to this module

   List of Examples

   1.1. Set socket_name parameter
   1.2. Set children_count parameter
   1.3. Set unix_socket_mode parameter
   1.4. Set unix_socket_group parameter
   1.5. Set unix_socket_user parameter
   1.6. Set socket_timeout parameter
   1.7. Set trace_destination parameter
   1.8. Set trace_destination parameter
   1.9. Set pretty_printing parameter
   1.10. DATAGRAM request

Chapter 1. Admin Guide

1.1. Overview

   This is a module which provides a UNIX/UDP SOCKET transport
   layer implementation for the Management Interface.

1.2. DATAGRAM command syntax

   The MI requests and replies follow the JSON-RPC syntax.

   If case of an error generated by the MI engine, mostly internal
   errors, an error message in plain text is sent back in the
   datagram.

1.3. Dependencies

1.3.1. OpenSIPS Modules

   The following modules must be loaded before this module:
     * No dependencies on other OpenSIPS modules.

1.3.2. External Libraries or Applications

   The following libraries or applications must be installed
   before running OpenSIPS with this module loaded:
     * none

1.4. Exported Parameters

1.4.1. socket_name (string)

   The name of a UNIX SOCKET or an IP address. The UNIX datagram
   or UDP socket will be created using this parameter in order to
   read the external commands. Both IPv4 and IPv6 are supported.

   Default value is NONE.

   Example 1.1. Set socket_name parameter
...
modparam("mi_datagram", "socket_name", "/tmp/opensips.sock")
...
modparam("mi_datagram", "socket_name", "udp:192.168.2.133:8080")
...

1.4.2. children_count (string)

   The number of child processes to be created. Each child process
   will be a datagram server.

   Default value is 1.

   Example 1.2. Set children_count parameter
...
modparam("mi_datagram", "children_count", 3)
...

1.4.3. unix_socket_mode (integer)

   Permission to be used for creating the listening UNIX datagram
   socket. Not necessary for a UDP socket. It follows the UNIX
   conventions.

   Default value is 0660 (rw-rw----).

   Example 1.3. Set unix_socket_mode parameter
...
modparam("mi_datagram", "unix_socket_mode", 0600)
...

1.4.4. unix_socket_group (integer) unix_socket_group (string)

   Group to be used for creating the listening UNIX socket.

   Default value is the inherited one.

   Example 1.4. Set unix_socket_group parameter
...
modparam("mi_datagram", "unix_socket_group", 0)
modparam("mi_datagram", "unix_socket_group", "root")
...

1.4.5. unix_socket_user (integer) unix_socket_group (string)

   User to be used for creating the listening UNIX socket.

   Default value is the inherited one.

   Example 1.5. Set unix_socket_user parameter
...
modparam("mi_datagram", "unix_socket_user", 0)
modparam("mi_datagram", "unix_socket_user", "root")
...

1.4.6. socket_timeout (integer)

   The reply will expire after trying to sent it for
   socket_timeout milliseconds.

   Default value is 2000.

   Example 1.6. Set socket_timeout parameter
...
modparam("mi_datagram", "socket_timeout", 2000)
...

1.4.7. trace_destination (string)

   Trace destination as defined in the tracing module. Currently
   the only tracing module is proto_hep. This is where traced mi
   messages will go.

   WARNING: A tracing module must be loaded in order for this
   parameter to work. (for example proto_hep).

   Default value is none(not defined).

   Example 1.7. Set trace_destination parameter
...
modparam("proto_hep", "trace_destination", "[hep_dest]10.0.0.2;transport
=tcp;version=3")

modparam("mi_datagram", "trace_destination", "hep_dest")
...

1.4.8. trace_bwlist (string)

   Filter traced mi commands based on a blacklist or a whitelist.
   trace_destination must be defined for this parameter to have
   any purpose. Whitelists can be defined using 'w' or 'W',
   blacklists using 'b' or 'B'. The type is separate by the actual
   blacklist by ':'. The mi commands in the list must be separated
   by ','.

   Defining a blacklists means all the commands that are not
   blacklisted will be traced. Defining a whitelist means all the
   commands that are not whitelisted will not be traced. WARNING:
   One can't define both a whitelist and a blacklist. Only one of
   them is allowed. Defining the parameter a second time will just
   overwrite the first one.

   WARNING: A tracing module must be loaded in order for this
   parameter to work. (for example proto_hep).

   Default value is none(not defined).

   Example 1.8. Set trace_destination parameter
...
## blacklist ps and which mi commands
## all the other commands shall be traced
modparam("mi_datagram", "trace_bwlist", "b: ps, which")
...
## allow only sip_trace mi command
## all the other commands will not be traced
modparam("mi_datagram", "trace_bwlist", "w: sip_trace")
...

1.4.9. pretty_printing (int)

   Indicates whether the JSONRPC responses sent through MI should
   be pretty-printed or not.

   Default value is “0 - no pretty-printing”.

   Example 1.9. Set pretty_printing parameter
...
modparam("mi_fifo", "pretty_printing", 1)
...

1.5. Exported Functions

   No function exported to be used from configuration file.

1.6. Example

   This is an example showing the DATAGRAM format for the
   “get_statistics dialog: tm:” MI commad: request.

   Example 1.10. DATAGRAM request

{"jsonrpc":"2.0","method":"get_statistics","id":"1065","params":[["dialo
g:","tm:"]]}


Chapter 2. Frequently Asked Questions

   2.1.

   Both UNIX and UDP type of socket can be created simultaneusly?

   This version supports only one kind of socket at a time. If
   there are more than one value set for socket_name the last one
   will take effect.

   2.2.

   Is there a limit in the datagram request's size?

   The maximum length of a datagram request or reply is 65457
   bytes.

   2.3.

   Where can I find more about OpenSIPS?

   Take a look at https://opensips.org/.

   2.4.

   Where can I post a question about this module?

   First at all check if your question was already answered on one
   of our mailing lists:
     * User Mailing List -
       http://lists.opensips.org/cgi-bin/mailman/listinfo/users
     * Developer Mailing List -
       http://lists.opensips.org/cgi-bin/mailman/listinfo/devel

   E-mails regarding any stable OpenSIPS release should be sent to
   <users@lists.opensips.org> and e-mails regarding development
   versions should be sent to <devel@lists.opensips.org>.

   If you want to keep the mail private, send it to
   <users@lists.opensips.org>.

   2.5.

   How can I report a bug?

   Please follow the guidelines provided at:
   https://github.com/OpenSIPS/opensips/issues.

Chapter 3. Contributors

3.1. By Commit Statistics

   Table 3.1. Top contributors by DevScore^(1), authored
   commits^(2) and lines added/removed^(3)
     Name DevScore Commits Lines ++ Lines --
   1. Bogdan-Andrei Iancu (@bogdan-iancu) 43 34 355 308
   2. Ancuta Onofrei 28 2 2423 252
   3. Vlad Patrascu (@rvlad-patrascu) 22 2 189 1049
   4. Liviu Chircu (@liviuchircu) 14 11 31 67
   5. Razvan Crainea (@razvancrainea) 12 10 50 34
   6. Daniel-Constantin Mierla (@miconda) 9 7 18 16
   7. Ionut Ionita (@ionutrazvanionita) 8 4 252 25
   8. Henning Westerholt (@henningw) 5 3 9 11
   9. Maksym Sobolyev (@sobomax) 4 2 1 2
   10. Klaus Darilion 3 1 4 4

   All remaining contributors: Walter Doekes (@wdoekes), Julián
   Moreno Patiño, Konstantin Bokarius, Dusan Klinec (@ph4r05),
   Peter Lemenkov (@lemenkov), Edson Gellert Schubert.

   (1) DevScore = author_commits + author_lines_added /
   (project_lines_added / project_commits) + author_lines_deleted
   / (project_lines_deleted / project_commits)

   (2) including any documentation-related commits, excluding
   merge commits. Regarding imported patches/code, we do our best
   to count the work on behalf of the proper owner, as per the
   "fix_authors" and "mod_renames" arrays in
   opensips/doc/build-contrib.sh. If you identify any
   patches/commits which do not get properly attributed to you,
   please submit a pull request which extends "fix_authors" and/or
   "mod_renames".

   (3) ignoring whitespace edits, renamed files and auto-generated
   files

3.2. By Commit Activity

   Table 3.2. Most recently active contributors^(1) to this module
                      Name                   Commit Activity
   1.  Liviu Chircu (@liviuchircu)         Mar 2014 - May 2024
   2.  Maksym Sobolyev (@sobomax)          Feb 2023 - Feb 2023
   3.  Bogdan-Andrei Iancu (@bogdan-iancu) Jun 2007 - Apr 2021
   4.  Razvan Crainea (@razvancrainea)     Oct 2011 - Sep 2019
   5.  Vlad Patrascu (@rvlad-patrascu)     May 2017 - Jan 2019
   6.  Peter Lemenkov (@lemenkov)          Jun 2018 - Jun 2018
   7.  Ionut Ionita (@ionutrazvanionita)   Jan 2017 - Feb 2017
   8.  Julián Moreno Patiño                Feb 2016 - Feb 2016
   9.  Dusan Klinec (@ph4r05)              Dec 2015 - Dec 2015
   10. Walter Doekes (@wdoekes)            May 2014 - May 2014

   All remaining contributors: Henning Westerholt (@henningw),
   Klaus Darilion, Daniel-Constantin Mierla (@miconda), Konstantin
   Bokarius, Edson Gellert Schubert, Ancuta Onofrei.

   (1) including any documentation-related commits, excluding
   merge commits

Chapter 4. Documentation

4.1. Contributors

   Last edited by: Liviu Chircu (@liviuchircu), Vlad Patrascu
   (@rvlad-patrascu), Peter Lemenkov (@lemenkov), Ionut Ionita
   (@ionutrazvanionita), Julián Moreno Patiño, Bogdan-Andrei Iancu
   (@bogdan-iancu), Razvan Crainea (@razvancrainea), Klaus
   Darilion, Daniel-Constantin Mierla (@miconda), Konstantin
   Bokarius, Edson Gellert Schubert, Ancuta Onofrei.

   Documentation Copyrights:

   Copyright © 2007 Voice Sistem SRL
