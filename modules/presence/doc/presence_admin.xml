<!-- Module User's Guide -->

<chapter>
	<title>&adminguide;</title>
	
	<section>
	<title>Overview</title>
	<para> The modules handles PUBLISH and SUBSCRIBE messages and generates
	NOTIFY messages in a general, event independent way. It allows registering 
	events to it from other &osips; modules. Events that can currently be added to
	it are: presence, presence.winfo, dialog;sla from presence_xml
	module and message-summary from presence_mwi module.
	</para>
	<para>
	The modules uses database storage. 
	It has later been improved with memory caching operations to improve
	performance. The Subscribe dialog information are stored in memory and 
	are periodically updated in database, while for Publish only the presence
	or absence of stored info for a certain resource is maintained in memory
	to avoid unnecessary, costly db operations. 
	It is possible to configure a fallback to database mode(by setting module
	parameter "fallback2db"). In this mode, in case a searched record is not 
	found in cache, the search is continued	in database. This is useful for
	an architecture in which processing and memory load might be divided on 
	more machines using the same database.
	</para>
	<para>The module can also work only with the functionality of a library,
	with no message processing and generation, but used only for the exported
	functions.
	This mode of operation is enabled if the db_url parameter is not set to any value.
	</para>
	<para>
	The server follows the specifications in: RFC3265, RFC3856, RFC3857, 
	RFC3858.
	</para>
	</section>

	<section>
	<title>Dependencies</title>
	<section>
		<title>&osips; Modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>a database module</emphasis>.
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>signaling</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>

	<section>
		<title>External Libraries or Applications</title>
		<itemizedlist>
			<listitem>
			<para>
				<emphasis>libxml-dev</emphasis>.
			</para>
			</listitem>
		</itemizedlist>

		</section>
	</section>
	
	<section>
	<title>Exported Parameters</title>
	<section>
		<title><varname>db_url</varname>(str)</title>
		<para>
		The database url.
		</para>
		<para>If set, the module is a fully operational
		presence server. Otherwise, it is used as a 'library', for 
		its exported functions.
		</para>
		<para>
		<emphasis>	Default value is <quote>NULL</quote>.	
		</emphasis>
		</para>
		<example>
		<title>Set <varname>db_url</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("presence", "db_url", 
	"mysql://opensips:opensipsrw@192.168.2.132/opensips")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>presentity_table</varname>(str)</title>
		<para>
		The name of the db table where Publish information are stored.
		</para>
		<para>
		<emphasis>	Default value is <quote>presentity</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>presentity_table</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("presence", "presentity_table", "presentity")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>active_watchers_table</varname>(str)</title>
		<para>
		The name of the db table where active subscription information are 
		stored. 
		</para>
		<para>
		<emphasis>	Default value is <quote>active_watchers</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>active_watchers_table</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("presence", "active_watchers_table", "active_watchers")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>watchers_table</varname>(str)</title>
		<para>
		The name of the db table where subscription states are stored.
		</para>
		<para>
		<emphasis>	Default value is <quote>watchers</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>watchers_table</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("presence", "watchers_table", "watchers")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>clean_period</varname> (int)</title>
		<para>
		The period at which to clean the expired subscription dialogs.
		</para>
		<para>
		<emphasis>Default value is <quote>100</quote>. A zero or negative value disables this activity.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>clean_period</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("presence", "clean_period", 100)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>db_update_period</varname> (int)</title>
		<para>
		The period at which to synchronize cached subscriber info with the
		database.
		</para>
		<para>
		<emphasis>Default value is <quote>100</quote>. A zero or negative value disables synchronization.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>db_update_period</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("presence", "db_update_period", 100)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>expires_offset</varname> (int)</title>
		<para>
			The extra time to store a subscription/publication.
		</para>
		<para>
		<emphasis>Default value is <quote>0</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>expires_offset</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("presence", "expires_offset", 10)
...
</programlisting>
		</example>

</section>
	<section>
		<title><varname>max_expires_subscribe</varname> (int)</title>
		<para>
		The the maximum admissible expires value for SUBSCRIBE
		messages.
		</para>
		<para>
		<emphasis>Default value is <quote>3600</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>max_expires_subscribe</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("presence", "max_expires_subscribe", 3600)
...
</programlisting>
		</example>
	</section>

<section>
		<title><varname>max_expires_publish</varname> (int)</title>
		<para>
		The the maximum admissible expires value for PUBLISH
		messages.
		</para>
		<para>
		<emphasis>Default value is <quote>3600</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>max_expires_publish</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("presence", "max_expires_publish", 3600)
...
</programlisting>
		</example>
	</section>


<section>
		<title><varname>server_address</varname> (str)</title>
		<para>
		The presence server address which will become the value of Contact header filed 
		for 200OK replies to Subscribe and Publish and in Notify messages.
		</para>
		<example>
		<title>Set <varname>server_address</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("presence", "server_address", "sip:10.10.10.10:5060")
...
</programlisting>
		</example>
	</section>
<section>
		<title><varname>fallback2db</varname> (int)</title>
		<para>
		Setting this parameter enables a fallback to db mode of operation.
		In this mode, in case a searched record is not found in cache, 
		the search is continued	in database. Useful for an architecture in
		which processing and memory load might be divided on more machines
		using the same database.
		</para>
		<example>
		<title>Set <varname>fallback2db</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("presence", "fallback2db", 1)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>subs_htable_size</varname> (int)</title>
		<para>
		The size of the hash table to store subscription dialogs.
	This parameter will be used as the power of 2 when computing table size.
	</para>
		<para>
		<emphasis>Default value is <quote>9 (512)</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>subs_htable_size</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("presence", "subs_htable_size", 11)
...
	</programlisting>
		</example>
	</section>

	<section>
		<title><varname>pres_htable_size</varname> (int)</title>
		<para>
	The size of the hash table to store publish records.
	This parameter will be used as the power of 2 when computing table size.
		</para>
		<para>
		<emphasis>Default value is <quote>9 (512)</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>pres_htable_size</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("presence", "pres_htable_size", 11)
...
	</programlisting>
		</example>
	</section>
	<section>
		<title><varname>enable_sphere_check</varname> (int)</title>
		<para>
		This parameter is a flag that should be set if permission rules include
		sphere checking.
		The sphere information is expected to be present in the RPID body
		published by the presentity. The flag is introduced as this check requires
		extra processing that should be avoided if this feature is not supported
		by the clients.
		</para>
		<para>
		<emphasis>Default value is <quote>0 </quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>enable_sphere_check</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("presence", "enable_sphere_check", 1)
...
	</programlisting>
		</example>
	</section>

	<section>
		<title><varname>waiting_subs_daysno</varname> (int)</title>
		<para>
			The number of days to keep the record of a subscription in server database
			if the subscription is in pending or waiting state (no authorization policy was
			defined for it or the target user did not register sice the subscription 
			and was not informed about it).
		</para>
		<para>
			<emphasis>Default value is <quote>3</quote> days. Maximum accepted value is 30 days.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>waiting_subs_daysno</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("presence", "waiting_subs_daysno", 2)
...
	</programlisting>
		</example>
	</section>
	<section>
		<title><varname>mix_dialog_presence</varname> (int)</title>
		<para>
		This module parameter enables a very nice feature in the presence server -
		generating presence information from dialogs state. If this parameter is set,
		the presence server will tell you if a buddy is in a call even if his phone
		did not send a presence Publish with this information.
		You will need to load the dialoginfo modules, presence_dialoginfo, pua_dialoginfo, dialog and pua.
		</para>
		<para>
			<emphasis>Default value is <quote>0</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>mix_dialog_presence</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("presence", "mix_dialog_presence", 1)
...
	</programlisting>
		</example>
	</section>
	<section>
		<title><varname>bla_presentity_spec</varname> (str)</title>
		<para>
			By default the presentity uri for BLA subscribes (event=dialog;sla)
			is computed from contact username + from domain. In some cases though,
			this way of computing the presentity might not be right ( for example if you
			have a SBC in front that masquerades the contact). So we added this parameter
			that allows defining a custom uri to be used as presentity uri for BLA 
			subscribes. You should set this parameter to the name of a pseudovariable
			and then set this pseudovariable to the desired URI before calling the function
			handle_subscribe.
		</para>
		<para>
			<emphasis>Default value is <quote>NULL</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>bla_presentity_spec</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("presence", "bla_presentity_spec", "$var(bla_pres)")
...
	</programlisting>
		</example>
	</section>

	<section>
		<title><varname>bla_fix_remote_target</varname> (int)</title>
		<para>
			Polycom has a bug in the bla implementation. It inserts the remote IP contact
			in the Notify body and when a phone picks up a call put on hold by another
			phone in the same BLA group, it sends an Invite directly to the remote IP.
			OpenSIPS BLA server tries to prevent this by replacing the IP contact with the
			domain, when this is possible.
		</para>
		<para>
			In some cases(configurations) however this is not desirable, so this parameter
			was introduced to disable this behaviour when needed.
		</para>
		<para>
			<emphasis>Default value is <quote>1</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>bla_fix_remote_target</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("presence", "bla_fix_remote_target", 0)
...
	</programlisting>
		</example>
	</section>


	<section>
		<title><varname>notify_offline_body</varname> (int)</title>
		<para>
			If this parameter is set, when no published info is found for
			a user, the presence server will generate a dummy body with status
			'closed' and use it when sending Notify, instead of notifying with no
			body.
		</para>
		<para>
			<emphasis>Default value is <quote>0</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>notify_offline_body</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("presence", "notify_offline_body", 1)
...
	</programlisting>
		</example>
	</section>


	<section>
		<title><varname>end_sub_on_timeout</varname> (int)</title>
		<para>
			If a presence subscription should be automatically terminated 
			(destroyed) when receiving a SIP timeout (408) for a sent
			NOTIFY requests.
		</para>
		<para>
			<emphasis>Default value is <quote>1</quote> (enabled).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>end_sub_on_timeout</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("presence", "end_sub_on_timeout", 0)
...
	</programlisting>
		</example>
	</section>


</section>

<section>
	<title>Exported Functions</title>
	<section>
		<title>
		<function moreinfo="none">handle_publish(char* sender_uri)</function>
		</title>
		<para>
		The function handles PUBLISH requests. It stores and updates 
		published information in database and calls functions to send 
		NOTIFY messages when changes in the published information occur.
		It takes one argument -> sender_uri. The parameter was added 
		for enabling BLA implementation. If present, Notification of
		a change in published state is not sent to the respective uri
		even though a subscription exists.
		It should be taken from the Sender header. It was left at the
		decision of the administrator whether or not to transmit the 
		content of this header as parameter for handle_publish, to 
		prevent security problems.  
		</para>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<para>
		<emphasis>Return code:</emphasis>
		<itemizedlist>
			<listitem>
			<para>
				<emphasis> 1 - if success</emphasis>.
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis> -1 - if error</emphasis>.
			</para>
			</listitem>
		</itemizedlist>
		</para>
		<para>
			The module sends an appropriate stateless reply
			in all cases.
		</para>

		<example>
		<title><function>handle_publish</function> usage</title>
		<programlisting format="linespecific">
...
	if(is_method("PUBLISH"))
	{
		if($hdr(Sender)!= NULL)
			handle_publish("$hdr(Sender)");
		else
			handle_publish();
	} 
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">handle_subscribe(char* force_active)</function>
		</title>
		<para>
		This function is to be used for handling SUBSCRIBE requests. It stores or 
		updates the watcher/subscriber information in database. Additionally, in
		response to initial SUBSCRIBE requests (creating a new subscription session),
		the function also sends back the NOTIFY (with the presence information) to 
		the wathcer/subscriber.
		</para>
		<para>
		The function may take on parameter that controlls what is the default 
		policy (of the presentity) on accepting new subscriptions (accept or reject)
		 - of course, this parameter makes sense only when using
		a presence configuration with privacy rules enabled (force_active parameter
		in presence_xml module is not set).
		</para>
		<para>
		There are scenarios where the presentity (the party you subscribe to) can not 
		upload an XCAP document with it's privacy rules (to controll which watchers are
		allowed to subscribe to it). In such case, from script level, you can
		force the presence server to consider the current subscription allowed 
		(with Subscription-Status:active) by calling handle_subscribe() function with
		the string parameter "1".
		<programlisting format="linespecific">
   Ex: 
	if(uri =~ "kphone@opensips.org")
		handle_subscribe("1");
		</programlisting>
		</para>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<para>
		<emphasis>Return code:</emphasis>
		<itemizedlist>
			<listitem>
			<para>
				<emphasis> 1 - if success</emphasis>.
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis> -1 - if error</emphasis>.
			</para>
			</listitem>
		</itemizedlist>
		</para>
		<para>
			The module sends an appropriate stateless reply
			in all cases.
		</para>

		<example>
		<title><function>handle_subscribe</function> usage</title>
		<programlisting format="linespecific">
...
if(method=="SUBSCRIBE")
    handle_subscribe();
...
</programlisting>
		</example>
	</section>
</section>

<section>
	<title>Exported MI Functions</title>
	<section>
		<title>
		<function moreinfo="none">refreshWatchers</function>
		</title>
		<para>
		Triggers sending Notify messages to watchers if a change in watchers
		authorization or in published state occurred.
		</para>
		<para>
		Name: <emphasis>refreshWatchers</emphasis>
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem>
				<para>presentity_uri : the uri of the user who made the change
				and whose watchers should be informed</para>
			</listitem>
			<listitem>
				<para>event : the event package</para>
			</listitem>
			<listitem>
				<para>refresh type : it distinguishes between the two different types of events
									that can trigger a refresh: 
									<itemizedlist>
									<listitem>
									<para>
									a change in watchers authentication: refresh type= 0 ;
									</para>
									</listitem>
									<listitem>
									<para>
									a statical update in published state (either through direct 
									update in db table or by modifying the pidf manipulation document,
									if pidf_manipulation parameter is set): refresh type!= 0.
									</para>
									</listitem>
									</itemizedlist>
				</para>
			</listitem>
	</itemizedlist>

	<para>
		MI FIFO Command Format:
		</para>
	<programlisting  format="linespecific">
:refreshWatchers:fifo_reply
sip:11@192.168.2.132
presence
1
_empty_line_
	</programlisting>
	</section>

	<section>
	  <title>
		<function moreinfo="none">cleanup</function>
	  </title>
	  <para>
		Manually triggers the cleanup functions for watchers and presentity tables. Useful if you
		have set <varname>clean_period</varname> to zero or less.
	  </para>
	  <para>
		Name: <emphasis>cleanup</emphasis>
	  </para>
	  <para>Parameters:<emphasis>none.</emphasis>emphasis></para>

	  <para>
		MI FIFO Command Format:
	  </para>
	  <programlisting  format="linespecific">
:cleanup:fifo_reply
_empty_line_
	  </programlisting>
	</section>

	<section>
	  <title>
		<function moreinfo="none">pres_phtable_list</function>
	  </title>
	  <para>
		Lists all the presentity records.
	  </para>
	  <para>
		Name: <emphasis>pres_phtable_list</emphasis>
	  </para>
	  <para>Parameters:<emphasis>none.</emphasis></para>

	  <para>
		MI FIFO Command Format:
	  </para>
	  <programlisting  format="linespecific">
:pres_phtable_list:fifo_reply
_empty_line_
	  </programlisting>
	</section>

	<section>
	  <title>
		<function moreinfo="none">subs_phtable_list</function>
	  </title>
	  <para>
		Lists all the subscription records.
	  </para>
	  <para>
		Name: <emphasis>subs_phtable_list</emphasis>
	  </para>
	  <para>Parameters:<emphasis>none.</emphasis></para>

	  <para>
		MI FIFO Command Format:
	  </para>
	  <programlisting  format="linespecific">
:subs_phtable_list:fifo_reply
_empty_line_
	  </programlisting>
	</section>

</section>


	<section>
	<title>Exported Events</title>
	<section>
		<title>
		<function moreinfo="none">E_PRESENCE_PUBLISH</function>
		</title>
		<para>
			This event is raised when the presence module receives
			a PUBLISH message.
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>user</emphasis> - the AOR of the user
			</para></listitem>
			<listitem><para>
				<emphasis>domain</emphasis> - the domain
			</para></listitem>
			<listitem><para>
				<emphasis>event</emphasis> - the type of the
					event published
			</para></listitem>
			<listitem><para>
				<emphasis>expires</emphasis> - the expire value
					of the publish
			</para></listitem>
			<listitem><para>
				<emphasis>etag</emphasis> - the entity tag
			</para></listitem>
			<listitem><para>
				<emphasis>body</emphasis> - the body of the
					PUBLISH request
			</para></listitem>
		</itemizedlist>
	</section>
	</section>

<section>
	<title>Installation</title>
	<para>
	The module requires 3 table in OpenSIPS database: presentity,
	active_watchers and watchers tables. The SQL 
	syntax to create them can be found in presence-create.sql 
	script in the database directories in the opensips/scripts folder.
	You can also find the complete database documentation on the
	project webpage, &osipsdbdocslink;.
	</para>
</section>

</chapter>

