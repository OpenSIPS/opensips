#
# $Id$
#
# simple quick-start config script
#

# ----------- global configuration parameters ------------------------

debug=4		        # debug level (cmd line: -dddddddddd)
fork=no
listen=192.168.0.1
log_stderror=yes	# (cmd line: -E)
check_via=no		# (cmd. line: -v)
dns=no			# (cmd. line: -r)
rev_dns=no		# (cmd. line: -R)
port=5060
children=4
fifo="/tmp/ser_fifo"

# ------------------ module loading ----------------------------------

loadmodule "modules/mysql/mysql.so"
	    
loadmodule "modules/sl/sl.so"
loadmodule "modules/print/print.so"
loadmodule "modules/tm/tm.so"
loadmodule "modules/rr/rr.so"
loadmodule "modules/maxfwd/maxfwd.so"

#loadmodule "modules/usrloc/usrloc.so"
#loadmodule "modules/registrar/registrar.so"

loadmodule "modules/textops/textops.so"
loadmodule "modules/exec/exec.so"
	    
loadmodule "modules/vm/vm_mod.so"
	    
#loadmodule "modules/auth/auth.so"

# ----------------- setting module-specific parameters ---------------

# -- usrloc params --

#modparam("usrloc", "db_mode",   2)
#modparam("usrloc", "db_url","sql://ser:ser@localhost/ser")
#modparam("auth", "calculate_ha1", yes)
#modparam("auth", "password_column", "password")
#modparam("auth", "db_url","sql://ser:ser@localhost/ser")

modparam("voicemail", "db_url","sql://ser:ser@localhost/ser")
# -------------------------  request routing logic -------------------

# main routing logic

route{

	# initial sanity checks -- messages with
	# max_forwars==0, or excessively long requests
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		break;
	};
	if (len_gt( max_len )) {
		sl_send_reply("513", "Message too big");
		break;
	};

	# Do strict routing if pre-loaded route headers present
	strict_route();

	# if the request is for other domain use UsrLoc
	# (in case, it does not work, use the following command
	# with proper names and addresses in it)
	if (uri==myself) {

		#if (method=="REGISTER") {

			#if (!www_authorize("192.168.0.1", "subscriber")) {
				#www_challenge("192.168.0.1", "0");
				#break;
			#};
			#save("location");
			#break;
		#};

		# Voicemail specific configuration - begin

		if(method=="ACK" || method=="INVITE" || method=="BYE"){

			if(t_newtran()){

				if(method=="ACK"){
					log("oops--ACK to a non-existent transaction\n");
					drop;
				};

				t_reply("100","Trying -- just wait a minute !");

				if(method=="INVITE"){
					log("#### vm_start - begin ####\n");
					if(!vm_start()){
						log("could not contact the answer machine\n");
						t_reply("500","could not contact the answer machine");
					};
					log("#### vm_start - end ####\n");
					break;
				};

				if(method=="BYE"){
					log("#### vm_stop - begin ####\n");
					if(!vm_stop()){
						log("could not contact the answer machine\n");
						t_reply("500","could not contact the answer machine");
					};
					log("#### vm_stop - end ####\n");
					break;
				};
			}
			else {
			     log("!!! error while creating new transaction !!!\n");
			     sl_send_reply("500","could not create new transaction");
			};
		};

		# Voicemail specific configuration - end

		# native SIP destinations are handled using our USRLOC DB
		#if (!lookup("location")) {
			#sl_send_reply("404", "Not Found");
			#break;
		#};
	};

	# forward to current uri now
	if (!t_relay()) {
		log("!!! error while doing t_relay() !!!\n");
		sl_send_reply("500","!!! error while doing t_relay() !!!");
	};

}








