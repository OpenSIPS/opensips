event_xmlrpc Module
     __________________________________________________________

   Table of Contents

   1. Admin Guide

        1.1. Overview
        1.2. XMLRPC socket syntax
        1.3. Dependencies

              1.3.1. OpenSIPS Modules
              1.3.2. External Libraries or Applications

        1.4. Exported Parameters

              1.4.1. use_struct_param (integer)

        1.5. Exported Functions
        1.6. Example

   2. Contributors

        2.1. By Commit Statistics
        2.2. By Commit Activity

   3. Documentation

        3.1. Contributors

   List of Tables

   2.1. Top contributors by DevScore^(1), authored commits^(2) and
          lines added/removed^(3)

   2.2. Most recently active contributors^(1) to this module

   List of Examples

   1.1. Set use_struct_param parameter
   1.2. E_PIKE_BLOCKED event
   1.3. XMLRPC socket

Chapter 1. Admin Guide

1.1. Overview

   This module is an implementation of an XMLRPC client used to
   notify XMLRPC servers whenever certain notifications are raised
   by OpenSIPS. It acts as a transport layer for the Event
   Notification Interface.

   Basicly, the module executes a remote procedure call when an
   event is raised from OpenSIPS's script, core or modules using
   the Event Interface.

   In order to be notified, an XMLRPC server has to subscribe for
   a certain event provided by OpenSIPS. This can be done using
   the generic MI Interface (event_subscribe function) or from
   OpenSIPS script (subscribe_event core function).

1.2. XMLRPC socket syntax

   'xmlrpc:' host ':' port ':' method

   Meanings:
     * 'xmlrpc:' - informs the Event Interface that the events
       sent to this subscriber should be handled by the
       event_xmlrpc module.
     * host - host name of the XMLRPC server.
     * port - port of the XMLRPC server.
     * method - method called remotely by the XMLRPC client.
       NOTE: the client does not wait for a response from the
       XMLRPC server.

1.3. Dependencies

1.3.1. OpenSIPS Modules

   The following modules must be loaded before this module:
     * none.

1.3.2. External Libraries or Applications

   The following libraries or applications must be installed
   before running OpenSIPS with this module loaded:
     * none

1.4. Exported Parameters

1.4.1. use_struct_param (integer)

   When raising an event, pack the name and value of the
   parameters in a XMLRPC structure. This provides an easier way
   for some XMLRPC server implementations to interpret the
   parameters. Set it to zero to disable or to non-zero to enable
   it.

   Default value is “0 (disabled)”.

   Example 1.1. Set use_struct_param parameter
...
modparam("event_xmlrpc", "use_struct_param", 1)
...

1.5. Exported Functions

   No function exported to be used from configuration file.

1.6. Example

   This is an example of an event raised by the pike module when
   it decides an ip should be blocked:

   Example 1.2. E_PIKE_BLOCKED event


POST /RPC2 HTTP/1.1.
Host: 127.0.0.1:8081.
Connection: close.
User-Agent: OpenSIPS XMLRPC Notifier.
Content-type: text/xml.
Content-length: 240.
                .
<?xml version="1.0"?>
<methodCall>
        <methodName>e_dummy_h</methodName>
        <params>
                <param>
                        <value><string>E_MY_EVENT</string></value>
                </param>
                <param>
                        <name>ip</name>
                        <value><string>192.168.2.11</string></value>
                </param>
        </params>
</methodCall>


   Example 1.3. XMLRPC socket

        # calls the 'block_ip' function
        xmlrpc:127.0.0.1:8080:block_ip


Chapter 2. Contributors

2.1. By Commit Statistics

   Table 2.1. Top contributors by DevScore^(1), authored
   commits^(2) and lines added/removed^(3)
     Name DevScore Commits Lines ++ Lines --
   1. Razvan Crainea (@razvancrainea) 37 23 1239 131
   2. Vlad Patrascu (@rvlad-patrascu) 10 6 208 65
   3. Liviu Chircu (@liviuchircu) 9 7 63 31
   4. Bogdan-Andrei Iancu (@bogdan-iancu) 5 3 8 9
   5. Maksym Sobolyev (@sobomax) 5 3 4 4
   6. Ionut Ionita (@ionutrazvanionita) 3 1 103 28
   7. Peter Lemenkov (@lemenkov) 3 1 1 1
   8. Ryan Bullock (@rrb3942) 2 1 8 0

   (1) DevScore = author_commits + author_lines_added /
   (project_lines_added / project_commits) + author_lines_deleted
   / (project_lines_deleted / project_commits)

   (2) including any documentation-related commits, excluding
   merge commits. Regarding imported patches/code, we do our best
   to count the work on behalf of the proper owner, as per the
   "fix_authors" and "mod_renames" arrays in
   opensips/doc/build-contrib.sh. If you identify any
   patches/commits which do not get properly attributed to you,
   please submit a pull request which extends "fix_authors" and/or
   "mod_renames".

   (3) ignoring whitespace edits, renamed files and auto-generated
   files

2.2. By Commit Activity

   Table 2.2. Most recently active contributors^(1) to this module
                     Name                   Commit Activity
   1. Vlad Patrascu (@rvlad-patrascu)     Jul 2015 - Jun 2023
   2. Maksym Sobolyev (@sobomax)          Feb 2017 - Feb 2023
   3. Razvan Crainea (@razvancrainea)     May 2012 - Jan 2020
   4. Bogdan-Andrei Iancu (@bogdan-iancu) Oct 2014 - Apr 2019
   5. Liviu Chircu (@liviuchircu)         Oct 2013 - Nov 2018
   6. Peter Lemenkov (@lemenkov)          Jun 2018 - Jun 2018
   7. Ionut Ionita (@ionutrazvanionita)   Jan 2016 - Jan 2016
   8. Ryan Bullock (@rrb3942)             Jan 2013 - Jan 2013

   (1) including any documentation-related commits, excluding
   merge commits

Chapter 3. Documentation

3.1. Contributors

   Last edited by: Vlad Patrascu (@rvlad-patrascu), Peter Lemenkov
   (@lemenkov), Liviu Chircu (@liviuchircu), Razvan Crainea
   (@razvancrainea).

   Documentation Copyrights:

   Copyright © 2012 www.opensips-solutions.com
