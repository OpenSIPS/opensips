mi_xmlrpc_ng Module
     __________________________________________________________

   Table of Contents

   1. Admin Guide

        1.1. Overview
        1.2. Dependencies

              1.2.1. External Libraries or Applications
              1.2.2. OpenSIPS Modules

        1.3. Exported Parameters

              1.3.1. http_root(string)
              1.3.2. trace_destination (string)
              1.3.3. trace_bwlist (string)

        1.4. Exported Functions
        1.5. Known issues
        1.6. Example

   2. Contributors

        2.1. By Commit Statistics
        2.2. By Commit Activity

   3. Documentation

        3.1. Contributors

   List of Tables

   2.1. Top contributors by DevScore^(1), authored commits^(2) and
          lines added/removed^(3)

   2.2. Most recently active contributors^(1) to this module

   List of Examples

   1.1. Set http_root parameter
   1.2. Set trace_destination parameter
   1.3. Set trace_destination parameter
   1.4. XMLRPC request

Chapter 1. Admin Guide

1.1. Overview

   This module implements a xmlrpc server that handles xmlrpc
   requests and generates xmlrpc responses. When a xmlrpc message
   is received a default method is executed.

   At first, it looks up the MI command. If found it parses the
   called procedure's parameters into a MI tree and the command is
   executed. A MI reply tree is returned that is formatted back in
   xmlrpc. The response is built in two ways - like a string that
   contains the MI tree nodes information (name, values and
   attributes) or like an array whose elements are consisted of
   each MI tree node stored information.

1.2. Dependencies

1.2.1. External Libraries or Applications

   The following libraries or applications must be installed
   before running OpenSIPS with this module loaded:
     * libxml2

1.2.2. OpenSIPS Modules

   The following modules must be loaded before this module:
     * httpd module.

1.3. Exported Parameters

1.3.1. http_root(string)

   Specifies the root path for xmlrpc requests:
   http://[opensips_IP]:[opensips_httpd_port]/[http_root]

   The default value is "RPC2".

   Example 1.1. Set http_root parameter
...
modparam("mi_xmlrpc_ng", "http_root", "opensips_mi_xmlrpc")
...

1.3.2. trace_destination (string)

   Trace destination as defined in the tracing module. Currently
   the only tracing module is proto_hep. This is where traced mi
   messages will go.

   WARNING: A tracing module must be loaded in order for this
   parameter to work. (for example proto_hep).

   Default value is none(not defined).

   Example 1.2. Set trace_destination parameter
...
modparam("proto_hep", "trace_destination", "[hep_dest]10.0.0.2;transport
=tcp;version=3")

modparam("mi_xmlrpc_ng", "trace_destination", "hep_dest")
...

1.3.3. trace_bwlist (string)

   Filter traced mi commands based on a blacklist or a whitelist.
   trace_destination must be defined for this parameter to have
   any purpose. Whitelists can be defined using 'w' or 'W',
   blacklists using 'b' or 'B'. The type is separate by the actual
   blacklist by ':'. The mi commands in the list must be separated
   by ','.

   Defining a blacklists means all the commands that are not
   blacklisted will be traced. Defining a whitelist means all the
   commands that are not whitelisted will not be traced. WARNING:
   One can't define both a whitelist and a blacklist. Only one of
   them is allowed. Defining the parameter a second time will just
   overwrite the first one.

   WARNING: A tracing module must be loaded in order for this
   parameter to work. (for example proto_hep).

   Default value is none(not defined).

   Example 1.3. Set trace_destination parameter
...
## blacklist ps and which mi commands
## all the other commands shall be traced
modparam("mi_xmlrpc_ng", "trace_bwlist", "b: ps, which")
...
## allow only sip_trace mi command
## all the other commands will not be traced
modparam("mi_xmlrpc_ng", "trace_bwlist", "w: sip_trace")
...

1.4. Exported Functions

   No function exported to be used from configuration file.

1.5. Known issues

   Commands with large responses (like ul_dump) will fail if the
   configured size of the httpd buffer is to small (or if there
   isn't enough pkg memory configured).

   Future realeases of the httpd and mi_xmlrpc_ng modules will
   address this issue.

1.6. Example

   This is an example showing the xmlrpc format for the
   “get_statistics net: shmem:” MI commad: response.

   Example 1.4. XMLRPC request

POST /xmlrpc HTTP/1.0
Host: my.host.com
User-Agent: My xmlrpc UA
Content-Type: text/xml
Content-Length: 216

<?xml version='1.0'?>
<methodCall>
        <methodName>get_statistics</methodName>
        <params>
                <param>
                <value>
                <struct>
                <member>
                        <name>statistics</name>
                        <value>
                        <array>
                        <data>
                                <value><string>shmem:</string></value>
                                <value><string>core:</string></value>
                        </data>
                        </array>
                        </value>
                </member>
                </struct>
                </value>
                </param>
        </params>
</methodCall>


HTTP/1.0 200 OK
Content-Length: 236
Content-Type: text/xml; charset=utf-8
Date: Mon, 8 Mar 2013 12:00:00 GMT

<?xml version="1.0" encoding="UTF-8"?>.
<methodResponse>
<params><param>
<value><struct><member><name>net:waiting_udp</name><value><string>0</str
ing></value></member><member><name>net:waiting_tcp</name><value><string>
0</string></value></member><member><name>net:waiting_tls</name><value><s
tring>0</string></value></member><member><name>shmem:total_size</name><v
alue><string>268435456</string></value></member><member><name>shmem:used
_size</name><value><string>40032</string></value></member><member><name>
shmem:real_used_size</name><value><string>277112</string></value></membe
r><member><name>shmem:max_used_size</name><value><string>277112</string>
</value></member><member><name>shmem:free_size</name><value><string>2681
58344</string></value></member><member><name>shmem:fragments</name><valu
e><string>194</string></value></member></struct></value></param></params
>
</methodResponse>.


Chapter 2. Contributors

2.1. By Commit Statistics

   Table 2.1. Top contributors by DevScore^(1), authored
   commits^(2) and lines added/removed^(3)
     Name DevScore Commits Lines ++ Lines --
   1. Ovidiu Sas (@ovidiusas) 29 15 1375 101
   2. Vlad Patrascu (@rvlad-patrascu) 25 3 614 1041
   3. Ionut Ionita (@ionutrazvanionita) 15 9 383 68
   4. Razvan Crainea (@razvancrainea) 14 12 49 33
   5. Liviu Chircu (@liviuchircu) 13 11 44 52
   6. Bogdan-Andrei Iancu (@bogdan-iancu) 12 9 126 55
   7. Ionel Cerghit (@ionel-cerghit) 11 3 515 166
   8. Vlad Paiu (@vladpaiu) 3 2 0 6
   9. Peter Lemenkov (@lemenkov) 3 1 1 1
   10. Zero King (@l2dy) 3 1 1 1

   (1) DevScore = author_commits + author_lines_added /
   (project_lines_added / project_commits) + author_lines_deleted
   / (project_lines_deleted / project_commits)

   (2) including any documentation-related commits, excluding
   merge commits. Regarding imported patches/code, we do our best
   to count the work on behalf of the proper owner, as per the
   "fix_authors" and "mod_renames" arrays in
   opensips/doc/build-contrib.sh. If you identify any
   patches/commits which do not get properly attributed to you,
   please submit a pull request which extends "fix_authors" and/or
   "mod_renames".

   (3) ignoring whitespace edits, renamed files and auto-generated
   files

2.2. By Commit Activity

   Table 2.2. Most recently active contributors^(1) to this module
                      Name                   Commit Activity
   1.  Zero King (@l2dy)                   Mar 2020 - Mar 2020
   2.  Razvan Crainea (@razvancrainea)     Nov 2014 - Sep 2019
   3.  Bogdan-Andrei Iancu (@bogdan-iancu) Oct 2014 - Apr 2019
   4.  Vlad Patrascu (@rvlad-patrascu)     May 2017 - Jan 2019
   5.  Liviu Chircu (@liviuchircu)         Jul 2014 - Nov 2018
   6.  Peter Lemenkov (@lemenkov)          Jun 2018 - Jun 2018
   7.  Ionut Ionita (@ionutrazvanionita)   May 2016 - Feb 2017
   8.  Vlad Paiu (@vladpaiu)               Mar 2014 - Jan 2016
   9.  Ionel Cerghit (@ionel-cerghit)      Aug 2015 - Aug 2015
   10. Ovidiu Sas (@ovidiusas)             Mar 2013 - Jun 2015

   (1) including any documentation-related commits, excluding
   merge commits

Chapter 3. Documentation

3.1. Contributors

   Last edited by: Vlad Patrascu (@rvlad-patrascu), Peter Lemenkov
   (@lemenkov), Liviu Chircu (@liviuchircu), Ionut Ionita
   (@ionutrazvanionita), Bogdan-Andrei Iancu (@bogdan-iancu),
   Ionel Cerghit (@ionel-cerghit), Ovidiu Sas (@ovidiusas).

   Documentation Copyrights:

   Copyright © 2013 VoIP Embedded, Inc.
