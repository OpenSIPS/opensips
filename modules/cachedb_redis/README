cachedb_redis Module

Vladut-Stefan Paiu

   OpenSIPS Solutions

Edited by

Vladut-Stefan Paiu

   Copyright © 2011 www.opensips-solutions.com
     __________________________________________________________

   Table of Contents

   1. Admin Guide

        1.1. Overview
        1.2. Advantages
        1.3. Limitations
        1.4. Dependencies

              1.4.1. OpenSIPS Modules
              1.4.2. External Libraries or Applications

        1.5. Exported Parameters

              1.5.1. cachedb_url (string)
              1.5.2. connect_timeout (integer)
              1.5.3. query_timeout (integer)

        1.6. Exported Functions
        1.7. Raw Query Syntax

   List of Examples

   1.1. Set cachedb_url parameter
   1.2. Use Redis servers
   1.3. Set connect_timeout parameter
   1.4. Set connect_timeout parameter
   1.5. Redis Raw Query Examples

Chapter 1. Admin Guide

1.1. Overview

   This module is an implementation of a cache system designed to
   work with a Redis server. It uses hiredis client library to
   connect to either a single Redis server instance, or to a Redis
   Server inside a Redis Cluster. It uses the Key-Value interface
   exported from the core.

1.2. Advantages

     * memory costs are no longer on the server
     * many servers can be used inside a cluster, so the memory is
       virtually unlimited
     * the cache is 100% persistent. A restart of OpenSIPS server
       will not affect the DB. The Redis DB is also persistent so
       it can also be restarted without loss of information.
     * redis is an open-source project so it can be used to
       exchange data with various other applications
     * By creating a Redis Cluster, multiple OpenSIPS instances
       can easily share key-value information

1.3. Limitations

     * keys (in key:value pairs) may not contain spaces or control
       characters

1.4. Dependencies

1.4.1. OpenSIPS Modules

   None.

1.4.2. External Libraries or Applications

   The following libraries or applications must be installed
   before running OpenSIPS with this module loaded:
     * hiredis:
       On the latest Debian based distributions, hiredis can be
       installed by running 'apt-get install libhiredis-dev'
       Alternatively, if hiredis is not available on your OS
       repos, hiredis can be downloaded from:
       https://github.com/antirez/hiredis . Download the archive,
       extract sources, run make,sudo make install.

1.5. Exported Parameters

1.5.1. cachedb_url (string)

   The urls of the server groups that OpenSIPS will connect to in
   order to use the from script cache_store,cache_fetch, etc
   operations. It can be set more than one time. The prefix part
   of the URL will be the identifier that will be used from the
   script.

   Example 1.1. Set cachedb_url parameter
...
modparam("cachedb_redis", "cachedb_url","redis:group1://localhost:6379/"
)
modparam("cachedb_redis", "cachedb_url","redis:cluster1://random_url:888
8/")
...

   Example 1.2. Use Redis servers
...
cache_store("redis:group1","key","$ru value");
cache_fetch("redis:cluster1","key",$avp(10));
cache_remove("redis:cluster1","key");
...

1.5.2. connect_timeout (integer)

   This parameter specifies how many milliseconds OpenSIPS should
   wait for connecting to a Redis node.
   Default value is “5000 ms”.

   Example 1.3. Set connect_timeout parameter
...
# wait 1 seconds for Redis to connect
modparam("cachedb_redis", "connect_timeout",1000)
...

1.5.3. query_timeout (integer)

   This parameter specifies how many milliseconds OpenSIPS should
   wait for a query response from a Redis node.
   Default value is “5000 ms”.

   Example 1.4. Set connect_timeout parameter
...
# wait 1 seconds for Redis queries
modparam("cachedb_redis", "query_timeout",1000)
...

1.6. Exported Functions

   The module does not export functions to be used in
   configuration script.

1.7. Raw Query Syntax

   The cachedb_redis module allows to run RAW queries, thus taking
   full advantage of the capabilities of the back-end. The query
   syntax is the typical REDIS one.

   Here are a couple examples of running some Redis queries :

   Example 1.5. Redis Raw Query Examples
...
        $var(my_hash) = "my_hash_name";
        $var(my_key) = "my_key_name";
        $var(my_value) = "my_key_value";
        cache_raw_query("redis","HSET $var(my_hash) $var(my_key) $var(my
_value)");
        cache_raw_query("redis","HGET $var(my_hash) $var(my_key)","$avp(
result)");
        xlog("We have fetched $avp(result) \n");
...
        $var(my_hash) = "my_hash_name";
        $var(my_key1) = "my_key1_name";
        $var(my_key2) = "my_key2_name";
        $var(my_value1) = "my_key1_value";
        $var(my_value2) = "my_key2_value";
        cache_raw_query("redis","HSET $var(my_hash) $var(my_key1) $var(m
y_value1)");
        cache_raw_query("redis","HSET $var(my_hash) $var(my_key2) $var(m
y_value2)");
        cache_raw_query("redis","HGETALL $var(my_hash)","$avp(result)");

        $var(it) = 0;
        while ($(avp(result_final)[$var(it)]) != NULL) {
                xlog("Multiple key reply: - we have fetched $(avp(result
_final)[$var(it)]) \n");
                $var(it) = $var(it) + 1;
        }
...
