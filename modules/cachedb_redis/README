cachedb_redis Module
     __________________________________________________________

   Table of Contents

   1. Admin Guide

        1.1. Overview
        1.2. Advantages
        1.3. Limitations
        1.4. Dependencies

              1.4.1. OpenSIPS Modules
              1.4.2. External Libraries or Applications

        1.5. Exported Parameters

              1.5.1. cachedb_url (string)
              1.5.2. connect_timeout (integer)
              1.5.3. query_timeout (integer)
              1.5.4. shutdown_on_error (integer)
              1.5.5. use_tls (integer)

        1.6. Exported Functions
        1.7. Raw Query Syntax

   2. Contributors

        2.1. By Commit Statistics
        2.2. By Commit Activity

   3. Documentation

        3.1. Contributors

   4. Frequently Asked Questions

   List of Tables

   2.1. Top contributors by DevScore^(1), authored commits^(2) and
          lines added/removed^(3)

   2.2. Most recently active contributors^(1) to this module

   List of Examples

   1.1. Set cachedb_url parameter
   1.2. Use Redis servers
   1.3. Set connect_timeout parameter
   1.4. Set connect_timeout parameter
   1.5. Set the shutdown_on_error parameter
   1.6. Set the use_tls parameter
   1.7. Redis Raw Query Examples

Chapter 1. Admin Guide

1.1. Overview

   This module is an implementation of a cache system designed to
   work with a Redis server. It uses hiredis client library to
   connect to either a single Redis server instance, or to a Redis
   Server inside a Redis Cluster. It uses the Key-Value interface
   exported from the core.

1.2. Advantages

     * memory costs are no longer on the server
     * many servers can be used inside a cluster, so the memory is
       virtually unlimited
     * the cache is 100% persistent. A restart of OpenSIPS server
       will not affect the DB. The Redis DB is also persistent so
       it can also be restarted without loss of information.
     * redis is an open-source project so it can be used to
       exchange data with various other applications
     * By creating a Redis Cluster, multiple OpenSIPS instances
       can easily share key-value information

1.3. Limitations

     * keys (in key:value pairs) may not contain spaces or control
       characters

1.4. Dependencies

1.4.1. OpenSIPS Modules

   The following modules must be loaded before this module:
     * If a use_tls is defined, the tls_mgm module will need to be
       loaded as well.

1.4.2. External Libraries or Applications

   The following libraries or applications must be installed
   before running OpenSIPS with this module loaded:
     * hiredis:
       On the latest Debian based distributions, hiredis can be
       installed by running 'apt-get install libhiredis-dev'
       Alternatively, if hiredis is not available on your OS
       repos, hiredis can be downloaded from:
       https://github.com/antirez/hiredis . Download the archive,
       extract sources, run make,sudo make install.
       If TLS connections are enabled via the use_tls modparam,
       hiredis needs to be compiled with TLS support.

1.5. Exported Parameters

1.5.1. cachedb_url (string)

   The URLs of the server groups that OpenSIPS will connect to in
   order to use, from script, the cache_store(), cache_fetch(),
   etc. operations. It may be set more than once. The prefix part
   of the URL will be the identifier that will be used from the
   script.

   Example 1.1. Set cachedb_url parameter
...
# single-instance URLs (Redis Server or Redis Cluster)
modparam("cachedb_redis", "cachedb_url", "redis:group1://localhost:6379/
")
modparam("cachedb_redis", "cachedb_url", "redis:cluster1://random_url:88
88/")

# multi-instance URL (will perform circular failover on each query)
modparam("cachedb_redis", "cachedb_url",
        "redis:ha://localhost,host_a:6380,host_b:6381,host_c/")
...

   Example 1.2. Use Redis servers
...
cache_store("redis:group1", "key", "$ru value");
cache_fetch("redis:cluster1", "key", $avp(10));
cache_remove("redis:cluster1", "key");
...

1.5.2. connect_timeout (integer)

   This parameter specifies how many milliseconds OpenSIPS should
   wait for connecting to a Redis node.

   Default value is “5000 ms”.

   Example 1.3. Set connect_timeout parameter
...
# wait 1 seconds for Redis to connect
modparam("cachedb_redis", "connect_timeout",1000)
...

1.5.3. query_timeout (integer)

   This parameter specifies how many milliseconds OpenSIPS should
   wait for a query response from a Redis node.

   Default value is “5000 ms”.

   Example 1.4. Set connect_timeout parameter
...
# wait 1 seconds for Redis queries
modparam("cachedb_redis", "query_timeout",1000)
...

1.5.4. shutdown_on_error (integer)

   By setting this parameter to 1, OpenSIPS will abort startup if
   the initial connection to Redis is not possible. Runtime
   reconnect behavior is unaffected by this parameter, and is
   always enabled.

   Default value is “0” (disabled).

   Example 1.5. Set the shutdown_on_error parameter
...
# abort OpenSIPS startup if Redis is down
modparam("cachedb_redis", "shutdown_on_error", 1)
...

1.5.5. use_tls (integer)

   Setting this parameter will allow you to use TLS for Redis
   connections. In order to enable TLS for a specific connection,
   you can use the "tls_domain=dom_name" URL parameter in the
   cachedb_url of this module (or other modules that use the
   CacheDB interface). This should be placed at the end of the URL
   after the '?' character.

   When using this parameter, you must also ensure that tls_mgm is
   loaded and properly configured. Refer to the the module for
   additional info regarding TLS client domains.

   Note that TLS is supported by Redis starting with version 6.0.
   Also, it is an optional feature enabled at compile time and
   might not be included in the standard Redis packages available
   for your OS.

   Default value is 0 (not enabled)

   Example 1.6. Set the use_tls parameter
...
modparam("tls_mgm", "client_domain", "redis")
modparam("tls_mgm", "certificate", "[redis]/etc/pki/tls/certs/redis.pem"
)
modparam("tls_mgm", "private_key", "[redis]/etc/pki/tls/private/redis.ke
y")
modparam("tls_mgm", "ca_list",     "[redis]/etc/pki/tls/certs/ca.pem")
...
modparam("cachedb_redis", "use_tls", 1)
modparam("cachedb_redis", "cachedb_url","redis://localhost:6379/?tls_dom
ain=redis")
...

1.6. Exported Functions

   The module does not export functions to be used in
   configuration script.

1.7. Raw Query Syntax

   The cachedb_redis module allows to run RAW queries, thus taking
   full advantage of the capabilities of the back-end. The query
   syntax is the typical REDIS one.

   Here are a couple examples of running some Redis queries :

   Example 1.7. Redis Raw Query Examples
...
        $var(my_hash) = "my_hash_name";
        $var(my_key) = "my_key_name";
        $var(my_value) = "my_key_value";
        cache_raw_query("redis","HSET $var(my_hash) $var(my_key) $var(my
_value)");
        cache_raw_query("redis","HGET $var(my_hash) $var(my_key)","$avp(
result)");
        xlog("We have fetched $avp(result) \n");
...
        $var(my_hash) = "my_hash_name";
        $var(my_key1) = "my_key1_name";
        $var(my_key2) = "my_key2_name";
        $var(my_value1) = "my_key1_value";
        $var(my_value2) = "my_key2_value";
        cache_raw_query("redis","HSET $var(my_hash) $var(my_key1) $var(m
y_value1)");
        cache_raw_query("redis","HSET $var(my_hash) $var(my_key2) $var(m
y_value2)");
        cache_raw_query("redis","HGETALL $var(my_hash)","$avp(result)");

        $var(it) = 0;
        while ($(avp(result_final)[$var(it)]) != NULL) {
                xlog("Multiple key reply: - we have fetched $(avp(result
_final)[$var(it)]) \n");
                $var(it) = $var(it) + 1;
        }
...

Chapter 2. Contributors

2.1. By Commit Statistics

   Table 2.1. Top contributors by DevScore^(1), authored
   commits^(2) and lines added/removed^(3)
     Name DevScore Commits Lines ++ Lines --
   1. Vlad Paiu (@vladpaiu) 30 17 1428 43
   2. Liviu Chircu (@liviuchircu) 29 19 558 277
   3. Razvan Crainea (@razvancrainea) 16 13 130 35
   4. Vlad Patrascu (@rvlad-patrascu) 12 6 595 38
   5. Bogdan-Andrei Iancu (@bogdan-iancu) 7 5 7 5
   6. Maksym Sobolyev (@sobomax) 6 4 7 7
   7. jalung 4 1 144 61
   8. Dan Pascu (@danpascu) 3 1 15 15
   9. Ezequiel Lovelle 3 1 11 4
   10. John Burke (@john08burke) 3 1 6 1

   All remaining contributors: Julián Moreno Patiño, Peter
   Lemenkov (@lemenkov), zhengsh, Jarrod Baumann (@jarrodb),
   Kristian Høgh.

   (1) DevScore = author_commits + author_lines_added /
   (project_lines_added / project_commits) + author_lines_deleted
   / (project_lines_deleted / project_commits)

   (2) including any documentation-related commits, excluding
   merge commits. Regarding imported patches/code, we do our best
   to count the work on behalf of the proper owner, as per the
   "fix_authors" and "mod_renames" arrays in
   opensips/doc/build-contrib.sh. If you identify any
   patches/commits which do not get properly attributed to you,
   please submit a pull request which extends "fix_authors" and/or
   "mod_renames".

   (3) ignoring whitespace edits, renamed files and auto-generated
   files

2.2. By Commit Activity

   Table 2.2. Most recently active contributors^(1) to this module
                      Name                   Commit Activity
   1.  Liviu Chircu (@liviuchircu)         Mar 2014 - Oct 2023
   2.  zhengsh                             Aug 2023 - Aug 2023
   3.  Maksym Sobolyev (@sobomax)          Feb 2023 - Feb 2023
   4.  John Burke (@john08burke)           Apr 2022 - Apr 2022
   5.  Vlad Patrascu (@rvlad-patrascu)     May 2017 - Jan 2022
   6.  Bogdan-Andrei Iancu (@bogdan-iancu) Oct 2014 - Mar 2020
   7.  Razvan Crainea (@razvancrainea)     Feb 2012 - Sep 2019
   8.  Dan Pascu (@danpascu)               May 2019 - May 2019
   9.  Peter Lemenkov (@lemenkov)          Jun 2018 - Jun 2018
   10. Kristian Høgh                       Apr 2016 - Apr 2016

   All remaining contributors: Julián Moreno Patiño, Jarrod
   Baumann (@jarrodb), jalung, Vlad Paiu (@vladpaiu), Ezequiel
   Lovelle.

   (1) including any documentation-related commits, excluding
   merge commits

Chapter 3. Documentation

3.1. Contributors

   Last edited by: Liviu Chircu (@liviuchircu), Vlad Patrascu
   (@rvlad-patrascu), Peter Lemenkov (@lemenkov), Julián Moreno
   Patiño, Razvan Crainea (@razvancrainea), Vlad Paiu (@vladpaiu).

Chapter 4. Frequently Asked Questions

   4.1.

   My OpenSIPS is occasionally crashing in libhiredis, what to do?

   Make sure you've upgraded the Redis "libhiredis" client library
   to at least version 0.14.1. There was at least one significant
   vulnerability reported in library versions prior to that one
   (CVE-2020-7105), so upgrading to latest stable may very well
   fix the crash!

   Documentation Copyrights:

   Copyright © 2011 www.opensips-solutions.com
