usrloc Module

Jan Janak

   FhG FOKUS

Edited by

Jan Janak

Edited by

Bogdan-Andrei Iancu

Edited by

Ovidiu Sas

   Copyright © 2003 FhG FOKUS

   Copyright © 2005-2008 Voice Sistem SRL
   Revision History
   Revision $Revision: 8740 $ $Date$
     __________________________________________________________

   Table of Contents

   1. Admin Guide

        1.1. Overview

              1.1.1. Contact matching
              1.1.2. Contact replication

        1.2. Dependencies

              1.2.1. OpenSIPS Modules
              1.2.2. External Libraries or Applications

        1.3. Exported Parameters

              1.3.1. nat_bflag (string/integer)
              1.3.2. user_column (string)
              1.3.3. domain_column (string)
              1.3.4. contact_column (string)
              1.3.5. expires_column (string)
              1.3.6. q_column (string)
              1.3.7. callid_column (string)
              1.3.8. cseq_column (string)
              1.3.9. methods_column (string)
              1.3.10. flags_column (string)
              1.3.11. cflags_column (string)
              1.3.12. user_agent_column (string)
              1.3.13. received_column (string)
              1.3.14. socket_column (string)
              1.3.15. path_column (string)
              1.3.16. sip_instance_column (string)
              1.3.17. attr_column (string)
              1.3.18. use_domain (integer)
              1.3.19. desc_time_order (integer)
              1.3.20. timer_interval (integer)
              1.3.21. db_url (string)
              1.3.22. db_mode (integer)
              1.3.23. matching_mode (integer)
              1.3.24. cseq_delay (integer)
              1.3.25. accept_replicated_contacts (integer)
              1.3.26. replicate_contacts_to (integer)
              1.3.27. skip_replicated_db_ops (int)
              1.3.28. max_contact_delete (int)
              1.3.29. hash_size (integer)

        1.4. Exported Functions
        1.5. Exported MI Functions

              1.5.1. ul_rm
              1.5.2. ul_rm_contact
              1.5.3. ul_dump
              1.5.4. ul_flush
              1.5.5. ul_add
              1.5.6. ul_show_contact
              1.5.7. ul_sync

        1.6. Exported statistics

              1.6.1. users
              1.6.2. contacts
              1.6.3. expires
              1.6.4. registered_users

        1.7. Exported Events

              1.7.1. E_UL_AOR_INSERT
              1.7.2. E_UL_AOR_DELETE
              1.7.3. E_UL_CONTACT_INSERT
              1.7.4. E_UL_CONTACT_DELETE
              1.7.5. E_UL_CONTACT_UPDATE

   2. Developer Guide

        2.1. Available Functions

              2.1.1. ul_register_domain(name)
              2.1.2. ul_insert_urecord(domain, aor, rec,
                      is_replicated)

              2.1.3. ul_delete_urecord(domain, aor, is_replicated)

              2.1.4. ul_get_urecord(domain, aor)
              2.1.5. ul_lock_udomain(domain)
              2.1.6. ul_unlock_udomain(domain)
              2.1.7. ul_release_urecord(record, is_replicated)
              2.1.8. ul_insert_ucontact(record, contact,
                      contact_info, contact, is_replicated)

              2.1.9. ul_delete_ucontact (record, contact,
                      is_replicated)

              2.1.10. ul_delete_ucontact_from_id (domain,
                      contact_id)

              2.1.11. ul_get_ucontact(record, contact)
              2.1.12. ul_get_domain_ucontacts (domain, buf, len,
                      flags)

              2.1.13. ul_get_all_ucontacts (buf, len, flags)
              2.1.14. ul_update_ucontact(record, contact,
                      contact_info, is_replicated)

              2.1.15. ul_bind_ursloc( api )
              2.1.16. ul_register_ulcb(type ,callback, param)
              2.1.17. ul_get_num_users()

   List of Examples

   1.1. Set nat_bflag parameter
   1.2. Set user_column parameter
   1.3. Set user_column parameter
   1.4. Set contact_column parameter
   1.5. Set expires_column parameter
   1.6. Set q_column parameter
   1.7. Set callid_column parameter
   1.8. Set cseq_column parameter
   1.9. Set methods_column parameter
   1.10. Set flags_column parameter
   1.11. Set cflags_column parameter
   1.12. Set user_agent_column parameter
   1.13. Set received_column parameter
   1.14. Set socket_column parameter
   1.15. Set path_column parameter
   1.16. Set sip_instance_column parameter
   1.17. Set attr_column parameter
   1.18. Set use_domain parameter
   1.19. Set desc_time_order parameter
   1.20. Set timer_interval parameter
   1.21. Set db_url parameter
   1.22. Set db_mode parameter
   1.23. Set matching_mode parameter
   1.24. Set cseq_delay parameter
   1.25. Setting the accept_replicated_contacts parameter
   1.26. Setting the replicate_contacts_to parameter
   1.27. Setting the skip_replicated_db_ops parameter
   1.28. Setting the max_contact_delete parameter
   1.29. Set hash_size parameter

Chapter 1. Admin Guide

1.1. Overview

   User location module. The module keeps a user location table
   and provides access to the table to other modules. The module
   exports no functions that could be used directly from scripts.

1.1.1. Contact matching

   How the contacts are matched (for same AOR - Address of Record)
   is an important aspect of the usrloc modules, especialy in the
   context of NAT traversal - this raise mre problems since
   contacts from different phones of same users may overlap (if
   behind NATs with same configuration) or the re-register contact
   of same phone may be seen as a new one (due different binding
   via NAT).

   The SIP RFC 3261 publishes a matching algorithm based only on
   the contact string with callid and cseq number extra checking
   (if callid is the same, it must have a higher cseq number,
   otherwise invalid). But as argumented above, this is not enough
   in NAT traversal context, so the OpenSIPS implementation of
   contact machting offers more algorithms:
     * contact based only - strict RFC 3261 compliancy - the
       contact is matched as string and extra checked via callid
       and cseq (if callid is the same, it must have a higher cseq
       number, otherwise invalid).
     * contact and callid based - an extension of the first case -
       the contact and callid must match as strings; the cseq must
       be higher than the previous one - so be careful how you
       deal with REGISTER retransmissions in this case.

   For more details on how to control/select the contact matching
   algorithm, please see the module parameter matching_mode at
   Section 1.3.23, “matching_mode (integer)”.

1.1.2. Contact replication

   Starting from OpenSIPS 1.11, the usrloc module offers the
   possibility of performing real-time mirroring of the entire
   in-memory user location information of one OpenSIPS instance to
   one or more other instances. This module-to-module
   communication is UDP-based, and it is done through the Binary
   Interface.

   Advantages of replicating user-location data using this feature
   instead of sending duplicated SIP REGISTER requests:
     * no message parsing required
     * reduced bandwith usage
     * no additional script logic needed

   In order to control the DB operations performed by the
   receiving instance(s), the skip_replicated_db_ops parameter can
   be set. To summarise, the replication logic works together with
   the DB modes as follows:
     * 0 (No DB) - only in-memory data is replicated (no DB
       operations are performed at all)
     * 1 (Write through) and 2 (Write back) - default behaviour on
       all instances, skip_replicated_db_ops can be set on the
       receiving ones
     * 3 (DB only) - data replication is OFF

   Configuring both receival and sending of usrloc replication
   packets is trivial and can be done by using the
   accept_replicated_contacts and replicate_contacts_to parameters
   of the module.

1.2. Dependencies

1.2.1. OpenSIPS Modules

   The following modules must be loaded before this module:
     * Optionally an SQL database module.
     * clusterer, if replicate_contacts_to parameters is turned on
       (contact replication via clusterer module).

1.2.2. External Libraries or Applications

   The following libraries or applications must be installed
   before running OpenSIPS with this module loaded:
     * None.

1.3. Exported Parameters

1.3.1. nat_bflag (string/integer)

   The name of the branch flag to be used as NAT marker (if the
   contact is or not natted). This is a branch flag and it will be
   imported and used by all other modules depending of usrloc
   module.

   WARNING: Setting INT flags is deprecated! Use quoted strings
   instead! Default value is “NULL” (not set).

   Example 1.1. Set nat_bflag parameter
...
modparam("usrloc", "nat_bflag", "NAT_BFLAG")
...

1.3.2. user_column (string)

   Name of column containing usernames.

   Default value is “username”.

   Example 1.2. Set user_column parameter
...
modparam("usrloc", "user_column", "username")
...

1.3.3. domain_column (string)

   Name of column containing domains.

   Default value is “domain”.

   Example 1.3. Set user_column parameter
...
modparam("usrloc", "domain_column", "domain")
...

1.3.4. contact_column (string)

   Name of column containing contacts.

   Default value is “contact”.

   Example 1.4. Set contact_column parameter
...
modparam("usrloc", "contact_column", "contact")
...

1.3.5. expires_column (string)

   Name of column containing expires value.

   Default value is “expires”.

   Example 1.5. Set expires_column parameter
...
modparam("usrloc", "expires_column", "expires")
...

1.3.6. q_column (string)

   Name of column containing q values.

   Default value is “q”.

   Example 1.6. Set q_column parameter
...
modparam("usrloc", "q_column", "q")
...

1.3.7. callid_column (string)

   Name of column containing callid values.

   Default value is “callid”.

   Example 1.7. Set callid_column parameter
...
modparam("usrloc", "callid_column", "callid")
...

1.3.8. cseq_column (string)

   Name of column containing cseq numbers.

   Default value is “cseq”.

   Example 1.8. Set cseq_column parameter
...
modparam("usrloc", "cseq_column", "cseq")
...

1.3.9. methods_column (string)

   Name of column containing supported methods.

   Default value is “methods”.

   Example 1.9. Set methods_column parameter
...
modparam("usrloc", "methods_column", "methods")
...

1.3.10. flags_column (string)

   Name of column to save the internal flags of the record.

   Default value is “flags”.

   Example 1.10. Set flags_column parameter
...
modparam("usrloc", "flags_column", "flags")
...

1.3.11. cflags_column (string)

   Name of column to save the branch/contact flags of the record.

   Default value is “cflags”.

   Example 1.11. Set cflags_column parameter
...
modparam("usrloc", "cflags_column", "cflags")
...

1.3.12. user_agent_column (string)

   Name of column containing user-agent values.

   Default value is “user_agent”.

   Example 1.12. Set user_agent_column parameter
...
modparam("usrloc", "user_agent_column", "user_agent")
...

1.3.13. received_column (string)

   Name of column containing the source IP, port, and protocol
   from the REGISTER message.

   Default value is “received”.

   Example 1.13. Set received_column parameter
...
modparam("usrloc", "received_column", "received")
...

1.3.14. socket_column (string)

   Name of column containing the received socket information
   (IP:port) for the REGISTER message.

   Default value is “socket”.

   Example 1.14. Set socket_column parameter
...
modparam("usrloc", "socket_column", "socket")
...

1.3.15. path_column (string)

   Name of column containing the Path header.

   Default value is “path”.

   Example 1.15. Set path_column parameter
...
modparam("usrloc", "path_column", "path")
...

1.3.16. sip_instance_column (string)

   Name of column containing the SIP instance.

   Default value is “NULL”.

   Example 1.16. Set sip_instance_column parameter
...
modparam("usrloc", "sip_instance_column", "sip_instance")
...

1.3.17. attr_column (string)

   Name of column containing additional registration-related
   information.

   Default value is “NULL”.

   Example 1.17. Set attr_column parameter
...
modparam("usrloc", "attr_column", "attr")
...

1.3.18. use_domain (integer)

   If the domain part of the user should be also saved and used
   for identifing the user (along with the username part). Useful
   in multi domain scenarios. Non 0 value means true.

   Default value is “0 (false)”.

   Example 1.18. Set use_domain parameter
...
modparam("usrloc", "use_domain", 1)
...

1.3.19. desc_time_order (integer)

   If the user's contacts should be kept timestamp ordered;
   otherwise the contact will be ordered based on q value. Non 0
   value means true.

   Default value is “0 (false)”.

   Example 1.19. Set desc_time_order parameter
...
modparam("usrloc", "desc_time_order", 1)
...

1.3.20. timer_interval (integer)

   Number of seconds between two timer runs. The module uses timer
   to delete expired contacts, synchronize with database and other
   tasks, that need to be run periodically.

   Default value is 60.

   Example 1.20. Set timer_interval parameter
...
modparam("usrloc", "timer_interval", 120)
...

1.3.21. db_url (string)

   URL of the database that should be used.

   Default value is
   “mysql://opensips:opensipsrw@localhost/opensips”.

   Example 1.21. Set db_url parameter
...
modparam("usrloc", "db_url", "dbdriver://username:password@dbhost/dbname
")
...

1.3.22. db_mode (integer)

   The usrloc module can utilize database for persistent contact
   storage. If you use database, your contacts will survive
   machine restarts or SW crashes. The disadvantage is that
   accessing database can be very time consuming. Therefore,
   usrloc module implements four database accessing modes:
     * 0 - This disables database completely. Only memory will be
       used. Contacts will not survive restart. Use this value if
       you need a really fast usrloc and contact persistence is
       not necessary or is provided by other means.
     * 1 - Write-Through scheme. All changes to usrloc are
       immediately reflected in database too. This is very slow,
       but very reliable. Use this scheme if speed is not your
       priority but need to make sure that no registered contacts
       will be lost during crash or reboot.
     * 2 - Write-Back scheme. This is a combination of previous
       two schemes. All changes are made to memory and database
       synchronization is done in the timer. The timer deletes all
       expired contacts and flushes all modified or new contacts
       to database. Use this scheme if you encounter high-load
       peaks and want them to process as fast as possible. The
       mode will not help at all if the load is high all the time.
       Also, latency of this mode is much lower than latency of
       mode 1, but slightly higher than latency of mode 0.
     * 3 - DB-Only scheme. No memory cache is kept, all operations
       being directly performed with the database. The timer
       deletes all expired contacts from database - cleans after
       clients that didn't un-register or re-register. The mode is
       useful if you configure more servers sharing the same DB
       without any replication at SIP level. The mode may be
       slower due the high number of DB operation. For example NAT
       pinging is a killer since during each ping cycle all nated
       contact are loaded from the DB; The lack of memory caching
       also disable the statistics exports.

Warning

   In case of crash or restart contacts that are in memory only
   and haven't been flushed yet will get lost. If you want
   minimize the risk, use shorter timer interval.

   Default value is 0.

   Example 1.22. Set db_mode parameter
...
modparam("usrloc", "db_mode", 2)
...

1.3.23. matching_mode (integer)

   What contact matching algorithm to be used. Refer to section
   Section 1.1.1, “Contact matching” for the description of the
   algorithms.

   The parameter may take the following values:
     * 0 - CONTACT ONLY based matching algorithm.
     * 1 - CONTACT and CALLID based matching algorithm.

   Default value is 0 (CONTACT_ONLY).

   Example 1.23. Set matching_mode parameter
...
modparam("usrloc", "matching_mode", 1)
...

1.3.24. cseq_delay (integer)

   Delay (in seconds) for accepting as retransmissions register
   requests with same Call-ID and Cseq. The delay is calculated
   starting from the receiving time of the first register with
   that Call-ID and Cseq.

   Retransmissions within this delay interval will be accepted and
   replied as the original request, but no update will be done in
   location. If the delay is exceeded, error is reported.

   A value of 0 disable the retransmission detection.

   Default value is “20 seconds”.

   Example 1.24. Set cseq_delay parameter
...
modparam("usrloc", "cseq_delay", 5)
...

1.3.25. accept_replicated_contacts (integer)

   Set this to a valid cluster id in order to accept and process
   user-location related information received from other OpenSIPS
   instances, that belong to the specified cluster id, through the
   Binary Interface.

   Default value is “0” (no cluster id specified) - Binary
   Interface listeners (if any) will simply ignore any
   usrloc-related packets

   More details on the user location replication mechanism are
   available in Section 1.1.2, “Contact replication”

   Example 1.25. Setting the accept_replicated_contacts parameter
...
modparam("usrloc", "accept_replicated_contacts", 1)
...

1.3.26. replicate_contacts_to (integer)

   Defines the OpenSIPS instances that belong to a ceratin cluster
   which will receive all the user-location related information
   from this machine (addresses-of-record, contacts), organized
   into specific events (inserts, deletes or updates)

   Default value is 0 (no cluster id specified)

   More details on the user location replication mechanism are
   available in Section 1.1.2, “Contact replication”

   Example 1.26. Setting the replicate_contacts_to parameter
...
modparam("usrloc", "replicate_contacts_to", 1)
...

1.3.27. skip_replicated_db_ops (int)

   Prevent OpenSIPS from performing any DB-related contact
   operations when events are received over the Binary Interface.
   This is commonly used to prevent unneeded duplicate operations.

   Default value is "0" (upon receival of usrloc-related Binary
   Interface events, DB queries may be freely performed)

   More details on the user location replication mechanism are
   available in Section 1.1.2, “Contact replication”

   Example 1.27. Setting the skip_replicated_db_ops parameter
...
modparam("usrloc", "skip_replicated_db_ops", 1)
...

1.3.28. max_contact_delete (int)

   Relevant only in WRITE_THROUGH or WRITE_BACK schemes. The
   maximum number of contacts to be deleted from the database at
   once. Will delete all of them, if fewer after passing through
   all the contacts.

   Default value is "10"

   Example 1.28. Setting the max_contact_delete parameter
...
modparam("usrloc", "max_contact_delete", 10)
...

1.3.29. hash_size (integer)

   The number of entries of the hash table used by usrloc to store
   the location records is 2^hash_size. For hash_size=4, the
   number of entries of the hash table is 16. Since version 2.2,
   the maximu size of this parameter is 16, meaning that the hash
   supports maximum 65536 entries.

   Default value is “9”.

   Example 1.29. Set hash_size parameter
...
modparam("usrloc", "hash_size", 10)
...

1.4. Exported Functions

   There are no exported functions that could be used in scripts.

1.5. Exported MI Functions

1.5.1.  ul_rm

   Deletes an entire AOR record (including its contacts).

   Parameters:
     * table name - table where the AOR is removed from (Ex:
       location).
     * AOR - user AOR in username[@domain] format (domain must be
       supplied only if use_domain option is on).

1.5.2.  ul_rm_contact

   Deletes a contact from an AOR record.

   Parameters:
     * table name - table where the AOR is removed from (Ex:
       location).
     * AOR - user AOR in username[@domain] format (domain must be
       supplied only if use_domain option is on).
     * contact - exact contact to be removed

1.5.3.  ul_dump

   Dumps the entire content of the USRLOC in memory cache

   Parameters:
     * brief - (optional, may not be present); if equals to string
       “brief”, a brief dump will be done (only AOR and contacts,
       with no other details)

1.5.4.  ul_flush

   Triggers the flush of USRLOC memory cache into DB.

1.5.5.  ul_add

   Adds a new contact for an user AOR.

   Parameters:
     * table name - table where the contact will be added (Ex:
       location).
     * AOR - user AOR in username[@domain] format (domain must be
       supplied only if use_domain option is on).
     * contact - contact string to be added
     * expires - expires value of the contact
     * Q - Q value of the contact
     * unused - unused attribute (kept for backword compatibility)
     * flags - internal USRLOC flags of the contact
     * cflags - per branch flags of the contact
     * methods - mask with supported requests of the contact

1.5.6.  ul_show_contact

   Dumps the contacts of an user AOR.

   Parameters:
     * table name - table where the AOR resides (Ex: location).
     * AOR - user AOR in username[@domain] format (domain must be
       supplied only if use_domain option is on).

1.5.7.  ul_sync

   Synchronizes the contacts from memory with the ones from
   database. Note that this can not be used when no database is
   specified or with the DB-Only scheme. Important: make sure that
   all your contacts are in memory (ul_dump MI function) before
   executing this command. If the AOR is not specified, the whole
   table will be synchronized.

   Parameters:
     * table name - table where the AOR resides (Ex: location).
     * AOR (optional) - user AOR in username[@domain] format
       (domain must be supplied only if use_domain option is on).

1.6. Exported statistics

   Exported statistics are listed in the next sections.

1.6.1. users

   Number of AOR existing in the USRLOC memory cache for that
   domain - can not be resetted; this statistic will be register
   for each used domain (Ex: location).

1.6.2. contacts

   Number of contacts existing in the USRLOC memory cache for that
   domain - can not be resetted; this statistic will be register
   for each used domain (Ex: location).

1.6.3. expires

   Total number of expired contacts for that domain - can be
   resetted; this statistic will be register for each used domain
   (Ex: location).

1.6.4. registered_users

   Total number of AOR existing in the USRLOC memory cache for all
   domains - can not be resetted.

1.7. Exported Events

1.7.1.  E_UL_AOR_INSERT

   This event is raised when a new AOR is inserted in the USRLOC
   memory cache.

   Parameters:
     * aor - The AOR of the inserted record.

1.7.2.  E_UL_AOR_DELETE

   This event is raised when a new AOR is deleted from the USRLOC
   memory cache.

   Parameters:
     * aor - The AOR of the deleted record.

1.7.3.  E_UL_CONTACT_INSERT

   This event is raised when a new contact is inserted in any of
   the existing AOR's contact list. For each new contact, if its
   AOR does not exist in the memory, then both the E_UL_AOR_CREATE
   and E_UL_CONTACT_INSERT events will be raised.

   Parameters:
     * aor - The AOR of the inserted contact.
     * address - The binding address of the inserted contact.
     * callid - The Call-ID header of the registration message.
     * received - IP, port and protocol the registration message
       was received from. If these have the same value as the
       contact's address (see the address parameter) then the
       received parameter will be an empty string.
     * cseq - The cseq number as an int value.

1.7.4.  E_UL_CONTACT_DELETE

   This event is raised when a contact is deleted from an existing
   AOR's contact list. If the contact is the only one in the list
   then both the E_UL_AOR_DELETE and E_UL_CONTACT_DELETE events
   will be raised.

   Parameters:
     * aor - The AOR of the deleted contact.
     * address - The binding address of the deleted contact.
     * callid - The Call-ID header of the registration message.
     * received - IP, port and protocol the registration message
       was received from. If these have the same value as the
       contact's address (see the address parameter) then the
       received parameter will be an empty string.
     * cseq - The cseq number as an int value.

1.7.5.  E_UL_CONTACT_UPDATE

   This event is raised when a contact's info is updated by
   receiving another registration message.

   Parameters:
     * aor - The AOR of the updated contact.
     * address - The binding address of the updated contact.
     * callid - The Call-ID header of the registration message.
     * received - IP, port and protocol the registration message
       was received from. If these have the same value as the
       contact's address (see the address parameter) then the
       received parameter will be an empty string.
     * cseq - The cseq number as an int value.

Chapter 2. Developer Guide

2.1. Available Functions

2.1.1.  ul_register_domain(name)

   The function registers a new domain. Domain is just another
   name for table used in registrar. The function is called from
   fixups in registrar. It gets name of the domain as a parameter
   and returns pointer to a new domain structure. The fixup than
   'fixes' the parameter in registrar so that it will pass the
   pointer instead of the name every time save() or lookup() is
   called. Some usrloc functions get the pointer as parameter when
   called. For more details see implementation of save function in
   registrar.

   Meaning of the parameters is as follows:
     * const char* name - Name of the domain (also called table)
       to be registered.

2.1.2.  ul_insert_urecord(domain, aor, rec, is_replicated)

   The function creates a new record structure and inserts it in
   the specified domain. The record is structure that contains all
   the contacts for belonging to the specified username.

   Meaning of the parameters is as follows:
     * udomain_t* domain - Pointer to domain returned by
       ul_register_udomain.
     * str* aor - Address of Record (aka username) of the new
       record (at this time the record will contain no contacts
       yet).
     * urecord_t** rec - The newly created record structure.
     * char is_replicated - Specifies whether this function will
       be called from the context of a Binary Interface callback.
       If uncertain, simply use 0.

2.1.3.  ul_delete_urecord(domain, aor, is_replicated)

   The function deletes all the contacts bound with the given
   Address Of Record.

   Meaning of the parameters is as follows:
     * udomain_t* domain - Pointer to domain returned by
       ul_register_udomain.
     * str* aor - Address of record (aka username) of the record,
       that should be deleted.
     * char is_replicated - Specifies whether this function will
       be called from the context of a Binary Interface callback.
       If uncertain, simply use 0.

2.1.4.  ul_get_urecord(domain, aor)

   The function returns pointer to record with given Address of
   Record.

   Meaning of the parameters is as follows:
     * udomain_t* domain - Pointer to domain returned by
       ul_register_udomain.

     * str* aor - Address of Record of request record.

2.1.5.  ul_lock_udomain(domain)

   The function lock the specified domain, it means, that no other
   processes will be able to access during the time. This prevents
   race conditions. Scope of the lock is the specified domain,
   that means, that multiple domain can be accessed
   simultaneously, they don't block each other.

   Meaning of the parameters is as follows:
     * udomain_t* domain - Domain to be locked.

2.1.6.  ul_unlock_udomain(domain)

   Unlock the specified domain previously locked by
   ul_lock_udomain.

   Meaning of the parameters is as follows:
     * udomain_t* domain - Domain to be unlocked.

2.1.7.  ul_release_urecord(record, is_replicated)

   Do some sanity checks - if all contacts have been removed,
   delete the entire record structure.

   Meaning of the parameters is as follows:
     * urecord_t* record - Record to be released.
     * char is_replicated - Specifies whether this function will
       be called from the context of a Binary Interface callback.
       If uncertain, simply use 0.

2.1.8.  ul_insert_ucontact(record, contact, contact_info, contact,
is_replicated)

   The function inserts a new contact in the given record with
   specified parameters.

   Meaning of the parameters is as follows:
     * urecord_t* record - Record in which the contact should be
       inserted.
     * str* contact - Contact URI.
     * ucontact_info_t* contact_info - Single structure containing
       the new contact information
     * char is_replicated - Specifies whether this function will
       be called from the context of a Binary Interface callback.
       If uncertain, simply use 0.

2.1.9.  ul_delete_ucontact (record, contact, is_replicated)

   The function deletes given contact from record.

   Meaning of the parameters is as follows:
     * urecord_t* record - Record from which the contact should be
       removed.

     * ucontact_t* contact - Contact to be deleted.
     * char is_replicated - Specifies whether this function will
       be called from the context of a Binary Interface callback.
       If uncertain, simply use 0.

2.1.10.  ul_delete_ucontact_from_id (domain, contact_id)

   The function deletes a contact with the given contact_id from
   the given domain.

   Meaning of the parameters is as follows:
     * udomain_t* domain - Domain where the contact can be found.

     * uint64_t contact_id - Contact_id identifying the contact to
       be deleted.

2.1.11.  ul_get_ucontact(record, contact)

   The function tries to find contact with given Contact URI and
   returns pointer to structure representing the contact.

   Meaning of the parameters is as follows:
     * urecord_t* record - Record to be searched for the contact.

     * str_t* contact - URI of the request contact.

2.1.12.  ul_get_domain_ucontacts (domain, buf, len, flags)

   The function retrieves all contacts of all registered users
   from the given doamin and returns them in the caller-supplied
   buffer. If the buffer is too small, the function returns
   positive value indicating how much additional space would be
   necessary to accommodate all of them. Please note that the
   positive return value should be used only as a “hint”, as there
   is no guarantee that during the time between two subsequent
   calls number of registered contacts will remain the same.

   If flag parameter is set to non-zero value then only contacts
   that have the specified flags set will be returned. It is, for
   example, possible to list only contacts that are behind NAT.

   Meaning of the parameters is as follows:
     * udomaint_t* domain - Domain from which to get the contacts

     * void* buf - Buffer for returning contacts.

     * int len - Length of the buffer.

     * unsigned int flags - Flags that must be set.

2.1.13.  ul_get_all_ucontacts (buf, len, flags)

   The function retrieves all contacts of all registered users and
   returns them in the caller-supplied buffer. If the buffer is
   too small, the function returns positive value indicating how
   much additional space would be necessary to accommodate all of
   them. Please note that the positive return value should be used
   only as a “hint”, as there is no guarantee that during the time
   between two subsequent calls number of registered contacts will
   remain the same.

   If flag parameter is set to non-zero value then only contacts
   that have the specified flags set will be returned. It is, for
   example, possible to list only contacts that are behind NAT.

   Meaning of the parameters is as follows:
     * void* buf - Buffer for returning contacts.

     * int len - Length of the buffer.

     * unsigned int flags - Flags that must be set.

2.1.14.  ul_update_ucontact(record, contact, contact_info,
is_replicated)

   The function updates contact with new values.

   Meaning of the parameters is as follows:
     * urecord_t* record - Record in which the contact should be
       inserted.
     * ucontact_t* contact - Contact URI.
     * ucontact_info_t* contact_info - Single structure containing
       the new contact information
     * char is_replicated - Specifies whether this function will
       be called from the context of a Binary Interface callback.
       If uncertain, simply use 0.

2.1.15.  ul_bind_ursloc( api )

   The function imports all functions that are exported by the
   USRLOC module. Overs for other modules which want to user the
   internal USRLOC API an easy way to load and access the
   functions.

   Meaning of the parameters is as follows:
     * usrloc_api_t* api - USRLOC API

2.1.16.  ul_register_ulcb(type ,callback, param)

   The function register with USRLOC a callback function to be
   called when some event occures inside USRLOC.

   Meaning of the parameters is as follows:
     * int types - type of event for which the callback should be
       called (see usrloc/ul_callback.h).
     * ul_cb f - callback function; see usrloc/ul_callback.h for
       prototype.
     * void *param - some parameter to be passed to the callback
       each time when it is called.

2.1.17.  ul_get_num_users()

   The function loops through all domains summing up the number of
   users.
