<!-- Module User's Guide -->

<chapter>

	<title>&adminguide;</title>

	<section>
	<title>Overview</title>
	<para>
		User location module. The module keeps a user location table and
		provides access to the table to other modules. The module exports no
		functions that could be used directly from scripts.
	</para>
		<section id="contact-matching-algs">
		<title>Contact matching</title>
		<para>
		How the contacts are matched (for same AOR - Address of Record) is an
		important aspect of the usrloc modules, especialy in the context of NAT
		traversal - this raise mre problems since contacts from different
		phones of same users may overlap (if behind NATs with same
		configuration) or the re-register contact of same phone may be
		seen as a new one (due different binding via NAT).
		</para>
		<para>
		The SIP RFC 3261 publishes a matching algorithm based only on the
		contact string with callid and cseq number extra checking (if callid
		is the same, it must have a higher cseq number, otherwise invalid).
		But as argumented above, this is not enough in NAT traversal context,
		so the &osips; implementation of contact machting offers more algorithms:
		</para>
		<itemizedlist>
			<listitem>
			<para>
				<emphasis>contact based only</emphasis> - strict RFC 3261
				compliancy - the contact is matched as string and extra checked
				via callid and cseq (if callid is the same, it must have a
				higher cseq number, otherwise invalid).
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>contact and callid based</emphasis> - an extension
				of the first case - the contact and callid must match as
				strings; the cseq must be higher than the previous one - so be
				careful how you deal with REGISTER retransmissions in this
				case.
			</para>
			</listitem>
		</itemizedlist>
		<para>
		For more details on how to control/select the contact matching algorithm,
		please see the module parameter matching_mode at
		<xref linkend="matching-mode"/>.
		</para>
		</section>

		<section id="usrloc-replication">
		<title>Contact replication</title>
		<para>
		Starting from &osips; 1.11, the <emphasis>usrloc</emphasis> module
		offers the possibility of performing real-time mirroring of the entire
		in-memory user location information of one &osips; instance to one or more
		other instances. This module-to-module communication is UDP-based, and
		it is done through the <emphasis>Binary Interface</emphasis>.
		</para>
		<para>
		Advantages of replicating user-location data using this feature
		instead of sending duplicated SIP REGISTER requests:
		<itemizedlist>
			<listitem>
				<para>
					no message parsing required
				</para>
			</listitem>
			<listitem>
				<para>
					reduced bandwith usage
				</para>
			</listitem>
			<listitem>
				<para>
					no additional script logic needed
				</para>
			</listitem>
		</itemizedlist>
		</para>
		<para>
		In order to control the DB operations performed by the receiving instance(s),
		the <emphasis role='bold'><xref linkend="skip_replicated_db_ops"/></emphasis>
		parameter can be set. To summarise, the replication logic works together
		with the DB modes as follows:
		<itemizedlist>
			<listitem>
				<para>
					<emphasis role='bold'>0 (No DB)</emphasis> - only in-memory
					data is replicated (no DB operations are performed at all)
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role='bold'>1 (Write through) and 2 (Write back)</emphasis>
					- default behaviour on all instances, <emphasis role='bold'><xref
						linkend="skip_replicated_db_ops"/></emphasis> can be set
					on the receiving ones
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role='bold'>3 (DB only)</emphasis> -
						data replication is <emphasis role='bold'>OFF</emphasis>
				</para>
			</listitem>
		</itemizedlist>
		</para>
		<para>
		Configuring both receival and sending of usrloc replication packets is
		trivial and can be done by using the
		<emphasis role='bold'><xref linkend="accept_replicated_contacts"/></emphasis> and
		<emphasis role='bold'><xref linkend="replicate_contacts_to"/></emphasis> parameters of the
		module.
		</para>
		</section>
	</section>

	<section>
	<title>Dependencies</title>
	<section>
		<title>&osips; Modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>Optionally an SQL database module</emphasis>.
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>clusterer, if <xref linkend="replicate_contacts_to"/>
				parameters is turned on (contact replication via clusterer 
				module)</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be installed before
		running &osips; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>None</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>
	<section>
	<title>Exported Parameters</title>
	<section>
		<title><varname>nat_bflag</varname> (string/integer)</title>
		<para>
		The name of the branch flag to be used as NAT marker (if the contact
		is or not natted). This is a branch flag and it will be imported and
		used by all other modules depending of usrloc module.
		</para>
		<para>
		<emphasis>WARNING: </emphasis>Setting INT flags is deprecated!
		Use quoted strings instead!
		<emphasis>
			Default value is <quote>NULL</quote> (not set).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>nat_bflag</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "nat_bflag", "NAT_BFLAG")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>user_column</varname> (string)</title>
		<para>
		Name of column containing usernames.
		</para>
		<para>
		<emphasis>
			Default value is <quote>username</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>user_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "user_column", "username")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>domain_column</varname> (string)</title>
		<para>
		Name of column containing domains.
		</para>
		<para>
		<emphasis>
			Default value is <quote>domain</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>user_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "domain_column", "domain")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>contact_column</varname> (string)</title>
		<para>
		Name of column containing contacts.
		</para>
		<para>
		<emphasis>
			Default value is <quote>contact</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>contact_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "contact_column", "contact")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>expires_column</varname> (string)</title>
		<para>
		Name of column containing expires value.
		</para>
		<para>
		<emphasis>
			Default value is <quote>expires</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>expires_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "expires_column", "expires")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>q_column</varname> (string)</title>
		<para>
		Name of column containing q values.
		</para>
		<para>
		<emphasis>
			Default value is <quote>q</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>q_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "q_column", "q")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>callid_column</varname> (string)</title>
		<para>
		Name of column containing callid values.
		</para>
		<para>
		<emphasis>
			Default value is <quote>callid</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>callid_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "callid_column", "callid")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>cseq_column</varname> (string)</title>
		<para>
		Name of column containing cseq numbers.
		</para>
		<para>
		<emphasis>
			Default value is <quote>cseq</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>cseq_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "cseq_column", "cseq")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>methods_column</varname> (string)</title>
		<para>
		Name of column containing supported methods.
		</para>
		<para>
		<emphasis>
			Default value is <quote>methods</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>methods_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "methods_column", "methods")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>flags_column</varname> (string)</title>
		<para>
		Name of column to save the internal flags of the record.
		</para>
		<para>
		<emphasis>
			Default value is <quote>flags</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>flags_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "flags_column", "flags")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>cflags_column</varname> (string)</title>
		<para>
		Name of column to save the branch/contact flags of the record.
		</para>
		<para>
		<emphasis>
			Default value is <quote>cflags</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>cflags_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "cflags_column", "cflags")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>user_agent_column</varname> (string)</title>
		<para>
		Name of column containing user-agent values.
		</para>
		<para>
		<emphasis>
			Default value is <quote>user_agent</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>user_agent_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "user_agent_column", "user_agent")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>received_column</varname> (string)</title>
		<para>
		Name of column containing the source IP, port, and protocol from the REGISTER
		message.
		</para>
		<para>
		<emphasis>
			Default value is <quote>received</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>received_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "received_column", "received")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>socket_column</varname> (string)</title>
		<para>
		Name of column containing the received socket information (IP:port)
		for the REGISTER message.
		</para>
		<para>
		<emphasis>
			Default value is <quote>socket</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>socket_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "socket_column", "socket")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>path_column</varname> (string)</title>
		<para>
		Name of column containing the Path header.
		</para>
		<para>
		<emphasis>
			Default value is <quote>path</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>path_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "path_column", "path")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>sip_instance_column</varname> (string)</title>
		<para>
		Name of column containing the SIP instance.
		</para>
		<para>
		<emphasis>
			Default value is <quote>NULL</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>sip_instance_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "sip_instance_column", "sip_instance")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>attr_column</varname> (string)</title>
		<para>
		Name of column containing additional registration-related information.
		</para>
		<para>
		<emphasis>
			Default value is <quote>NULL</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>attr_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "attr_column", "attr")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>use_domain</varname> (integer)</title>
		<para>
		If the domain part of the user should be also saved and used for
		identifing the user (along with the username part). Useful in
		multi domain scenarios. Non 0 value means true.
		</para>
		<para>
		<emphasis>
			Default value is <quote>0 (false)</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>use_domain</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "use_domain", 1)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>desc_time_order</varname> (integer)</title>
		<para>
		If the user's contacts should be kept timestamp ordered; otherwise the
		contact will be ordered based on q value.
		Non 0 value means true.
		</para>
		<para>
		<emphasis>
			Default value is <quote>0 (false)</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>desc_time_order</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "desc_time_order", 1)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>timer_interval</varname> (integer)</title>
		<para>
		Number of seconds between two timer runs. The module uses timer to
		delete expired contacts, synchronize with database and other tasks,
		that need to be run periodically.
		</para>
		<para>
		<emphasis>
			Default value is 60.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>timer_interval</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "timer_interval", 120)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>db_url</varname> (string)</title>
		<para>
		&url; of the database that should be used.
		</para>
		<para>
		<emphasis>
			Default value is <quote>&defaultdb;</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>db_url</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "db_url", "&exampledb;")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>db_mode</varname> (integer)</title>
		<para>
		The usrloc module can utilize database for persistent contact storage.
		If you use database, your contacts will survive machine restarts or
		SW crashes. The disadvantage is that accessing database can be very
		time consuming. Therefore, usrloc module implements four database
		accessing modes:
		</para>
		<itemizedlist>
		<listitem>
			<para>
			0 - This disables database completely. Only memory will be used.
			Contacts will not survive restart. Use this value if you need a
			really fast usrloc and contact persistence is not necessary or
			is provided by other means.
			</para>
		</listitem>
		<listitem>
			<para>
			1 - Write-Through scheme. All changes to usrloc are immediately
			reflected in database too. This is very slow, but very reliable.
			Use this scheme if speed is not your priority but need to make
			sure that no registered contacts will be lost during crash or
			reboot.
			</para>
		</listitem>
		<listitem>
			<para>
			2 - Write-Back scheme. This is a combination of previous two
			schemes. All changes are made to memory and database
			synchronization is done in the timer. The timer deletes all
			expired contacts and flushes all modified or new contacts to
			database.  Use this scheme if you encounter high-load peaks
			and want them to process as fast as possible. The mode will
			not help at all if the load is high all the time.  Also, latency
			of this mode is much lower than latency of mode 1, but slightly
			higher than latency of mode 0.
			</para>
		</listitem>
		<listitem>
			<para>
			3 - DB-Only scheme. No memory cache is kept, all operations being
			directly performed with the database. The timer deletes all
			expired contacts from database - cleans after clients that didn't
			un-register or re-register. The mode is useful if you configure
			more servers sharing the same DB without any replication at SIP
			level. The mode may be slower due the high number of DB operation.
			For example NAT pinging is a killer since during each ping cycle
			all nated contact are loaded from the DB; The lack of memory
			caching also disable the statistics exports.
			</para>
		</listitem>
		</itemizedlist>
		<warning>
		<para>
			In case of crash or restart contacts that are in memory only and
			haven't been flushed yet will get lost. If you want minimize the
			risk, use shorter timer interval.
		</para>
		</warning>
		<para>
		<emphasis>
			Default value is 0.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>db_mode</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "db_mode", 2)
...
</programlisting>
		</example>
	</section>

	<section id="matching-mode">
		<title><varname>matching_mode</varname> (integer)</title>
		<para>
		What contact matching algorithm to be used. Refer to section
		<xref linkend="contact-matching-algs"/> for the description of the
		algorithms.
		</para>
		<para>
		The parameter may take the following values:
		</para>
		<itemizedlist>
			<listitem>
				<para><emphasis>0</emphasis> - CONTACT ONLY based matching
				algorithm.
				</para>
			</listitem>
			<listitem>
				<para><emphasis>1</emphasis> - CONTACT and CALLID based
				matching algorithm.
				</para>
			</listitem>
		</itemizedlist>
		<para>
		<emphasis>
			Default value is <emphasis>0 (CONTACT_ONLY)</emphasis>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>matching_mode</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "matching_mode", 1)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>cseq_delay</varname> (integer)</title>
		<para>
		Delay (in seconds) for accepting as retransmissions register requests
		with same Call-ID and Cseq. The delay is calculated starting from the
		receiving time of the first register with that Call-ID and Cseq.
		</para>
		<para>
		Retransmissions within this delay interval will be accepted and replied
		as the original request, but no update will be done in location. If the
		delay is exceeded, error is reported.
		</para>
		<para>
		A value of 0 disable the retransmission detection.
		</para>
		<para>
		<emphasis>
			Default value is <quote>20 seconds</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>cseq_delay</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "cseq_delay", 5)
...
</programlisting>
		</example>
	</section>

	<section id='accept_replicated_contacts'
	         xreflabel="accept_replicated_contacts">
		<title><varname>accept_replicated_contacts</varname> (integer)</title>
		<para>
		Set this to a valid cluster id in order to accept and process
                user-location related information received from other &osips;
                instances, that belong to the specified cluster id, through the
                <emphasis role='bold'>Binary Interface</emphasis>.
		</para>
		<para>
		Default value is <quote>0</quote> (no cluster id specified) -
                Binary Interface listeners (if any) will simply ignore any usrloc-related packets
		</para>
		<para>
			More details on the user location replication mechanism are available in <xref linkend="usrloc-replication"/>
		</para>
		<example>
		<title>Setting the <varname>accept_replicated_contacts</varname>
			parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "accept_replicated_contacts", 1)
...
</programlisting>
		</example>
	</section>

	<section id='replicate_contacts_to'
	         xreflabel="replicate_contacts_to">
		<title><varname>replicate_contacts_to</varname> (integer)</title>
		<para>
		Defines the &osips; instances that belong to a ceratin cluster
                which will receive all the user-location related information from
                this machine (<emphasis>addresses-of-record</emphasis>, <emphasis>contacts</emphasis>),
		organized into specific events (inserts, deletes or updates)
		</para>
		<para>
		Default value is 0 (no cluster id specified)
		</para>
		<para>
			More details on the user location replication mechanism are available in <xref linkend="usrloc-replication"/>
		</para>
		<example>
		<title>Setting the <varname>replicate_contacts_to</varname>
			parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "replicate_contacts_to", 1)
...
</programlisting>
		</example>
	</section>

	<section id='skip_replicated_db_ops'
	         xreflabel="skip_replicated_db_ops">
		<title><varname>skip_replicated_db_ops</varname> (int)</title>
		<para>
		Prevent &osips; from performing any DB-related contact operations
		when events are received over the <emphasis>Binary Interface</emphasis>.
		This is commonly used to prevent unneeded duplicate operations.
		</para>
		<para>
		Default value is "0" (upon receival of usrloc-related Binary Interface
		events, DB queries may be freely performed)
		</para>
		<para>
		More details on the user location replication mechanism are available
		in <xref linkend="usrloc-replication"/>
		</para>
		<example>
		<title>Setting the <varname>skip_replicated_db_ops</varname>
			parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "skip_replicated_db_ops", 1)
...
</programlisting>
		</example>
	</section>

	<section id='max_contact_delete'
	         xreflabel="max_contact_delete">
		<title><varname>max_contact_delete</varname> (int)</title>
		<para>
			Relevant only in WRITE_THROUGH or WRITE_BACK schemes. The maximum
		number of contacts to be deleted from the database at once. Will delete
		all of them, if fewer after passing through all the contacts.
		</para>
		<para>
		Default value is "10"
		</para>
		<example>
		<title>Setting the <varname>max_contact_delete</varname>
			parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "max_contact_delete", 10)
...
</programlisting>
		</example>
	</section>


	<section>
		<title><varname>hash_size</varname> (integer)</title>
		<para>
		The number of entries of the hash table used by usrloc to store the
		location records is 2^hash_size. For hash_size=4, the number of entries
		of the hash table is 16. Since version 2.2, the maximu size of this
		parameter is 16, meaning that the hash supports maximum 65536 entries.
		</para>
		<para>
		<emphasis>
			Default value is <quote>9</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>hash_size</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("usrloc", "hash_size", 10)
...
</programlisting>
		</example>
	</section>

	</section>

	<section>
	<title>Exported Functions</title>
	<para>
		There are no exported functions that could be used in scripts.
	</para>
	</section>


	<section>
	<title>Exported MI Functions</title>

	<section>
		<title>
		<function moreinfo="none">ul_rm</function>
		</title>
		<para>
		Deletes an entire AOR record (including its contacts).
		</para>
		<para>Parameters: </para>
		<itemizedlist>
			<listitem><para>
				<emphasis>table name</emphasis> - table where the AOR
				is removed from (Ex: location).
			</para></listitem>
			<listitem><para>
				<emphasis>AOR</emphasis> - user AOR in username[@domain]
				format (domain must be supplied only if use_domain option
				is on).
			</para></listitem>
		</itemizedlist>
	</section>

	<section>
		<title>
		<function moreinfo="none">ul_rm_contact</function>
		</title>
		<para>
		Deletes a contact from an AOR record.
		</para>
		<para>Parameters: </para>
		<itemizedlist>
			<listitem><para>
				<emphasis>table name</emphasis> - table where the AOR
				is removed from (Ex: location).
			</para></listitem>
			<listitem><para>
				<emphasis>AOR</emphasis> - user AOR in username[@domain]
				format (domain must be supplied only if use_domain option
				is on).
			</para></listitem>
			<listitem><para>
				<emphasis>contact</emphasis> - exact contact to be removed
			</para></listitem>
		</itemizedlist>
	</section>

	<section>
		<title>
		<function moreinfo="none">ul_dump</function>
		</title>
		<para>
		Dumps the entire content of the USRLOC in memory cache
		</para>
		<para>Parameters: </para>
		<itemizedlist>
			<listitem><para>
				<emphasis>brief</emphasis> - (optional, may not be present); if
				equals to string <quote>brief</quote>, a brief dump will be
				done (only AOR and contacts, with no other details)
			</para></listitem>
		</itemizedlist>
	</section>

	<section>
		<title>
		<function moreinfo="none">ul_flush</function>
		</title>
		<para>
		Triggers the flush of USRLOC memory cache into DB.
		</para>
	</section>

	<section>
		<title>
		<function moreinfo="none">ul_add</function>
		</title>
		<para>
		Adds a new contact for an user AOR.
		</para>
		<para>Parameters: </para>
		<itemizedlist>
			<listitem><para>
				<emphasis>table name</emphasis> - table where the contact
				will be added (Ex: location).
			</para></listitem>
			<listitem><para>
				<emphasis>AOR</emphasis> - user AOR in username[@domain]
				format (domain must be supplied only if use_domain option
				is on).
			</para></listitem>
			<listitem><para>
				<emphasis>contact</emphasis> - contact string to be added
			</para></listitem>
			<listitem><para>
				<emphasis>expires</emphasis> - expires value of the contact
			</para></listitem>
			<listitem><para>
				<emphasis>Q</emphasis> - Q value of the contact
			</para></listitem>
			<listitem><para>
				<emphasis>unused</emphasis> - unused attribute (kept for
				backword compatibility)
			</para></listitem>
			<listitem><para>
				<emphasis>flags</emphasis> - internal USRLOC flags of the
				contact
			</para></listitem>
			<listitem><para>
				<emphasis>cflags</emphasis> - per branch flags of the
				contact
			</para></listitem>
			<listitem><para>
				<emphasis>methods</emphasis> - mask with supported requests
				of the contact
			</para></listitem>
		</itemizedlist>
	</section>

	<section>
		<title>
		<function moreinfo="none">ul_show_contact</function>
		</title>
		<para>
		Dumps the contacts of an user AOR.
		</para>
		<para>Parameters: </para>
		<itemizedlist>
			<listitem><para>
				<emphasis>table name</emphasis> - table where the AOR
				resides (Ex: location).
			</para></listitem>
			<listitem><para>
				<emphasis>AOR</emphasis> - user AOR in username[@domain]
				format (domain must be supplied only if use_domain option
				is on).
			</para></listitem>
		</itemizedlist>
	</section>

	<section>
		<title>
		<function moreinfo="none">ul_sync</function>
		</title>
		<para>
		Synchronizes the contacts from memory with the ones from database.
		Note that this can not be used when no database is specified or with the
		DB-Only scheme.

		Important: make sure that all your contacts are in memory
		(<emphasis>ul_dump</emphasis> MI function) before executing this
		command. If the AOR is not specified, the whole table will be
		synchronized.
		</para>
		<para>Parameters: </para>
		<itemizedlist>
			<listitem><para>
				<emphasis>table name</emphasis> - table where the AOR
				resides (Ex: location).
			</para></listitem>
			<listitem><para>
				<emphasis>AOR (optional)</emphasis> - user AOR in username[@domain]
				format (domain must be supplied only if use_domain option
				is on).
			</para></listitem>
		</itemizedlist>
	</section>

	</section>


	<section>
		<title>Exported statistics</title>
		<para>
		Exported statistics are listed in the next sections.
		</para>
		<section>
		<title>users</title>
			<para>
			Number of AOR existing in the USRLOC memory cache for that domain
			- can not be resetted; this statistic will be register for each
			used domain (Ex: location).
			</para>
		</section>
		<section>
		<title>contacts</title>
			<para>
			Number of contacts existing in the USRLOC memory cache for that
			domain - can not be resetted; this statistic will be register for
			each used domain (Ex: location).
			</para>
		</section>
		<section>
		<title>expires</title>
			<para>
			Total number of expired contacts for that domain - can be resetted;
			 this statistic will be register for each used domain
			(Ex: location).
			</para>
		</section>
		<section>
		<title>registered_users</title>
			<para>
			Total number of AOR existing in the USRLOC memory cache for all
			domains - can not be resetted.
			</para>
		</section>
	</section>


	<section>
	<title>Exported Events</title>
	<section>
		<title>
		<function moreinfo="none">E_UL_AOR_INSERT</function>
		</title>
		<para>
			This event is raised when a new AOR is inserted in the USRLOC
			memory cache.
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>aor</emphasis> - The AOR of the inserted record.
			</para></listitem>
		</itemizedlist>
	</section>
	<section>
		<title>
		<function moreinfo="none">E_UL_AOR_DELETE</function>
		</title>
		<para>
			This event is raised when a new AOR is deleted from the USRLOC
			memory cache.
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>aor</emphasis> - The AOR of the deleted record.
			</para></listitem>
		</itemizedlist>
	</section>
	<section>
		<title>
		<function moreinfo="none">E_UL_CONTACT_INSERT</function>
		</title>
		<para>
			This event is raised when a new contact is inserted in any of the
			existing AOR's contact list. For each new contact, if its AOR does
			not exist in the memory, then both the E_UL_AOR_CREATE and
			E_UL_CONTACT_INSERT events will be raised.
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>aor</emphasis> - The AOR of the inserted contact.
			</para></listitem>
			<listitem><para>
				<emphasis>address</emphasis> - The binding address of the inserted contact.
			</para></listitem>
			<listitem><para>
					<emphasis>callid</emphasis> - The Call-ID header of the registration message.
			</para></listitem>
			<listitem><para>
					<emphasis>received</emphasis> - IP, port and protocol the registration
					message was received from. If these have the same value as the
					contact's address (see the address parameter) then the received
					parameter will be an empty string.
			</para></listitem>
			<listitem><para>
					<emphasis>cseq</emphasis> - The cseq number as an int value.
			</para></listitem>
		</itemizedlist>
	</section>
	<section>
		<title>
		<function moreinfo="none">E_UL_CONTACT_DELETE</function>
		</title>
		<para>
			This event is raised when a contact is deleted from an
			existing AOR's contact list. If the contact is the only one in
			the list then both the E_UL_AOR_DELETE and
			E_UL_CONTACT_DELETE events will be raised.
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>aor</emphasis> - The AOR of the deleted contact.
			</para></listitem>
			<listitem><para>
				<emphasis>address</emphasis> - The binding address of the deleted contact.
			</para></listitem>
			<listitem><para>
					<emphasis>callid</emphasis> - The Call-ID header of the registration message.
			</para></listitem>
			<listitem><para>
					<emphasis>received</emphasis> - IP, port and protocol the registration
					message was received from. If these have the same value as the
					contact's address (see the address parameter) then the received
					parameter will be an empty string.
			</para></listitem>
			<listitem><para>
					<emphasis>cseq</emphasis> - The cseq number as an int value.
			</para></listitem>
		</itemizedlist>
	</section>
	<section>
		<title>
		<function moreinfo="none">E_UL_CONTACT_UPDATE</function>
		</title>
		<para>
			This event is raised when a contact's info is updated by receiving
			another registration message.
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>aor</emphasis> - The AOR of the updated contact.
			</para></listitem>
			<listitem><para>
				<emphasis>address</emphasis> - The binding address of the updated contact.
			</para></listitem>
			<listitem><para>
					<emphasis>callid</emphasis> - The Call-ID header of the registration message.
			</para></listitem>
			<listitem><para>
					<emphasis>received</emphasis> - IP, port and protocol the registration
					message was received from. If these have the same value as the
					contact's address (see the address parameter) then the received
					parameter will be an empty string.
			</para></listitem>
			<listitem><para>
					<emphasis>cseq</emphasis> - The cseq number as an int value.
			</para></listitem>
		</itemizedlist>
	</section>
	</section>
</chapter>
