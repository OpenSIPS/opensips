#
# $Id$
#

About acc Module
----------------

acc module is used to report on transactions to syslog, SQL and
RADIUS.  

To report on a transaction using syslog, use "setflag" to mark 
a transaction you are interested in with a flag, load accounting 
module and set its "log_flag" to the same flag number. The acc module 
will then report on completed transaction to syslog. A typical usage 
of the module takes no acc-specific script command -- the functionality 
binds invisibly through transaction processing.  Script writers just 
need to mark the transaction for accounting with proper setflag.

What is printed depends on module's "log_fmt" parameter. It's a string
with characters specifying which parts of request should be printed:
c=Callid,d=to-tag (Dst),f=From,i=In-uri,m=Method,o=Out-uri,r=fRom-tag, 
s=Status, t=To, u=digest User_id, p=user Part of in-uri. If a value is 
not present in request, "n/a" is accounted instead.

Note that 
- a single INVITE may produce multiple accounting reports -- that's
  due to SIP's forking feature
- subsequent ACKs and other requests do not hit the server and
  can't be accounted unless record-routing is enforced. The ACKs 
  assert very little useful information anyway and reporting on
  INVITE's 200 makes most accounting scenarios happy.
- there is no session accounting -- ser maintains no sessions. If one 
  needs to correlate INVITEs with BYEs for example for purpose of billing, 
  then it is better done in the entity which collects accounting infromation. 
  Otherwise, SIP server would have to become sessions-stateful, which
  would very badly impact its scalability.
- if a UA fails in middle of conversation, a proxy will never learn it;
  in general, a better practice is to account from an end-device
  (such as PSTN gateway), which best knows about call status
  (including media status and PSTN status in case of the gateway)

Support for SQL and RADIUS works analogously. You need to enable it
by recompiling the module with properly set defines. Uncomment the 
SQL_ACC and RAD_ACC lines in modules/acc/Makefile. To compile SQL 
support, you need to have mysqlclient package on your system. To 
compile RADIUS support, you need to have radiusclient installed
on your system (http://www.mcs-cityline.net/~lf/radius/). The
radius client needs to be configured properly. To do so, use
the template at etc/radiusclient.conf and make sure that module's
radius_config parameter points to its location.  In particular, 
accounting secret must match that one configured in server. Uses along 
with FreeRadius (http://www.freeradius.org/) and Radiator 
(http://www.open.com.au/radiator/) servers have been reported to us.

Both mysql and radius libraries must be dynamically linkable. You
need to configure your OS so that SER, when started, will find 
them. Typically, you do so by manipulating LD_LIBRARY_PATH
environment variable or condiguring ld.so.



Example:
--------
	loadmodule "modules/acc/acc.so"
	modparam("acc", "log_level", 1)
	modparam("acc", "log_flag", 1 )
	if (uri=~"sip:+49") /* calls to Germany */ {
		if (!proxy_authorize(   "iptel.org" /* realm */,
					"subscriber" /* table name */))  {
			proxy_challenge( "iptel.org" /* realm */, "0" /* no qop */ );
			break;
		}
		if (method=="INVITE" & !check_from()) {
			log("from!=digest\n");
			sl_send_reply("403","Forbidden");
			break;
		}
		setflag(1); /* set for accounting (the same value as in log_flag!)
		t_relay(); 	/* enter stateful mode now */
	};


Module depends on: tm -- acc registers TM callbacks

Exported parameters:
------------------


Name:    log_level
Type:    int
Default: L_NOTICE
Desc:    log level at which accounting messages are issued to
		 syslog

Name:	log_fmt
Type:	string
Default: "miocfs"
Desc:	defines what parts of header fields will be printed to
		syslog; see "about" for list of accepted values

Name:    early_media
Type:    int (boolean)
Default: 0
Desc:    should be early media (183) accounted too?


Name:    failed_transactions
Type:    int (boolean)
Default: 0
Desc:    should be failed transactions (status>=300) accounted too?

Name:    log_flag
Type:    int
Default: 1
Desc:    request flag which needs to be set to account a transaction

Name:	 log_missed_flag
Type:	 int
Default: 2
Desc:	 request flag which needs to be set to account missed calls


Name:    report_ack
Type:    int (boolean)
Default: 1
Desc:    Shall 'acc' attempt to account e2e ACKs too? Note that this
		 is really only an attempt, as e2e ACKs may take a different
		 path (unless RR enabled) and mismatch original INVITE
		 (e2e ACKs are a separate transaction).

Name:    report_cancels
Type:    int (boolean)
Default: 0
Desc:    By default, CANCEL reporting is disabled -- most accounting
 		 applications are happy to see INVITE's cancellation status.
		 Turn on if you explicitely want to account CANCEL transactions.

Radius-specific:

Name:	radius_config
Type:	string
Default: /usr/local/etc/radiusclient/radiusclient.conf
Desc:	path to radius client configuration file; set the referred config
		file correctly and specify there address of server, shared
		secret (should equal that in /usr/local/etc/raddb/clients for
		freeRadius servers) and dictionary; see etc for an example of
		config file and dictionary

Name:    service_type
Type:    int
Default: 15 (SIP)
Desc:    Radius service type used for accounting

Name:	radius_missed_flag, radius_flag -- analogous to syslog flags


Db-specific:

Name:	db_url
Tye:	string
Default: sql://ser:heslo@localhost/ser
Desc:	sql address

Name: db_flag, db_missed_flag -- analogous to syslog flags
		

Name:    use_db, db_url, uid_column, db_table
Type:    not used now
Default: 
Desc:    planned for dumping accounting output to mysql


Exported Functions: 
------------------

Name:	acc_log_request
Params:	comment
Desc: 	acc_request reports on a request; for example, it can be used
		to report on missed calls to off-line users who are replied 404;
		to avoid multiple reports on UDP request retranmission, you would
		need to embed the action in stateful processing

Name:	acc_db_request
Params:	comment, table
		like acc_log_request, acc_db_request reports on a request; the
		report is sent to database at 'db_url', in the table referred to
		in the second action parameter

Name:	acc_rad_request
Params:	comment
		like acc_log_request, acc_rad_requsts reports on a request; it
		reports to radius server as configured in "radius_config"


