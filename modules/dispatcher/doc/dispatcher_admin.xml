<!-- Module User's Guide -->

<chapter>

	<title>&adminguide;</title>

	<section>
	<title>Overview</title>
	<para>
		This modules implements a dispatcher for destination addresses. It
		computes hashes over various parts of the request and selects an
		address from a destination set. The selected address is then used as outbound
		proxy.
	</para>
	<para>
		The module can be used as a stateless load balancer, having no
		guarantee of fair distribution.
	</para>
	<para>
		For the distribution algorithm, the module allows the definition of
		weights for the destination. This is useful in order to get a different
		ratio of traffic between destinations.
	</para>
	<para>
		Since version 2.1 the dispatcher module keeps its destination sets 
		into different partitions. Each partition is described by its own
		db_url, table_name, dst_avp, grp_avp, cnt_avp, sock_avp, attr_avp and 
		blacklists. Setting any of this parameters using modparam will alter 
		the default partition's properties. In order to create a new partition 
		the "partition" parameter should be used (see below for more details).
		If none of the 8 partition specific parameters are defined for the 
		default partition, then this partition will not be created. If the 
		default partition is created each undefined parameter from all other 
		partitions will take the value of the corresponding one from the 
		default partition. If there is no default partition, the default value
		specified in the parameter's description will be used. Functions taking
		set arguments will now take a set number preceded by a partition 
		name and colon(i.e "part_name: 5").
		If a set is not preceded by any partition name the default partition 
		will be used. Thus, the following arguments are equivalent: 
		"default : 4" vs "4". Remember that in order to be able to use a 
		table from a partition, its name must be found in the "version" table 
		belonging to the database defined in the partition's db_url.
		Also, in version 2.1 the "flags" parameter has been moved to 
		ds_select_dst() and ds_select_domain() along with "force_dst" and
		"use_default" flags.
	</para>
	</section>
	<section>
	<title>Dependencies</title>
	<section>
		<title>&osips; modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>TM - only if active recovery of failed hosts is required</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	<section>
		<title>External libraries or applications</title>
		<para>
		The following libraries or applications must be installed before
		running &osips; with this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>none</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>

	<section>
	<title>Exported Parameters</title>
	<section>
		<title><varname>db_url</varname> (string)</title>
		<para>
		Database where to load the destinations from.
		Setting this parameter will only change the default partition's
		db_url. Use the partition parameter to create and alter
		other partitions.
		</para>
		<para>
		NOTE: if you intend to use the default partition you have to explicity 
		set this default db_url, otherwise OpenSIPS will not start (he value 
		of global default db_url is not inherited here! ).
		</para>
		<para>
		<emphasis>
			Default value is <quote>NULL</quote>. At least one db_url should
			be defined for the dispatcher module to work.
		</emphasis>
		</para>
		<example>
		<title>Set the 'default' partition's<quote>db_url</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "db_url", "mysql://user:passwb@localhost/database")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>attrs_avp</varname> (str)</title>
		<para>
		The name of the avp to contain the attributes string of the current
		destination. When a destination is selected, automatically, this AVP
		will provide the attributes string - this is an opaque string (from
		OpenSIPS point of view) : it is loaded from destination definition (
		via DB) and blindly provided in the script.
		Setting this parameter will only change the default partition's
		attrs_avp. Use the partition parameter to create and alter
		other partitions.
		</para>
		<note>
		</note>
		<para>
		<emphasis>
			Default value is <quote>null</quote> - don't provide ATTRIBUTEs.
		</emphasis>
		</para>
		<example>
		<title>Set the 'default' partition's <quote>attrs_avp</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "attrs_avp", "$avp(272)")
...
</programlisting>
		</example>
	</section>


	<section>
		<title><varname>hash_pvar</varname> (str)</title>
		<para>
		String with PVs used for the hashing algorithm 7.
		</para>
		<note>
		<para>
		You must set this parameter if you want do hashing over custom message
		parts.
		</para>
		</note>
		<para>
		<emphasis>
			Default value is <quote>null</quote> - disabled.
		</emphasis>
		</para>
		<example>
		<title>Use $avp(273) for hashing:</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "hash_pvar", "$avp(273)")
...
</programlisting>
		</example>
		<example>
		<title>Use combination of PVs for hashing:</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "hash_pvar", "hash the $fU@$ci")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>setid_pvar</varname> (str)</title>
		<para>
		The name of the PV where to store the set ID (group ID) when calling
		ds_is_in_list() without group parameter (third parameter).
		</para>
		<para>
		<emphasis>
			Default value is <quote>null</quote> - don't set PV.
		</emphasis>
		</para>
		<example>
		<title>Set the <quote>setid_pvar</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "setid_pvar", "$var(setid)")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>ds_ping_method</varname> (string)</title>
		<para>
		With this Method you can define, with which method you want to probe
		the failed gateways. This method is only available, if compiled with
		the probing of failed gateways enabled.
		</para>
		<para>
		<emphasis>
			Default value is <quote>OPTIONS</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set the <quote>ds_ping_method</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "ds_ping_method", "INFO")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>ds_ping_from</varname> (string)</title>
		<para>
		With this Method you can define the "From:"-Line for the request,
		sent to the failed gateways. This method is only available, if
		compiled with the probing of failed gateways enabled.
		</para>
		<para>
		<emphasis>
			Default value is <quote>sip:dispatcher@localhost</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set the <quote>ds_ping_from</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "ds_ping_from", "sip:proxy@sip.somehost.com")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>ds_ping_interval</varname> (int)</title>
		<para>
		With this Method you can define the interval for sending a request to
		a failed gateway. This parameter is only used, when the TM-Module is
		loaded. If set to <quote>0</quote>, the pinging of failed requests
		is disabled.
		</para>
		<para>
		<emphasis>
			Default value is <quote>0</quote> (disabled).
		</emphasis>
		</para>
		<example>
		<title>Set the <quote>ds_ping_interval</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "ds_ping_interval", 30)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>ds_probing_sock</varname> (str)</title>
		<para>
		A socket description [proto:]host[:port] of the local socket (which
		is used by OpenSIPS for SIP traffic) to be used (if multiple) for
		sending the probing messages from.
		</para>
		<para>
		<emphasis>
			Default value is <quote>NULL(none)</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set the <quote>ds_probing_sock</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "ds_probing_sock", "udp:192.168.1.100:5077")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>ds_probing_threshhold</varname> (int)</title>
		<para>
		If you want to set a gateway into probing mode, you will need a
		specific number of requests until it will change from "active" to
		probing. The number of attempts can be set with this parameter.
		</para>
		<para>
		<emphasis>
			Default value is <quote>3</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set the <quote>ds_probing_threshhold</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "ds_probing_threshhold", 10)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>ds_probing_mode</varname> (int)</title>
		<para>
		Controls what gateways are tested to see if they are reachable. If set
		to 0, only the gateways with state PROBING are tested, if set to 1, all
		gateways are tested. If set to 1 and the response is 408 (timeout),
		an active gateway is set to PROBING state.
		</para>
		<para>
		<emphasis>
			Default value is <quote>0</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set the <quote>ds_probing_mode</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "ds_probing_mode", 1)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>ds_probing_list</varname> (str)</title>
		<para>
                Defines a list of one or more setids that limits which
                destinations are probed if probing is active.  This is useful
                when multiple proxies share the same dispatcher table, but you
                want to limit which ones are responsible for probing specific
                destinations.
		</para>
		<para>
		<emphasis>
			Default value is <quote>NULL(none)</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set the <quote>ds_probing_list</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "ds_probing_list", "1,2,3")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>ds_define_blacklist</varname> (str)</title>
		<para>
		Defines a blacklist based on a dispatching setid from the 'default'
		partition.
		This list will contain the IPs (no port, all protocols) of the
		destinations matching the given setid.
		Use the 'partition' parameter if you want to define blacklists
		based on other partitions' sets.
		</para>
		<para>
		Multiple instances of this param are allowed.
		</para>
		<para>
		<emphasis>
			Default value is <quote>NULL</quote>.
		</emphasis>
		</para>
		<example>
			<title>Set the 'default' partition's <quote>ds_define_blacklist</quote>
				parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "ds_define_blacklist", "list= 1,4,3")
modparam("dispatcher", "ds_define_blacklist", "blist2= 2,10,6")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>options_reply_codes</varname> (str)</title>
		<para>
		This parameter must contain a list of SIP reply codes separated by
		comma. The codes defined here will be considered as valid reply codes
		for OPTIONS messages used for pinging, apart for 200.
		</para>
		<para>
		<emphasis>
			Default value is <quote>NULL</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set the <quote>options_reply_codes</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "options_reply_codes", "501, 403")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>dst_avp</varname> (str)</title>
		<para>
		This is mainly for internal usage and represents the name of the avp
		which will hold the list with addresses, in the order
		they have been selected by the chosen algorithm. If use_default is 1,
		the value of last dst_avp_id is the last address in destination set. The
		first dst_avp_id is the selected destinations. All the other addresses
		from the destination set will be added in the avp list to be able to
		implement serial forking.
		Setting this parameter will only change the default partition's
		dst_avp. Use the partition parameter to create and alter
		other partitions.
		</para>
		<para>
		<emphasis>
			For the 'default' partition the default value
			is <quote>$avp(ds_dst_failover)</quote>. For any other partition,
			the default value is <quote>$avp(ds_dst_failover_partitionname)</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set the 'default' partition's <quote>dst_avp</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "dst_avp", "$avp(271)")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>grp_avp</varname> (str)</title>
		<para>
		This is mainly for internal usage and represents the name of the avp
		storing the group id of the destination set. Good
		to have it for later usage or checks.
		Setting this parameter will only change the default partition's
		grp_avp. Use the partition parameter to create and alter
		other partitions.
		</para>
		<para>
		<emphasis>
			For the 'default' partition the default value
			is <quote>$avp(ds_grp_failover)</quote>. For any other partition,
			the default value is <quote>$avp(ds_grp_failover_partitionname)</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set the 'default' partition's <quote>grp_avp</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "grp_avp", "$avp(273)")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>cnt_avp</varname> (str)</title>
		<para>
		This is mainly for internal usage and represents the name of the avp
		storing the number of destination addresses kept in dst_avp avps.
		Setting this parameter will only change the default partition's
		cnt_avp. Use the partition parameter to create and alter
		other partitions.
		</para>
		<para>
		<emphasis>
			For the 'default' partition the default value
			is <quote>$avp(ds_cnt_failover)</quote>. For any other partition,
			the default value is <quote>$avp(ds_cnt_failover_partitionname)</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set the 'default' partition's <quote>cnt_avp</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "cnt_avp", "$avp(274)")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>sock_avp</varname> (str)</title>
		<para>
		This is mainly for internal usage and represents the name of the avp
		storing the sockets to be used for the destination addresses kept in
		dst_avp avps.
		Setting this parameter will only change the default partition's
		sock_avp. Use the partition parameter to create and alter
		other partitions.
		</para>
		<para>
		<emphasis>
			For the 'default' partition the default value
			is <quote>$avp(ds_sock_failover)</quote>. For any other partition,
			the default value is <quote>$avp(ds_sock_failover_partitionname)</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set the 'default' partition's <quote>sock_avp</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "sock_avp", "$avp(275)")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>pvar_algo_pattern</varname> (str)</title>
		<para>
		This parameter is used by the PVAR(9) algorithm to specify the
		pseudovariable pattern used to detect the load of each destination. The
		name of the pseudovariable should contain the string <quote>%u</quote>,
		which will be internally replaced by the module with the uri of the
		destination.
		</para>
		<para>
		</para>
		<para>
		<emphasis>
			Default value is <quote>none</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set the <quote>pvar_algo_pattern</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "pvar_algo_pattern", "$stat(load_%u)")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>persistent_state</varname> (int)</title>
		<para>
		Specifies whether the <emphasis>state</emphasis> column
		should be loaded at startup and flushed during runtime or not.
		</para>
		<para>
		<emphasis>Default value is <quote>1</quote> (enabled).
		</emphasis>
		</para>
		<example>
		<title>Set the <varname>persistent_state</varname> parameter</title>
		<programlisting format="linespecific">
...
# disable all DB operations with the state of a destination
modparam("dispatcher", "persistent_state", 0)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>table_name</varname> (string)</title>
		<para>
		If you want to load the sets of gateways from the database you must set
		this parameter as the database name.
		Setting this parameter will only change the default partition's
		table_name. Use the partition parameter to create and alter
		other partitions.
		</para>
		<para>
		<emphasis>
			For every partition the default value is <quote>dispatcher</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set the 'default' partition's <quote>table_name</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "table_name", "my_dispatcher")
...
</programlisting>
		</example>
	</section>


	<section>
		<title><varname>partition</varname> (string)</title>
		<para>
		Using this parameter the partition specific parameters (db_url, table_name, dst_avp,
		grp_avp, cnt_avp, sock_avp, attrs_avp, ds_define_blacklist) can be defined.
		</para>
		<para>
		The syntax is: "partition_name: param1 = value1; param2 = value2; param3 = value3".
		Each value format is the same as the one used to define a specific parameter using modparam.
		</para>
		<para>
		Whenever a new partition_name is provided, a new partition will be automatically created.
		The 'default' partition can also be defined using this parameter.
		</para>
		<example>
		<title> Create a new partition called 'part2' </title>
<programlisting format="linespecific">
...
modparam("dispatcher", "partition",
                "part2:
                    db_url = mysql://user:passwd@localhost/database;
                    table_name = ds_table;
                    attrs_avp = $avp(ds_attr_part2);
                    ds_define_blacklist = list2 = 4,6;")
...
</programlisting>
		</example>
	</section>


	<section>
		<title><varname>setid_col</varname> (string)</title>
		<para>
			The column's name in the database storing the gateway's group id.
		</para>
		<para>
		<emphasis>
			Default value is <quote>setid</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <quote>setid_col</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "setid_col", "groupid")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>destination_col</varname> (string)</title>
		<para>
			The column's name in the database storing the destination's
			sip uri.
		</para>
		<para>
		<emphasis>
			Default value is <quote>destination</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <quote>destination_col</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "destination_col", "uri")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>state_col</varname> (string)</title>
		<para>
			The column's name in the database storing the state of the
			destination uri.
		</para>
		<para>
		<emphasis>
			Default value is <quote>state</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <quote>state_col</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "state_col", "dststate")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>weight_col</varname> (string)</title>
		<para>
			The column's name in the database storing the weight for
			destination uri.
		</para>
		<para>
		<emphasis>
			Default value is <quote>weight</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <quote>weight_col</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "weight_col", "dstweight")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>priority_col</varname> (string)</title>
		<para>
			The column's name in the database storing the priority for
			destination uri.
		</para>
		<para>
		<emphasis>
			Default value is <quote>priority</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <quote>priority_col</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "priority_col", "dstprio")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>attrs_col</varname> (string)</title>
		<para>
			The column's name in the database storing the attributes (opaque
			string) for destination uri.
		</para>
		<para>
		<emphasis>
			Default value is <quote>attrs</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <quote>attrs_col</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "attrs_col", "dstattrs")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>socket_col</varname> (string)</title>
		<para>
			The column's name in the database storing the socket (as
			string) for destination uri.
		</para>
		<para>
		<emphasis>
			Default value is <quote>socket</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <quote>socket_col</quote> parameter</title>
<programlisting format="linespecific">
...
modparam("dispatcher", "socket_col", "my_sock")
...
</programlisting>
		</example>
	</section>


	</section>



	<section>
	<title>Exported Functions</title>
	<section>
		<title>
		<function moreinfo="none">ds_select_dst(set, alg [, (flags M max_results)*])</function>
		</title>
		<para>
		The method selects a destination from the given set of addresses. It will
		overwrite the "destination URI" of a SIP request (<emphasis>$du</emphasis>).
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para>
			<emphasis>set</emphasis> - a partition name followed by colon and an
			id of the set or a list of sets
			from where to pick up destination address (variables are accepted).
			If the partition name is missing, the default partition will be used.
			</para>
		</listitem>
		<listitem>
			<para>
			<emphasis>alg</emphasis> - the algorithm(s) used to select the
			destination address (variables are accepted).
			</para>
			<itemizedlist>
			<listitem>
				<para>
				<quote>0</quote> - hash over callid
				</para>
			</listitem>
			<listitem>
				<para>
				<quote>1</quote> - hash over from uri.
				</para>
			</listitem>
			<listitem>
				<para>
				<quote>2</quote> - hash over to uri.
				</para>
			</listitem>
			<listitem>
				<para>
				<quote>3</quote> - hash over request-uri.
				</para>
			</listitem>
			<listitem>
				<para>
				<quote>4</quote> - weighted round-robin (next destination).
				the destination's weight determines how many times it is chosen
				before going to the next one
				</para>
			</listitem>
			<listitem>
				<para>
				<quote>5</quote> - hash over authorization-username
				(Proxy-Authorization or "normal" authorization).
				If no username is found, weighted round-robin is used.
				</para>
			</listitem>
			<listitem>
				<para>
				<quote>6</quote> - random (using rand()).
				</para>
			</listitem>
			<listitem>
				<para>
				<quote>7</quote> - hash over the content of PVs string.
				Note: This works only when the parameter hash_pvar is set.
				</para>
			</listitem>
			<listitem>
				<para>
				<quote>8</quote> - the first entry in set is chosen.
				</para>
			</listitem>
			<listitem>
				<para>
				<quote>9</quote> - The <emphasis>pvar_algo_pattern</emphasis>
				parameter is used to determine the load on each server. If the
				parameter is not specified, then the first entry in the set is
				chosen.
				</para>
			</listitem>

			<listitem>
				<para>
				<quote>X</quote> - if the algorithm is not implemented, the
				first entry in set is chosen.
				</para>
			</listitem>
			</itemizedlist>
		</listitem>
		<listitem>
			<para>
			<emphasis>flags M max_results</emphasis> - If specified, this will be the flags which
			in previous versions were specified at startup. The flags are:
			</para>
			<itemizedlist>
			<listitem>
				<para>'f'/'F' - the failover support flag,</para>
			</listitem>

			<listitem>
				<para>'u'/'U' - the user only flag - will specify that only the
				uri user part will be used for hashing,</para>
			</listitem>

			<listitem>
				<para> 'S'/'s' -  the force destination flag - which will skip
				overwriting the destination address if it is already set,</para>
			</listitem>

			<listitem>
				<para>'D'/'d' - the use default flag('D','d') - which will use the
				last address in destination set as last option to send the message.</para>
			</listitem>
			</itemizedlist>
			<para>
			You can also specify these flags using PVs. The flags are being kept per partition.
			</para>
			<para>
			The second paramater,
			max_results represents that only a maximum of max_results will be put into the
			specified avp for failover. This allows having many destinations but limit the
			useless traffic in case of a number that is bound to fail everywhere. Since version
			2.1, the last paramater cand be represented by a list of flags and max_results,
			separated by comma. You can specify either only the flags, either only the max_results
			paramater, but if you want to specify them together you have to use the 'M' character
			like this: flags M max_results.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		If the character 'f' in 'flags' is set, the rest of the addresses from the
		destination set is stored in AVP list. You can use 'ds_next_dst()' to
		use next address to achieve serial forking to all possible
		destinations.  If multiple dispatching groups are used, the AVP list
		is constructed based on the position of each dispatching id in the list:
		first one has the higher priority, followed by the second one and so on.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE and FAILURE_ROUTE.
		</para>
		<example>
		<title><function>ds_select_dst</function> usage</title>
<programlisting format="linespecific">
...
ds_select_dst("1", "0");
...
ds_select_dst("part2 : 1", "0", "5");
...
ds_select_dst("part3 : 1", "0", "fUsD");
...
ds_select_dst("part4 : 2,3", "0,1", "fuD M 5, fuS M 2");
...
# dispatch over multiple dispatching groups
$var(part_name) = "p4"
$var(setid) = "1, 2";
$var(alg) = "4, 2";
$var(flags) = " sFDU M 2, fuS M 3";
ds_select_dst("$var(part_name):$var(setid)","$var(alg)","$var(flags)");
...
</programlisting>
		</example>
	</section>
	<section>
		<title>
		<function moreinfo="none">ds_select_domain(set, alg [, "[flags] [M max_results]"])</function>
		</title>
		<para>
		The method selects a destination from addresses set  and rewrites the
		host and port from R-URI. The parameters have same meaning as for
		ds_select_dst().
		</para>
		<para>
		If the character 'f' in 'flags' is set, the rest of the addresses from the
		destination set is stored in AVP list. You can use 'ds_next_domain()'
		to use next address to achieve serial forking to all possible
		destinations.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE and FAILURE_ROUTE.
		</para>
	</section>
	<section>
		<title>
		<function moreinfo="none">ds_next_dst([partition_name])</function>
		</title>
		<para>
		Takes the next destination address from the AVPs with id
		partition.'dst_avp_id' and sets the dst_uri (outbound proxy address).
		If partition_name is omitted, the default partition will be used.This
		function is using the flags set in ds_select_dst or ds_select_domain.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE and FAILURE_ROUTE.
		</para>
	</section>
	<section>
		<title>
		<function moreinfo="none">ds_next_domain([partition_name])</function>
		</title>
		<para>
		Takes the next destination address from the AVPs with id
		partition.'dst_avp_id' and sets the domain part of the request uri.
		If partition_name is omitted, the default partition will be used.This
		function is using the flags set in ds_select_dst or ds_select_domain.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE and FAILURE_ROUTE.
		</para>
	</section>
	<section>
		<title>
		<function moreinfo="none">ds_mark_dst()</function>
		</title>
		<para>
		Mark the last used address from the 'default' partition's destination
		set as inactive, in order to be ignored in the future. In this way it
		can be implemented an automatic detection of failed gateways.
		When an address is marked as inactive, it will be ignored by
		'ds_select_dst' and 'ds_select_domain'. This function is using the flags
		set in ds_select_dst or ds_select_domain.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE and FAILURE_ROUTE.
		</para>
	</section>
	<section>
		<title>
		<function moreinfo="none">ds_mark_dst([partition_name], "s")</function>
		</title>
		<para>
		Mark the last used address from partition's destination set as
		inactive ("i"/"I"/"0"), active ("a"/"A"/"1") or probing ("p"/"P"/"2").
		With this function, an automatic detection of failed gateways can be implemented.
		When an address is marked as inactive or probing, it will be ignored by
		'ds_select_dst' and 'ds_select_domain'.
		If partition_name is omitted, the default partition will be used. This function
		is using the flags set in ds_select_dst or ds_select_domain.
		</para>
		<para>possible parameters:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>"i", "I" or "0"</emphasis> - the last destination should be set to inactive and will be ignored in future requests.</para>
		</listitem>
		<listitem>
			<para><emphasis>"a", "A" or "1"</emphasis> - the last destination should be set to active.</para>
		</listitem>
		<listitem>
			<para><emphasis>"p", "P" or "2"</emphasis> - the last destination will be set to probing. Note: You will need to call this function "threshold"-times, before it will be actually set to probing.</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE and FAILURE_ROUTE.
		</para>
	</section>
	<section>
		<title>
		<function moreinfo="none">ds_count(set, filter, result)</function>
		</title>
		<para>
		Returns the number of active, inactive or probing destinations in a
		partition's set, or combinations between these properties.
		</para>
		<para>Meaning of the parameters:</para>
		<itemizedlist>
		<listitem>
			<para>
			<emphasis>set</emphasis> - a partition name followed by colon and an
			id of a set of dispatching destinations (variables are accepted).
			If the partition name is missing, the default partition will be used.
			</para>
		</listitem>

		<listitem>
			<para><emphasis>filter</emphasis> - which destinations should be
			counted. Either active destinations("a", "A" or "1"), inactive
			destinations("i", "I" or "0") or probing ones("p", "P" or "2") or
			different combinations between these flags, such as
			"pI", "1i", "ipA"... The <emphasis>filter</emphasis> parameter can have
			the following types:</para>
			<itemizedlist>
				<listitem>
				<para><emphasis>string</emphasis> - the filtering flags are
				statically assigned</para>
				</listitem>
			</itemizedlist>
		</listitem>

		<listitem>
			<para><emphasis>result</emphasis> - A pseudovariable for storing
			the result. </para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, FAILURE_ROUTE, BRANCH_ROUTE,
		LOCAL_ROUTE, TIMER_ROUTE, EVENT_ROUTE
		</para>
		<example>
		<title><function>ds_count</function> usage</title>
<programlisting format="linespecific">
...
if (ds_count("1", "a", "$avp(result)")) {
	...
}
...
if (ds_count("$avp(partition) : $avp(set)", "ip", "$avp(result)")) {
	...
}
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">ds_is_in_list(ip, port [,set [,active_only]])</function>
		</title>
		<para>
		This function returns true, if the parameters ip and port point to a
		host from the dispatcher-list; otherwise false.
		</para>
		<para>
		Meaning of the parameters:
		</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>ip</emphasis> - string / pseudo-variable (as string)
			containing the IP to test against the dispatcher list. This cannot
			be empty.</para>
		</listitem>
		<listitem>
			<para><emphasis>port</emphasis> - int / pseudo-variable (as int)
			containing the PORT to test against the dispatcher list. This
			can be empty - in this case the port will excluded from the
			matching of IP against the dispatcher list.</para>
		</listitem>
		<listitem>
			<para><emphasis>set</emphasis> (optional) - a partition name followed
			by colon and the set ID of a dispatcher list to test against.
			If the partition name is omitted the default partition will be used.
			If the set id is missing, all the dispatching
			sets will the checked. If a partition name is specified then it must
			be followed by colon regardless of the set id being specified or not.
			<quote>-1</quote> can be used as a wildcard to check in all sets.
			</para>
		</listitem>
		<listitem>
			<para><emphasis>active_only</emphasis> (optional) - search only
			through the active destinations (ignore the ones in probing
			and inactive mode).</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
		BRANCH_ROUTE and ONREPLY_ROUTE.
		</para>
		<example>
		<title><function>ds_is_in_list</function> usage</title>
<programlisting format="linespecific">
...
if (ds_is_in_list("$si", "$sp")) {
	# source IP:PORT is in a dispatcher list
}
...
if (ds_is_in_list("$rd", "$rp", "2")) {
	# source RURI (ip and port) is in the dispatcher list id "2" of the default partition
}
...
if (ds_is_in_list("$rd", "$rp", "part2:2")) {
	# source RURI (ip and port) is in the dispatcher list id "2" of the partition called 'part2'
}
...
</programlisting>
		</example>

	</section>
	</section>

	<section>
	<title>Exported MI Functions</title>
	<section>
		<title>
		<function moreinfo="none">ds_set_state</function>
		</title>
		<para>
		Sets the status for a destination address (can be use to mark the destination
		as active or inactive).
		</para>
		<para>
		Name: <emphasis>ds_set_state</emphasis>
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem><para>_state_ : state of the destination address</para>
				<itemizedlist>
					<listitem><para> <quote>a</quote>: active </para></listitem>
					<listitem><para> <quote>i</quote>: inactive </para></listitem>
					<listitem><para> <quote>p</quote>: probing </para></listitem>
				</itemizedlist>
			</listitem>

			<listitem><para>_group_: partition name followed by colon
			and destination group id. If the partition name is omitted,
			the default partition will be used</para></listitem>

			<listitem><para>_address_: address of the destination in the _group_</para></listitem>
		</itemizedlist>
		<para>
		MI FIFO Command Format:
		</para>
<programlisting  format="linespecific">
:ds_set_state:_reply_fifo_file_
_state_
_group_
_address_
_empty_line_
</programlisting>
	</section>
	<section>
		<title>
		<function moreinfo="none">ds_list</function>
		</title>
		<para>
		It lists the groups and included destinations of all the partitions.
		</para>
		<para>
		Name: <emphasis>ds_list</emphasis>
		</para>
		<para>Parameters:</para>
		 <itemizedlist>
			<listitem><para>
				<emphasis>full</emphasis> (optional) - adds the weight,
				priority and description fields to the listing
			</para></listitem>
		</itemizedlist>
		<para>
		MI FIFO Command Format:
		</para>
<programlisting  format="linespecific">
:ds_list:_reply_fifo_file_
_empty_line_
</programlisting>
	</section>
	<section>
		<title>
		<function moreinfo="none">ds_reload</function>
		</title>
		<para>
		It reloads the groups and included destinations for a
		specified partition or all partitions.
		</para>
		<para>
		Name: <emphasis>ds_reload</emphasis>
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>partition</emphasis> (optional) - name of
				the partition to be reloaded.
			</para></listitem>
		</itemizedlist>
		<para>
		MI DATAGRAM Command Format:
		</para>
<programlisting  format="linespecific">
":ds_reload:\n."
</programlisting>
	</section>

	</section>

	<section>
	<title>Exported Events</title>
	<section>
		<title>
		<function moreinfo="none">E_DISPATCHER_STATUS</function>
		</title>
		<para>
			This event is raised when the dispatcher module marks a destination as
			activated or deactivated.
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>partition</emphasis> - the partition name of the destination.
			</para></listitem>
			<listitem><para>
				<emphasis>group</emphasis> - the group of the destination.
			</para></listitem>
			<listitem><para>
				<emphasis>address</emphasis> - the address of the destination.
			</para></listitem>
			<listitem><para>
				<emphasis>status</emphasis> - <emphasis>active</emphasis> if
				the destination gets activated or <emphasis>inactive</emphasis> if the
				destination is detected unresponsive.
			</para></listitem>
		</itemizedlist>
	</section>
	</section>


	<section>
	<title>Installation and Running</title>
		<section>
		<title>&osips; config file</title>
		<para>
		Next picture displays a sample usage of dispatcher.
		</para>
		<example>
		<title>&osips; config script - sample dispatcher usage</title>
<programlisting format="linespecific">
...
&dispatchercfg;
...
</programlisting>
		</example>
	</section>
	</section>
</chapter>

