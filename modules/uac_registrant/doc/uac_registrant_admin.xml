<!-- Module User's Guide -->

<chapter>
	

	<title>&adminguide;</title>
	
	<section>
	  <title>Overview</title>
	    <para> 
		The module enable &osips; to register itself on a remote SIP registrar.
	    </para>
	    <para>
		At startup, the registrant records are loaded into
		a hash table in memory and a timer is started.
		The hash index is computed over the AOR field.
		</para>
		<para>
		The timer interval for checking records in a hash bucket is computed
		by dividing the timer_interval module param by the number of hash buckets.
		When the timer fires for the first time, the first hash bucket will be checked and
		REGISTERs will be sent out for each record that is found.
		On the next timeout fire, the second hash bucket will be checked and so on.
		If the configured timer_interval module param is lower then the number of buckets,
		the module will fail to start.
	    </para>
	    <para>
	    Example: setting the timer_interval module to 8 with a hash_size of 2, will result
	    in having 4 hash buckets (2^2=4) and buckets will be checked one by one every 2s (8/4=2).
	    </para>
	    <para>
	    Each registrant has it's own state.
	    Registranr's status can be inspected via "reg_list" MI comand.
	    </para>
	    <para>
		UAC registrant states:
		<itemizedlist>
			<listitem>
			<para><emphasis>0</emphasis>
				- NOT_REGISTERED_STATE -
				the initial state (no REGISTER has been sent out yet);</para>
			</listitem>
			<listitem>
			<para><emphasis>1</emphasis>
				- REGISTERING_STATE - waiting for a reply from the registrar
				after a REGISTER without authentication header was sent;</para>
			</listitem>
			<listitem>
			<para><emphasis>2</emphasis>
				- AUTHENTICATING_STATE - waiting for a reply from the registrar
			 	after a REGISTER with authentication header was sent;</para>
			</listitem>
			<listitem>
			<para><emphasis>3</emphasis>
				- REGISTERED_STATE - the uac is successfully registered;</para>
			</listitem>
			<listitem>
			<para><emphasis>4</emphasis>
				- REGISTER_TIMEOUT_STATE :
				no reply received from the registrar;</para>
			</listitem>
			<listitem>
			<para><emphasis>5</emphasis>
				- INTERNAL_ERROR_STATE -
				some errors were found/encountered during the
				processing of a reply;</para>
			</listitem>
			<listitem>
			<para><emphasis>6</emphasis>
				- WRONG_CREDENTIALS_STATE -
				credentials rejected by the registrar;</para>
			</listitem>
			<listitem>
			<para><emphasis>7</emphasis>
				- REGISTRAR_ERROR_STATE -
				error reply received from the registrar;</para>
			</listitem>
		</itemizedlist>
	    </para>
	</section>

	<section>
	  <title>Dependencies</title>
	  <section>
	  <title>&osips; Modules</title>
		<para>
		The following modules must be loaded before this module:
		<itemizedlist>
		<listitem>
		<para>
			<emphasis>uac_auth - UAC authentication module</emphasis>
		</para>
		</listitem>
		</itemizedlist>
		</para>
	  </section>

	  <section>
		<title>External Libraries or Applications</title>
		<para>None.</para>
	  </section>
	</section>
	
	<section>
	<title>Exported Parameters</title>
        <section>
		<title><varname>hash_size</varname> (integer)</title>
		<para>
		The size of the hash table internally used to keep the registrants.
		A larger table distributes better the registration load in time but consumes more memory.
		The hash size is a power of number two. 
		</para>
		<para>
		<emphasis>
			Default value is 1.
		</emphasis>
                </para>
		<example>
		<title>Set <varname>hash_size</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("uac_registrant", "hash_size", 2)
...
</programlisting>
		</example>
	</section>
        <section>
		<title><varname>timer_interval</varname> (integer)</title>
		<para>
		Defines the periodic timer for checking the registrations status.
		</para>
		<para>
		<emphasis>
			Default value is 100.
		</emphasis>
                </para>
		<example>
		<title>Set <varname>timer_interval</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("uac_registrant", "timer_interval", 120)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>db_url</varname> (string)</title>
		<para>
		Database where to load the registrants from.
		</para>
		<para>
		<emphasis>
			Default value is <quote>NULL</quote> (use default DB URL from core).
		</emphasis>
		</para>
		<example>
		<title>Set <quote>db_url</quote> parameter</title>
		<programlisting format="linespecific">
...
modparam("uac_registrant", "db_url", "mysql://user:passw@localhost/database")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>table_name</varname> (string)</title>
		<para>
		The database table that holds the registrant records.
		</para>
		<para>
		<emphasis>
			Default value is <quote>registrant</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <quote>table_name</quote> parameter</title>
		<programlisting format="linespecific">
...
modparam("uac_registrant", "table_name", "my_registrant")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>registrar_column</varname> (string)</title>
		<para>
		The column's name in the database storing the
		URI pointing to the remote registrar (mandatory field).
		&osips; expects a valid URI.
		</para>
		<para>
		<emphasis>
			Default value is <quote>registrar</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <quote>registrar_column</quote> parameter</title>
		<programlisting format="linespecific">
...
modparam("uac_registrant", "registrar_column", "registrant_uri")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>proxy_column</varname> (string)</title>
		<para>
		The column's name in the database storing the
		URI pointing to the outbond proxy (not mandatory field).
		An empty or NULL value means no outbound proxy,
		otherwise &osips; expects a valid URI.
		</para>
		<para>
		<emphasis>
			Default value is <quote>proxy</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <quote>proxy_column</quote> parameter</title>
		<programlisting format="linespecific">
...
modparam("uac_registrant", "proxy_column", "proxy_uri")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>aor_column</varname> (string)</title>
		<para>
		The column's name in the database storing the
		URI defining the address of record (mandatory field).
		The URI stored here will be used in the To URI of the REGISTER.
		&osips; expects a valid URI.
		</para>
		<para>
		<emphasis>
			Default value is <quote>aor</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <quote>aor_column</quote> parameter</title>
		<programlisting format="linespecific">
...
modparam("uac_registrant", "aor_column", "to_uri")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>third_party_registrant_column</varname> (string)</title>
		<para>
		The column's name in the database storing the
		URI defining the third party registrant (not mandatory field).
		The URI stored here will be used in the From URI of the REGISTER.
		An empty or NULL value means no third party registration
		(the From URI will be identical to To URI),
		otherwise &osips; expects a valid URI.
		</para>
		<para>
		<emphasis>
			Default value is <quote>third_party_registrant</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <quote>third_party_registrant_column</quote> parameter</title>
		<programlisting format="linespecific">
...
modparam("uac_registrant", "third_party_registrant_column", "from_uri")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>username_column</varname> (string)</title>
		<para>
		The column's name in the database storing the
		username for authentication (mandatory if the registrar requires authentication).
		</para>
		<para>
		<emphasis>
			Default value is <quote>username</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <quote>username_column</quote> parameter</title>
		<programlisting format="linespecific">
...
modparam("uac_registrant", "username_column", "auth_username")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>password_column</varname> (string)</title>
		<para>
		The column's name in the database storing the
		password for authentication (mandatory if the registrar requires authntication).
		</para>
		<para>
		<emphasis>
			Default value is <quote>password</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <quote>password_column</quote> parameter</title>
		<programlisting format="linespecific">
...
modparam("uac_registrant", "password_column", "auth_passowrd")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>binding_URI_column</varname> (string)</title>
		<para>
		The column's name in the database storing the
		binding URI in REGISTER (mandatory field).
		The URI stored here will be used in the Contact URI of the REGISTER.
		&osips; expects a valid URI.
		</para>
		<para>
		<emphasis>
			Default value is <quote>binding_URI</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <quote>binding_URI_column</quote> parameter</title>
		<programlisting format="linespecific">
...
modparam("uac_registrant", "binding_URI_column", "contact_uri")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>binding_params_column</varname> (string)</title>
		<para>
		The column's name in the database storing the
		binding params in REGISTER (not mandatory field).
		If not NULL or not empty, the string stored here will be added
		as params to the Contact URI in REGISTER (it MUST start with <quote>;</quote>.
		There is no validation on the string stored here.
		</para>
		<para>
		<emphasis>
			Default value is <quote>binding_params</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <quote>binding_params_column</quote> parameter</title>
		<programlisting format="linespecific">
...
modparam("uac_registrant", "binding_params_column", "contact_params")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>expiry_column</varname> (string)</title>
		<para>
		The column's name in the database storing the
		expiration time (not mandatory).
		</para>
		<para>
		<emphasis>
			Default value is <quote>expiry</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <quote>expiry_column</quote> parameter</title>
		<programlisting format="linespecific">
...
modparam("uac_registrant", "expiry_column", "registration_timeout")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>forced_socket_column</varname> (string)</title>
		<para>
		The column's name in the database storing the
		socket for sending the REGISTER (not mandatory).
		If a forced socket is provided, the socket MUST be
		explicitely set as a global listening socket in the config
		(see <quote>listen</quote> core parameter).
		</para>
		<para>
		<emphasis>
			Default value is <quote>forced_socket</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <quote>forced_socket_column</quote> parameter</title>
		<programlisting format="linespecific">
...
modparam("uac_registrant", "forced_socket_column", "fs")
...
</programlisting>
		</example>
	</section>
	</section>

	<section>
	<title>Exported Functions</title>
	      <para>None to be used in configuration file.</para>
	</section>

	<section>
	<title>Exported MI Functions</title>
	<section>
	<title><function moreinfo="none">reg_list</function></title>
		<para>Lists the registrant records and their status.</para>
		<para>Name: <emphasis>reg_list</emphasis></para>
		<para>Parameters: <emphasis>none</emphasis></para>
		<para>MI FIFO Command Format:</para>
		<programlisting  format="linespecific">
:reg_list:_reply_fifo_file_
_empty_line_
		</programlisting>
	</section>
	<section>
	<title><function moreinfo="none">reg_reload</function></title>
		<para>Reloads the registrant records from the database.</para>
		<para>Name: <emphasis>reg_reload</emphasis></para>
		<para>Parameters: <emphasis>none</emphasis></para>
		<para>MI FIFO Command Format:</para>
		<programlisting  format="linespecific">
:reg_reload:_reply_fifo_file_
_empty_line_
		</programlisting>
	</section>
	</section>
</chapter>

