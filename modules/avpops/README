AVPops Module

Ramona-Elena Modroiu

   <ramona@rosdev.ro>

Edited by

Ramona-Elena Modroiu

   <ramona@rosdev.ro>

   Copyright © 2004-2008 Voice Sistem SRL
   Revision History
   Revision $Revision: 5901 $ $Date$
     __________________________________________________________

   Table of Contents

   1. Admin Guide

        1.1. Overview
        1.2. Dependencies

              1.2.1. OpenSIPS Modules
              1.2.2. External Libraries or Applications

        1.3. AVP naming format
        1.4. Exported Parameters

              1.4.1. db_url (string)
              1.4.2. avp_table (string)
              1.4.3. use_domain (integer)
              1.4.4. uuid_column (string)
              1.4.5. username_column (string)
              1.4.6. domain_column (string)
              1.4.7. attribute_column (string)
              1.4.8. value_column (string)
              1.4.9. type_column (string)
              1.4.10. db_scheme (string)
              1.4.11. buf_size (integer)

        1.5. Exported Functions

              1.5.1. avp_db_load(source, name[, db_id[, prefix]])
              1.5.2. avp_db_store(source,name[,db_id])
              1.5.3. avp_db_delete(source,name[,db_id])
              1.5.4. avp_db_query(query[[,dest],db_id])
              1.5.5. avp_delete(name)
              1.5.6. avp_pushto(destination,name)
              1.5.7. avp_check(name,op_value)
              1.5.8. avp_copy(old_name,new_name)
              1.5.9. avp_printf(dest, format)
              1.5.10. avp_subst(avps, subst)
              1.5.11. avp_op(name,op_value)
              1.5.12. is_avp_set(name)
              1.5.13. avp_print()
              1.5.14. avp_insert(avp_name, value, index)

        1.6. Exported Asynchronous Functions

              1.6.1. avp_db_query(query[[,dest],db_id])

   List of Examples

   1.1. AVP naming examples
   1.2. Set avp_url parameter
   1.3. Set avp_table parameter
   1.4. Set use_domain parameter
   1.5. Set uuid_column parameter
   1.6. Set username_column parameter
   1.7. Set domain_column parameter
   1.8. Set attribute_column parameter
   1.9. Set value_column parameter
   1.10. Set type_column parameter
   1.11. Set db_scheme parameter
   1.12. Set buf_size parameter
   1.13. avp_db_load usage
   1.14. avp_db_store usage
   1.15. avp_db_delete usage
   1.16. avp_db_query usage
   1.17. avp_delete usage
   1.18. avp_pushto usage
   1.19. avp_check usage
   1.20. avp_copy usage
   1.21. avp_printf usage
   1.22. avp_subst usage
   1.23. avp_op usage
   1.24. is_avp_set usage
   1.25. avp_print usage
   1.26. avp_print usage
   1.27. async avp_db_query usage

Chapter 1. Admin Guide

1.1. Overview

   AVPops (AVP-operations) modules implements a set of script
   functions which allow access and manipulation of user AVPs
   (preferences) and pseudo-variables. AVPs are a powerful tool
   for implementing services/preferences per user/domain. Now they
   are usable directly from configuration script. Functions for
   interfacing DB resources (loading/storing/removing), functions
   for swapping information between AVPs and SIP messages,
   function for testing/checking the value of an AVP.

   AVPs are persistent per SIP transaction, being available in
   "route", "branch_route" and "failure_route". To make them
   available in "onreply_route" armed via TM module, set
   "onreply_avp_mode" parameter of TM module (note that in the
   default "onreply_route", the AVPs of the transaction are not
   available).

1.2. Dependencies

1.2.1. OpenSIPS Modules

   The following modules must be loaded before this module:
     * Optionally a database module

1.2.2. External Libraries or Applications

   The following libraries or applications must be installed
   before running OpenSIPS with this module loaded:
     * None

1.3. AVP naming format

   The format of the parameters specifying an AVP in functions
   exported by this module is: $avp(avp_name).
     * avp_name = string | integer
       string - might be any alphanumeric string, wich contain
       following characters: [a-z] [A-Z] [0-9] '_'

   Example 1.1. AVP naming examples
...
$avp(11) - the AVP identified by name 11
$avp(foo) - the AVP identified by the string 'foo'
...

1.4. Exported Parameters

1.4.1. db_url (string)

   DB URL for database connection. As the module allows the usage
   of multiple DBs (DB URLs), the actual DB URL may be preceded by
   an reference number. This reference number is to be passed to
   AVPOPS function that what to explicitly use this DB connection.
   If no reference number is given, 0 is assumed - this is the
   default DB URL.

   This parameter is optional, it's default value being NULL.

   Example 1.2. Set avp_url parameter
...
# default URL
modparam("avpops","db_url","mysql://user:passwd@host/database")
# an additional DB URL
modparam("avpops","db_url","1 postgres://user:passwd@host2/opensips")
...

1.4.2. avp_table (string)

   DB table to be used.

   This parameter is optional, it's default value being NULL.

   Example 1.3. Set avp_table parameter
...
modparam("avpops","avp_table","avptable")
...

1.4.3. use_domain (integer)

   If the domain part of the an URI should be used for identifying
   an AVP in DB operations.

   Default value is 0 (no).

   Example 1.4. Set use_domain parameter
...
modparam("avpops","use_domain",1)
...

1.4.4. uuid_column (string)

   Name of column containing the uuid (unique user id).

   Default value is “uuid”.

   Example 1.5. Set uuid_column parameter
...
modparam("avpops","uuid_column","uuid")
...

1.4.5. username_column (string)

   Name of column containing the username.

   Default value is “username”.

   Example 1.6. Set username_column parameter
...
modparam("avpops","username_column","username")
...

1.4.6. domain_column (string)

   Name of column containing the domain name.

   Default value is “domain”.

   Example 1.7. Set domain_column parameter
...
modparam("avpops","domain_column","domain")
...

1.4.7. attribute_column (string)

   Name of column containing the attribute name (AVP name).

   Default value is “attribute”.

   Example 1.8. Set attribute_column parameter
...
modparam("avpops","attribute_column","attribute")
...

1.4.8. value_column (string)

   Name of column containing the AVP value.

   Default value is “value”.

   Example 1.9. Set value_column parameter
...
modparam("avpops","value_column","value")
...

1.4.9. type_column (string)

   Name of column containing the AVP type.

   Default value is “type”.

   Example 1.10. Set type_column parameter
...
modparam("avpops","type_column","type")
...

1.4.10. db_scheme (string)

   Definition of a DB scheme to be used for non-standard access to
   Database information.

   Definition of a DB scheme. Scheme syntax is:
     * db_scheme = name':'element[';'element]*
     * element =
          + 'uuid_col='string
          + 'username_col='string
          + 'domain_col='string
          + 'value_col='string
          + 'value_type='('integer'|'string')
          + 'table='string

   Default value is “NULL”.

   Example 1.11. Set db_scheme parameter
...
modparam("avpops","db_scheme",
"scheme1:table=subscriber;uuid_col=uuid;value_col=first_name")
...

1.4.11. buf_size (integer)

   Allocated size for AVP variables.

   Default value is “1024”.

   Example 1.12. Set buf_size parameter
...
modparam("avpops", "buf_size", 1024)
...

1.5. Exported Functions

1.5.1.  avp_db_load(source, name[, db_id[, prefix]])

   Loads from DB into memory the AVPs corresponding to the given
   source. If given, it sets the script flags for loaded AVPs. It
   returns true if it loaded some values in AVPs, false otherwise
   (db error, no avp loaded ...).

   AVPs may be preceded by an optional prefix, in order to avoid
   some conflicts.

   Meaning of the parameters is as follows:
     * source - what info is used for identifying the AVPs.
       Parameter syntax:
          + source = (pvar|str_value)
            ['/'('username'|'domain'|'uri'|'uuid')])
          + pvar = any pseudo variable defined in OpenSIPS. If the
            pvar is $ru (request uri), $fu (from uri), $tu (to
            uri) or $ou (original uri), then the implicit flag is
            'uri'. Otherwise, the implicit flag is 'uuid'.
     * name - which AVPs will be loaded from DB into memory.
       Parameter syntax is:
          + name = avp_spec['/'(table_name|'$'db_scheme)]
          + avp_spec =
            matching_flags|$avp(avp_name)|$avp(avp_alias)
          + matching_flags = 'a' | 'A' | 'i' | 'I' | 's' | 'S'
            [script_flags]
            'a' or 'A' means matching any of AVP name types ('i'
            and 's'), the rest have the meaning descriped in 'AVP
            naming format' chapter.
     * db_id - reference to a defined DB URL (a numerical id) -
       see the “db_url” module parameter.
     * prefix - static string which will precede the names of the
       AVPs populated by this function.

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   BRANCH_ROUTE, LOCAL_ROUTE and ONREPLY_ROUTE.

   Example 1.13. avp_db_load usage
...
avp_db_load("$fu", "$avp(678)");
avp_db_load("$ru/domain", "i/domain_preferences");
avp_db_load("$avp(uuid)", "$avp(404fwd)/fwd_table");
avp_db_load("$ru", "$avp(123)/$some_scheme");

# use DB URL id 3
avp_db_load("$ru", "$avp(1)", "3");

# precede all loaded AVPs by the "caller_" prefix
avp_db_load("$ru", "$avp(100)", "", "caller_");
xlog("Loaded: $avp(caller_100)\n");

...

1.5.2.  avp_db_store(source,name[,db_id])

   Stores to DB the AVPs corresponding to the given source.

   The meaning and usage of the parameters are identical as for
   avp_db_load(source,name) function. Please refer to its
   description.

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   BRANCH_ROUTE, LOCAL_ROUTE and ONREPLY_ROUTE.

   Example 1.14. avp_db_store usage
...
avp_db_store("$tu","$avp(678)");
avp_db_store("$ru/username","$avp(email)");
# use DB URL id 3
avp_db_store("$ru","$avp(1)","3");
...

1.5.3.  avp_db_delete(source,name[,db_id])

   Deletes from DB the AVPs corresponding to the given source.

   The meaning and usage of the parameters are identical as for
   avp_db_load(source,name) function. Please refer to its
   description.

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   BRANCH_ROUTE, LOCAL_ROUTE and ONREPLY_ROUTE.

   Example 1.15. avp_db_delete usage
...
avp_db_delete("$tu","$avp(678)");
avp_db_delete("$ru/username","$avp(email)");
avp_db_delete("$avp(uuid)","$avp(404fwd)/fwd_table");
# use DB URL id 3
avp_db_delete("$ru","$avp(1)","3");
...

1.5.4.  avp_db_query(query[[,dest],db_id])

   Make a database query and store the result in AVPs.

   The meaning and usage of the parameters:
     * query - must be a valid SQL query. The parameter can
       contain pseudo-variables.
       You must escape any pseudo-variables manually to prevent
       SQL injection attacks. You can use the existing
       transformations escape.common and unescape.common to escape
       and unescape the content of any pseudo-variable. Failing to
       escape the variables used in the query makes you vulnerable
       to SQL injection, e.g. make it possible for an outside
       attacker to alter your database content. The function
       returns true if the query was successful, -2 in case the
       query returned an empty result set, and -1 for all other
       types of errors
     * dest - a list with AVP names where to store the result. The
       format is “$avp(name1);$avp(name2);...”. If this parameter
       is ommited, the result is stored in “$avp(1);$avp(2);...”.
       If the result gives many rows, then multiple AVPs with
       corresponding name will be added. The value type of the AVP
       (string or integer) will be derived from the type of the
       columns.
     * db_id - reference to a defined DB URL (a numerical id) -
       see the “db_url” module parameter. It can be either a
       constant, or a string/int variable.

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   BRANCH_ROUTE, LOCAL_ROUTE and ONREPLY_ROUTE.

   Example 1.16. avp_db_query usage
...
avp_db_query("select password, ha1 from subscriber where username='$tu'"
,
        "$avp(678);$avp(679)");
avp_db_query("delete from subscriber");
avp_db_query("delete from subscriber","","2");

$avp(id)=2;#also works $avp(id)="2"
avp_db_query("delete from subscriber","","$avp(id)");

...

1.5.5.  avp_delete(name)

   Deletes from memory the AVPs with name or, if *, all AVPs.

   Meaning of the parameters is as follows:
     * name - which AVPs will be deleted from memory. Parameter
       syntax is:
          + name = (matching_flags|avp_name|avp_alias)['/'flag]
          + matching_flags = please refer to avp_db_load()
            function
          + flag = 'g'|'G'

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   BRANCH_ROUTE, LOCAL_ROUTE and ONREPLY_ROUTE.

   Example 1.17. avp_delete usage
...
avp_delete("$avp(678)/g");
avp_delete("$avp(email)");
avp_delete("i");
avp_delete("a3");
...

1.5.6.  avp_pushto(destination,name)

   Pushes the value of AVP(s) into the SIP message.

   Meaning of the parameters is as follows:
     * destination - as what will be the AVP value pushed into SIP
       message. Parameter syntax:
          + destination = '$ru' ['/'('username'|'domain')] | '$du'
            | '$br'
          + $ru '['/'('username'|'domain')] - write the AVP in the
            request URI or in username/domain part of it
          + $du - write the AVP in 'dst_uri' field
          + $br - write the AVP directly as a new branch (does not
            affect RURI)
     * name - which AVP(s)/pseudo-variable should be pushed into
       the SIP message. Parameter syntax is:
          + name = ( avp_name | avp_alias | pvar_name )['/'flags]
          + flags = 'g' - effective only with AVPs

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   BRANCH_ROUTE, LOCAL_ROUTE and ONREPLY_ROUTE.

   Example 1.18. avp_pushto usage
...
avp_pushto("$ru/domain","$fd");
avp_pushto("$ru","$avp(678)");
avp_pushto("$ru/domain","$avp(backup_domains)/g");
avp_pushto("$du","$avp(679)");
avp_pushto("$br","$avp(680)");
...

1.5.7.  avp_check(name,op_value)

   Checks the value of the AVP(s) against an operator and value.

   Meaning of the parameters is as follows:
     * name - which AVP(s) should be checked. Parameter syntax is:
          + name = ( pseudo-variable )
     * op_value - define the operator, the value and flags for
       checking. Parameter syntax is:
          + op_value = operator '/' value ['/'flags]
          + operator = 'eq' | 'ne' | 'lt' | 'le' | 'gt' | 'ge' |
            're' | 'fm' | 'and' | 'or' | 'xor'
          + value = pseudo-variable | fix_value
          + fix_value = 'i:'integer | 's:'string | string
          + flags = 'g' | 'G' | 'i' | 'I'
       Operator meaning:
          + eq - equal
          + ne - not equal
          + lt - less than
          + le - less or equal
          + gt - greater than
          + ge - greater or equal
          + re - regexp (regular exression match)
          + fm - fast match (see: man fnmatch)
          + and - bitwise 'and'
          + or - bitwise 'or'
          + xor - bitwise 'xor'
       Integer values can be given in hexadecimal using notation:
       'i:0xhex_number' (e.g.,: 'i:0xabcd');

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   BRANCH_ROUTE, LOCAL_ROUTE and ONREPLY_ROUTE.

   Example 1.19. avp_check usage
...
avp_check("$avp(678)", "lt/345/g");
avp_check("$fd","eq/$td/I");
avp_check("$avp(foo)","gt/$avp($bar)/g");
avp_check("$avp(foo)","re/sip:.*@bar.net/g");
avp_check("$avp(foo)","fm/$avp(fm_avp)/g");
...

1.5.8.  avp_copy(old_name,new_name)

   Copy / move an avp under a new name.

   Meaning of the parameters is as follows:
     * name1 - which AVP(s) should be copied/moved. Parameter
       syntax is:
          + name = ( avp_name | avp_alias )
     * name2 - the new name of the copied/moved AVP(s). Parameter
       syntax is:
          + name = ( avp_name | avp_alias ) ['/'flags]
          + flags = 'g' | 'G' | 'd' | 'D' | 'n' | 'N' | 's' | 'S'

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   BRANCH_ROUTE, LOCAL_ROUTE and ONREPLY_ROUTE.

   Example 1.20. avp_copy usage
...
avp_copy("$avp(678)", "$avp(345)/g");
avp_copy("$avp(old)","$avp(new)/gd");
...

1.5.9.  avp_printf(dest, format)

   NOTE: since OpenSIPS 1.3.0 the function has been moved to core
   and it is an alias to pv_printf().

   Prints the formatted string 'format' in the AVP 'dest'. The
   'format' parameter can include any pseudo-variable defined in
   OpenSIPS. The list with all pseudo-variables in OpenSIPS can be
   found at: http://opensips.org/dokuwiki/.

   Meaning of the parameters is as follows:
     * dest - in which AVP should be stored the result. Parameter
       syntax is:
          + name = ( avp_name | avp_alias )
     * format - the formatted string to be printed in 'dest' AVP.

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   BRANCH_ROUTE, LOCAL_ROUTE and ONREPLY_ROUTE.

   Example 1.21. avp_printf usage
...
avp_printf("$avp(20)", "This is a $rm request with call-id $hdr(call-id)
");
...

1.5.10.  avp_subst(avps, subst)

   Perl/sed-like subst applied to AVPs having string value.

   Meaning of the parameters is as follows:
     * avps - source AVP, destination AVP and flags. Parameter
       syntax is:
          + avps = src_avp [ '/' dst_avp [ '/' flags ] ]
          + src_avp = ( avp_name | avp_alias )
          + dst_avp = ( avp_name | avp_alias ) - if dst_avp is
            missing then the value of src_avp will be replaced
          + flags = ( d | D | g | G ) -- (d, D - delete source
            avp; g, G - apply to all avps matching src_avp name)
     * subst - perl/sed-like reqular expression. Parameter syntax
       is:
          + subst = "/regexp/replacement/flags"
          + regexp - regular expression
          + replacement - replacement string, can include
            pseudo-variables and \1, ..., \9 for matching tokens,
            \0 for whole matching text
          + flags = 'g' | 'G' | 'i' | 'i' (g, G - replace all
            matching tokens; i, I - match ignore case)

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   BRANCH_ROUTE, LOCAL_ROUTE and ONREPLY_ROUTE.

   Example 1.22. avp_subst usage
...
# if avp 678 has a string value in e-mail format, replace the
# domain part with the value of domain part from R-URI
avp_subst("$avp(678)", "/(.*)@(.*)/\1@$rd/");

# if any avp 678 has a string value in e-mail format, replace the
# domain part with the value of domain part from R-URI
# and place the result in avp 679
avp_subst("$avp(678)/$avp(679)/g", "/(.*)@(.*)/\1@$rd/");
...

   IMPORTANT NOTE: if the replacement string includes src_avp or
   dst_avp you will get something that you may not expect. In case
   you have many src_avp and you make the substitution to be
   applied to all of them, after the first src_avp is processed,
   it will be added in avp list and next processing will use it.

1.5.11.  avp_op(name,op_value)

   Different integer operations with avps.

   Meaning of the parameters is as follows:
     * name - 'source_avp/destination_avp' - which AVP(s) should
       be processed and where to store the result. If
       'destination_avp' is missing, same name as 'source_avp' is
       used to store the result.
       Parameter syntax is:
          + name = ( source_avp[/destination_avp] )
            source_avp = ( avp_name | avp_alias )
            destination_avp = ( avp_name | avp_alias )
     * op_value - define the operation, the value and flags.
       Parameter syntax is:
          + op_value = operator '/' value ['/'flags]
          + operator = 'add' | 'sub' | 'mul' | 'div' | 'mod' |
            'and' | 'or' | 'xor' | 'not'
          + value = pseudo-variable | fix_value
          + fix_value = 'i:'integer
          + flags = 'g' | 'G' | 'd' | 'D'
       Integer values can be given in hexadecimal using notation
       'i:0xhex_number' (e.g.,: 'i:0xabcd');

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   BRANCH_ROUTE, LOCAL_ROUTE and ONREPLY_ROUTE.

   Example 1.23. avp_op usage
...
avp_op("$avp(678)", "add/345/g");
avp_op("$avp(number)","sub/$avp(number2)/d");
...

1.5.12.  is_avp_set(name)

   Check if any AVP with name is set.

   Meaning of the parameters is as follows:
     * name - name of AVP to look for. Parameter syntax is:
          + name = avp_name|avp_alias [ '/' flags ])
            flags = ('e'|'s'|'n') - e = empty value; s = value
            string; n = value number (int)

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   BRANCH_ROUTE, LOCAL_ROUTE and ONREPLY_ROUTE.

   Example 1.24. is_avp_set usage
...
if(is_avp_set("$avp(678)"))
    log("AVP with integer id 678 exists\n");
...

1.5.13.  avp_print()

   Prints the list with all the AVPs from memory. This is only a
   helper/debug function.

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   BRANCH_ROUTE, LOCAL_ROUTE and ONREPLY_ROUTE.

   Example 1.25. avp_print usage
...
avp_print();
...

1.5.14.  avp_insert(avp_name, value, index)

   This function inserts an avp value at a certain position
   specified by the last parameter. If the index is greater than
   the count of values the value will be inserted at the end.

   Example 1.26. avp_print usage
...
avp_insert("avp(20)", "$hdr(From)", 2);
...

1.6. Exported Asynchronous Functions

1.6.1.  avp_db_query(query[[,dest],db_id])

   Make a database query and store the result in AVPs.

   The meaning and usage of the parameters:
     * query - must be a valid SQL query. The parameter can
       contain pseudo-variables.
       You must escape any pseudo-variables manually to prevent
       SQL injection attacks. You can use the existing
       transformations escape.common and unescape.common to escape
       and unescape the content of any pseudo-variable. Failing to
       escape the variables used in the query makes you vulnerable
       to SQL injection, e.g. make it possible for an outside
       attacker to alter your database content. The function
       returns true if the query was successful, -2 in case the
       query returned an empty result set, and -1 for all other
       types of errors
     * dest - a list with AVP names where to store the result. The
       format is “$avp(name1);$avp(name2);...”. If this parameter
       is ommited, the result is stored in “$avp(1);$avp(2);...”.
       If the result gives many rows, then multiple AVPs with
       corresponding name will be added. The value type of the AVP
       (string or integer) will be derived from the type of the
       columns.
     * db_id - reference to a defined DB URL (a numerical id) -
       see the “db_url” module parameter.

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
   BRANCH_ROUTE, LOCAL_ROUTE and ONREPLY_ROUTE.

   Example 1.27. async avp_db_query usage
...
{
...
/* Example of a slow MySQL query - it should take around 5 seconds */
async(
        avp_db_query(
                "SELECT table_name, table_version, SLEEP(0.1) from versi
on",
                "$avp(tb_name); $avp(tb_ver); $avp(retcode)"),
        my_resume_route);
/* script execution is halted right after the async() call */
}

/* We will be called when data is ready - meanwhile, the worker is free
*/
route [my_resume_route]
{
        xlog("Results: \n$(avp(tb_name)[*])\n
-------------------\n$(avp(tb_ver)[*])\n
-------------------\n$(avp(retcode)[*])\n");
}
...
