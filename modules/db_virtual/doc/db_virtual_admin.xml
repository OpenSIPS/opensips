<!-- Module User's Guide -->

<chapter>

    <title>&adminguide;</title>

    <section>
        <title>Overview</title>

        <section>
            <title> The idea</title>
            <para>
                A virtual db will expose the same front db api however, it will backed by many real db.
                This means that a virtual db url translates to many real db urls.
                This virtual layer also enables us to use the real dbs in multiple ways such as: parallel, failover(hotswap), round-robin.

                Therefore:
                    each virtual db url with associated real dbs and
                    a way to use(mode) it's real dbs must be specified.
            </para>
        </section>


        <section>
            <title> Modes </title>
            <para>
                    The implemented modes are:
                <itemizedlist>
                    <listitem>
                            FAILOVER
                        <para>
                                Use the first url; if it fails, use the next one, redo operation.
                        </para>
                    </listitem>
                    <listitem>
                            PARALLEL
                        <para>
                                Use all the urls in the virtual db url.
                                Fails if all the urls fail.
                        </para>
                    </listitem>
                    <listitem>
                            ROUND (round-robin)
                        <para>
                                Use the next url each time; if it fails, use the next one, redo operation.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                    There are conceptual limitations to the above modes with respect to the operation.
                    For example in parallel mode it is ok to insert into multiple dbs the same value but it
                    is bad to query multiple dbs into the same result.
                    This implementation threats such operation as it would be in failover mode.
                    <para>
                <programlisting>
  Conceptual allowed(1) and not allowed(0) operations
                          parallel    round
    dbb->use_table
    dbb->init
    dbb->close

    dbb->query              0           1
    dbb->fetch_result       0           0
    dbb->raw_query          0           1
    dbb->free_result        0           0
    dbb->insert             1           1
    dbb->delete             1           0
    dbb->update             1           0
    dbb->replace            1           0
    dbb->last_inserted_id   0           0
    dbb->insert_update      1           1
	dbb->async_raw_query    0           1
	dbb->async_raw_resume   0           1
                </programlisting>
                </para>
                <para>
                    Note 1: The capabilities returned are the minimum common denominator of all the dbs in the set.
                    The capabilities are reduced even more based on the mode of the set (PARALLEL, ROUND).
                </para>
                <para>
                    Note 2: The capabilities will not be reduced for PARALLEL mode but conceptual not allowed operations
                    will be done on a single db.
                    Ex: query will only query one db.
                </para>
                <para>
					Note 3: Since version 2.2 db_virtual supports async_raw_query and async_raw_resume functions currently
					implemented only by the mysql database engine.
                </para>

            </para>
        </section>

        <section>
            <title> Failures</title>
            <para>
                <programlisting>
    When an operation from a process on a real db fails:
        it is marked (global and local CAN flag down)
        its connection closed

    Later a timer process (probe):
    foreach virtual db url
        foreach real db_url
            if global CAN down
                try to connect
            if ok
                global CAN up
                close connection

    Later each process:
        if local CAN down and global CAN up
            if db_max_consec_retrys *
                try to connect
        if ok
            local CAN up

                </programlisting>
            </para>
            <para>
                Note *: there could be inconsistencies between the probe and each process so a retry limit is in order.
                It is reset and ignored by an MI command.
            </para>
        </section>

        <section>
            <title>The timer process</title>
            <para>
                The timer process(probe) is a process that tries to reconnect to failed dbs from time to time.
                It is a separate process so that when it blocks (for a timeout on the connection) it doesn't matter.
            </para>
        </section>

    </section>

    <section>
        <title>Dependencies</title>
        <section>
            <title>&osips; Modules</title>
            <para>
		The following modules must be loaded before this module:
                <itemizedlist>
                    <listitem>
                        <para>
				<!--<emphasis>No dependencies on other &osips; modules</emphasis>.-->
                            <emphasis>At least one real db module</emphasis>.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>External Libraries or Applications</title>
            <para>
		The following libraries or applications must be installed before running
		&osips; with this module loaded:
                <itemizedlist>
                    <listitem>
                        <para>
				<!--<emphasis>libmysqlclient-dev</emphasis> - the development libraries of mysql-client.-->
                            <emphasis>None</emphasis>.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    </section>
    <section>
        <title>Exported Parameters</title>
        <section>
            <title>
                <varname>db_urls</varname> (str)
            </title>
            <para>
		Multiple value parameter used for virtual db urls declaration.
            </para>
            <example>
                <title>Set
                    <varname>db_urls</varname> parameter
                </title>
                <programlisting format="linespecific">
...

modparam("group","db_url","virtual://set1")
modparam("presence|presence_xml", "db_url","virtual://set2")

modparam("db_virtual", "db_urls", "define set1 PARALLEL")
modparam("db_virtual", "db_urls", "mysql://opensips:opensipsrw@localhost/testa")
modparam("db_virtual", "db_urls", "postgres://opensips:opensipsrw@localhost/opensips")

modparam("db_virtual", "db_urls", "define set2 FAILOVER")
modparam("db_virtual", "db_urls", "mysql://opensips:opensipsrw@localhost/testa")
...
                </programlisting>
            </example>

        </section>
        <section>
            <title>
                <varname>db_probe_time</varname> (integer)
            </title>
            <para>
        Time interval after which a registered timer process attempts to check
        failed(as reported by other processes) connections to real dbs. The probe will connect and
        disconnect to the failed real db and announce others.
            </para>
            <para>
                <emphasis>
			Default value is 10 (10 sec).
                </emphasis>
            </para>
            <example>
                <title>Set
                    <varname>db_probe_time</varname> parameter
                </title>
                <programlisting format="linespecific">
...
modparam("db_virtual", "db_probe_time", 20)
...
                </programlisting>
            </example>
        </section>

        <section>
            <title>
                <varname>db_max_consec_retrys</varname> (integer)
            </title>
            <para>
        After the timer process has reported that it can connect to the real db,
        other processes will try to reconnect to it. There are cases where although
        the probe could connect some might fail. This parameter represents the number
        of consecutive failed retries that a process will do before it gives up.
        This value is reset and suppressed by a MI function(db_set).
            </para>
            <para>
                <emphasis>
			Default value is 10 (10 consecutive times).
                </emphasis>
            </para>
            <example>
                <title>Set
                    <varname>db_max_consec_retrys</varname> parameter
                </title>
                <programlisting format="linespecific">
...
modparam("db_virtual", "db_max_consec_retrys", 20)
...

                </programlisting>
            </example>
        </section>
    </section>

    <section>
        <title>Exported MI Functions</title>
        <section>
            <title>
                <function moreinfo="none">db_get</function>
            </title>
            <para>
		Return information about global state of the real dbs.
            </para>
            <para>
		Name:
                <emphasis>db_get</emphasis>
            </para>
            <para>Parameters:</para>
            <itemizedlist>
                <listitem>
                    <para>None.
                    </para>
                </listitem>
            </itemizedlist>

            <para>
		MI FIFO Command Format:
            </para>
            <programlisting  format="linespecific">
                db_get
                _empty_line_
            </programlisting>
        </section>



        <section>
            <title>
                <function moreinfo="none">db_set</function>
            </title>
            <para>Sets the permissions for real dbs access per set per db.</para>
            <para>Sets the reconnect reset flag.</para>
            <para>
		Name:
                <emphasis>db_set</emphasis>
            </para>
            <para>Parameters:</para>
            <itemizedlist>
                <listitem>set_index [int]</listitem>
                <listitem>db_url_index [int]</listitem>
                <listitem>may_use_db_flag [boolean]</listitem>
                <listitem>ignore db_max_consec_retrys[boolean](optional)</listitem>
            </itemizedlist>

            <para>db_set 3 2 0 1 means: </para>
            <itemizedlist>
                <listitem> 3 - the fourth set (must exist)</listitem>
                <listitem> 2 - the third url in the fourth set(must exist)</listitem>
                <listitem> 0 - processes are not allowed to use that url</listitem>
                <listitem> 1 - reset and suppress db_max_consec_retrys</listitem>
            </itemizedlist>

            <para>
		MI FIFO Command Format:
            </para>
            <programlisting  format="linespecific">
                db_set 3 2 0 1
                _empty_line_
            </programlisting>
        </section>
    </section>

</chapter>

